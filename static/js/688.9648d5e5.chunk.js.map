{"version":3,"file":"static/js/688.9648d5e5.chunk.js","mappings":"m8m1BAgBA,MAAMA,GAAmBC,EAAAA,EAAAA,oBAAcC,GAGjCC,EAAkB,CACtBC,YAAa,GACbC,OAAQ,MACRC,UAAW,MACXC,SAAU,MACVC,MAAO,MACPC,WAAY,OAODC,EAAoBC,IAAmB,IAAlB,SAAEC,GAAUD,EAE5C,MAAOE,EAASC,IAAcC,EAAAA,EAAAA,UAASZ,IAGhCa,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,OAClDG,EAAaC,IAAkBJ,EAAAA,EAAAA,WAAS,IACxCK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,IAGtCO,EAAmBC,IAAwBR,EAAAA,EAAAA,WAAS,IAGpDS,EAAWC,IAAgBV,EAAAA,EAAAA,UAAS,IAAIW,MACxCC,EAAWC,IAAgBb,EAAAA,EAAAA,UAAS,IAAIW,KAGzCG,GAAoBC,EAAAA,EAAAA,SAAQ,KAChC,IAAIC,EAAW,IAAIC,GAsCnB,GAnCInB,EAAQR,QAA6B,QAAnBQ,EAAQR,SAC5B0B,EAAWA,EAASE,OAAQC,GAC1BA,EAASC,eAAeC,SAASvB,EAAQR,UAKzCQ,EAAQP,WAAmC,QAAtBO,EAAQP,YAC/ByB,EAAWA,EAASE,OACjBC,GAAaA,EAAS5B,YAAcO,EAAQP,YAK7CO,EAAQL,OAA2B,QAAlBK,EAAQL,QAC3BuB,EAAWA,EAASE,OACjBC,GAAaA,EAAS1B,QAAUK,EAAQL,QAKzCK,EAAQJ,YAAqC,QAAvBI,EAAQJ,aAChCsB,EAAWA,EAASE,OACjBC,GAAaA,EAASG,QAAUxB,EAAQJ,aAKzCI,EAAQN,UAAiC,QAArBM,EAAQN,WAC9BwB,EAAWA,EAASE,OACjBC,GAAaA,EAAS3B,WAAaM,EAAQN,WAK5CM,EAAQT,YAAa,CACvB,MAAMkC,EAAQzB,EAAQT,YAAYmC,cAClCR,EAAWA,EAASE,OACjBC,IAAQ,IAAAM,EAAAC,EAAAC,EAAA,OACM,QAAbF,EAAAN,EAASS,YAAI,IAAAH,OAAA,EAAbA,EAAeD,cAAcH,SAASE,KACtCJ,EAASC,eAAeS,KAAMvC,GACtB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQkC,cAAcH,SAASE,MAEf,QADjBG,EACDP,EAAS5B,iBAAS,IAAAmC,OAAA,EAAlBA,EAAoBF,cAAcH,SAASE,MAC1B,QADgCI,EACjDR,EAAS3B,gBAAQ,IAAAmC,OAAA,EAAjBA,EAAmBH,cAAcH,SAASE,KAEhD,CAGA,OAAOP,GACN,CAAClB,IAGEgC,GAAqBC,EAAAA,EAAAA,aAAaC,IACtC,MAAM,KAAEJ,EAAI,MAAEK,GAAUD,EAAME,OAC9BnC,EAAYoC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACP,CAACP,GAAOK,MAET,IAEGI,GAAeN,EAAAA,EAAAA,aAAaC,IAChC,MAAMC,EAAQD,EAAME,OAAOD,MAC3BlC,EAAYoC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACP9C,YAAa4C,MAEd,IAEGK,GAAeP,EAAAA,EAAAA,aAAY,KAC/BhC,EAAWX,IACV,IAEGmD,GAA4BR,EAAAA,EAAAA,aAAaS,IAE3CzC,EADgB,gBAAdyC,EACUL,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAI,IAAE9C,YAAa,KAElC8C,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAWD,GAAI,IAAE,CAACK,GAAY,UAE/C,IAGGC,GAAsBV,EAAAA,EAAAA,aAAaZ,IACvCjB,EAAoBiB,GACpBf,GAAe,GACfE,EAAc,IACb,IAEGoC,GAAuBX,EAAAA,EAAAA,aAAY,KACvC3B,GAAe,GACfF,EAAoB,MACpBI,EAAc,IACb,IAGGqC,GAAaZ,EAAAA,EAAAA,aAAY,KAC7BzB,EAAesC,GAAmBA,EAAiB,IAClD,IAEGC,GAAad,EAAAA,EAAAA,aAAY,KAC7BzB,EAAesC,GAAmBA,EAAiB,IAClD,IAGGE,GAAoBf,EAAAA,EAAAA,aAAY,KACpCvB,GAAqB,IACpB,IAEGuC,GAAqBhB,EAAAA,EAAAA,aAAY,KACrCvB,GAAqB,IACpB,IAGGwC,GAAiBjB,EAAAA,EAAAA,aAAaZ,IAClC,MAAM8B,EAAa9B,EAASS,MAAQT,EAAS+B,GAC7CxC,EAAcyB,IACZ,MAAMgB,EAAe,IAAIxC,IAAIwB,GAM7B,OALIgB,EAAaC,IAAIH,GACnBE,EAAaE,OAAOJ,GAEpBE,EAAaG,IAAIL,GAEZE,KAER,IAEGI,GAAiBxB,EAAAA,EAAAA,aAAaZ,IAClC,MAAM8B,EAAa9B,EAASS,MAAQT,EAAS+B,GAC7CrC,EAAcsB,IACZ,MAAMqB,EAAe,IAAI7C,IAAIwB,GAM7B,OALIqB,EAAaJ,IAAIH,GACnBO,EAAaH,OAAOJ,GAEpBO,EAAaF,IAAIL,GAEZO,KAER,IAGGC,GAAe1B,EAAAA,EAAAA,aAAaZ,IAChCuC,QAAQC,IAAI,qBAAsBxC,EAASS,OAE1C,IAGGgC,GAAgB7B,EAAAA,EAAAA,aAAY,SAACZ,GAAkC,IAAxB0C,EAASC,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,OACvDJ,QAAQC,IAAI,oBAAqBxC,EAASS,KAAM,MAAOiC,EAEzD,EAAG,IAGGG,GAAmBjC,EAAAA,EAAAA,aAAaZ,IACpCuC,QAAQC,IAAI,uBAAwBxC,EAASS,OAE5C,IAGGqC,GAAiBlC,EAAAA,EAAAA,aAAaZ,IAClCuC,QAAQC,IAAI,sBAAuBxC,EAASS,OAE3C,IAGGsC,GAAenC,EAAAA,EAAAA,aAAaZ,IAChCuC,QAAQC,IAAI,oBAAqBxC,EAASS,OAEzC,IAGGuC,GAAapC,EAAAA,EAAAA,aAChBZ,IACC,MAAM8B,GAAqB,OAAR9B,QAAQ,IAARA,OAAQ,EAARA,EAAUS,QAAgB,OAART,QAAQ,IAARA,OAAQ,EAARA,EAAU+B,IAC/C,OAAOzC,EAAU2C,IAAIH,IAEvB,CAACxC,IAGG2D,GAAerC,EAAAA,EAAAA,aAClBZ,IACC,MAAM8B,GAAqB,OAAR9B,QAAQ,IAARA,OAAQ,EAARA,EAAUS,QAAgB,OAART,QAAQ,IAARA,OAAQ,EAARA,EAAU+B,IAC/C,OAAOtC,EAAUwC,IAAIH,IAEvB,CAACrC,IAIGyD,EAAe,CAEnBvE,UACAgB,oBACAb,mBACAE,cACAE,aACAE,oBACAE,YACAG,YAGAkB,qBACAO,eACAC,eACAC,4BAGAE,sBACAC,uBAGAC,aACAE,aAGAC,oBACAC,qBAGAC,iBACAO,iBACAY,aACAC,eAGAX,eACAG,gBACAI,mBACAC,iBACAC,eAGAI,eAAgBrD,EAAc8C,OAC9BQ,cAAezD,EAAkBiD,QAGnC,OACES,EAAAA,EAAAA,KAACvF,EAAiBwF,SAAQ,CAACxC,MAAOoC,EAAaxE,SAC5CA,KASM6E,EAAeA,KAC1B,MAAMC,GAAUC,EAAAA,EAAAA,YAAW3F,GAE3B,QAAgBE,IAAZwF,EACF,MAAM,IAAIE,MAAM,yDAGlB,OAAOF,GAMIG,EAAyBC,IACpC,MAAMC,EAAoBC,IACxBT,EAAAA,EAAAA,KAAC7E,EAAiB,CAAAE,UAChB2E,EAAAA,EAAAA,KAACO,GAAS3C,EAAAA,EAAAA,GAAA,GAAK6C,MAQnB,OAJAD,EAAiBE,YAAW,yBAAAC,OAC1BJ,EAAUG,aAAeH,EAAUnD,KAAI,KAGlCoD,GAGT,I,sLC3TO,MAAMI,EAAsBC,GAC5BA,EAEiB,kBAAXA,EACF,CAACA,GAGNC,MAAMC,QAAQF,GACTA,EAAOnE,OAAQsE,GAAQA,GAAsB,kBAARA,GAAoBA,EAAIC,QAG/D,GAVa,GCMhBC,EAAgB9F,IAAiC,IAAhC,IAAE+F,EAAG,IAAEC,EAAG,OAAEC,EAAS,KAAKjG,EAC/C,MAAOkG,EAAYC,IAAiB/F,EAAAA,EAAAA,WAAS,IACtCgG,EAAcC,IAAmBjG,EAAAA,EAAAA,WAAS,GAWjD,OAAI8F,IAAeH,GAEfnB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACPC,QAAQ,cACRC,MAAM,OACNP,OAAQA,EACRQ,GAAI,CACFC,aAAc,MAOpBC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEI,SAAU,YAAa5G,SAAA,CAC/BmG,IACCxB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACPC,QAAQ,cACRC,MAAM,OACNP,OAAQA,EACRQ,GAAI,CACFI,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,QAAS,UACTC,OAAQ,MAIdrC,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFM,UAAU,MACVC,QAAQ,OACRV,GAAI,CACFR,SACAmB,QAAS,QACTZ,MAAO,OACPa,UAAW,QACXC,QAASlB,EAAe,EAAI,EAC5BmB,WAAY,4BAEdxB,IAAKA,EACLC,IAAKA,EACLwB,OAnDkBC,KACtBpB,GAAgB,IAmDZqB,QAhDmBC,KACvBtB,GAAgB,GAChBF,GAAc,UAgEZyB,EAAsBC,IAQrB,IARsB,SAC3BtG,EACAd,WAAYqH,EACZC,OAAQC,EACRC,OAAQC,EAAU,YAClBC,EAAc,IAAG,eACjBC,GAAiB,EAAI,iBACrBC,GAAmB,GACpBR,EAEC,MAAOS,EAAoBC,IAAyBnI,EAAAA,EAAAA,UAAS,GAGvDK,OACelB,IAAnBuI,EAA+BA,EAAiBQ,EAC5CP,EACJC,GAAU,MAER,MAAMvC,EAASD,EAA2B,OAARjE,QAAQ,IAARA,OAAQ,EAARA,EAAUkE,QACxChF,EAAagF,EAAOtB,OAAS,GAC/BoE,EAAsB9H,EAAa,EAEtC,GACGwH,EACJC,GAAU,MAEJzH,EAAa,GACf8H,EAAsB9H,EAAa,EAEtC,GACH,IAAKc,EACH,OACEqD,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACPC,QAAQ,cACRC,MAAM,OACNP,OAAQkC,EACR1B,GAAI,CAAEO,QAAS,cAKrB,MAAMvB,EAASD,EAAmBjE,EAASkE,QACrC+C,EAAc/C,EAAOtB,OACrBsE,EAAehD,EAAOhF,IAAe,GAIrCiI,EACJD,GAAgBA,EAAahH,SAASkH,uBAClCF,ED9GmB,SAACG,GAC1B,IAAKA,GAAkC,kBAAdA,EAAwB,MAAO,GAGxD,GAAIA,EAAUC,WAAW,SAAWD,EAAUC,WAAW,SACvD,OAAOD,EAIT,MACME,EAAYF,EAAUC,WAAW,KAAOD,EAAS,IAAArD,OAAOqD,GAE9D,MAAM,GAANrD,OAHkBoD,uBAGCpD,OAAGuD,EACxB,CCkGQC,CAAYN,EAAclH,EAASS,MAGzC,GAAoB,IAAhBwG,EACF,OACE5D,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEI,SAAU,WAAYL,MAAO,QAASvG,UAC/C2E,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACPC,QAAQ,cACRC,MAAM,OACNP,OAAQkC,EACR1B,GAAI,CAAEO,QAAS,gBAMvB,MAAMgC,EAA8B,IAAfvI,EACfwI,EAAcxI,IAAe+H,EAAc,EAC3CU,EAAcV,EAAc,EAElC,OACE7B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEI,SAAU,WAAYL,MAAO,QAASvG,SAAA,EAC/C0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAE0C,SAAU,OAAQC,SAAU,GAAInJ,SAAA,EACzC2E,EAAAA,EAAAA,KAACkB,EAAa,CACZC,IAAK2C,EACL1C,IAAG,GAAAT,OAAKhE,EAASS,KAAI,aAAAuD,OAAY9E,EAAa,GAC9CwF,OAAQkC,IAITe,GAAed,IACdxD,EAAAA,EAAAA,KAACyE,EAAAA,EAAa,CACZ9C,QAAQ,OACR+C,MAAOd,EACP3B,SAAS,SACTpG,WAAYA,EACZgG,GAAI,CACF2C,SAAU,EACVG,gBAAiB,mBACjBC,UAAW,EACXC,YAAa,WAEfC,YACE/C,EAAAA,EAAAA,MAACgD,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAS9B,EACT+B,SAAUb,EACVxC,GAAI,CACFsD,SAAU,OACVC,cAAe,QACf/J,SAAA,CACH,QAEC2E,EAAAA,EAAAA,KAACqF,EAAAA,EAAkB,OAGvBC,YACEvD,EAAAA,EAAAA,MAACgD,EAAAA,EAAM,CACLC,KAAK,QACLC,QAAS5B,EACT6B,SAAUd,EACVvC,GAAI,CACFsD,SAAU,OACVC,cAAe,QACf/J,SAAA,EAEF2E,EAAAA,EAAAA,KAACuF,EAAAA,EAAiB,IAAG,eAS9B3B,EAAc,GAAKH,IAClB1B,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFI,SAAU,WACVC,IAAK,EACLsD,MAAO,EACPb,gBAAiB,qBACjBc,MAAO,QACPC,GAAI,IACJC,GAAI,GACJ7D,aAAc,EACd8D,SAAU,UACVC,WAAY,KACZxK,SAAA,CAEDQ,EAAa,EAAE,OAAK+H,SAO/B,EAAekC,EAAAA,KAAW9C,G,wEChN1B,MAAM+C,EAAwB3K,IAKvB,IAAD4K,EAAA,IALyB,SAC7BrJ,EAAQ,0BACRsJ,GAA4B,EAAI,qBAChCC,EAAuB,IAAG,aAC1BC,GAAe,GAChB/K,EACC,MAAOgL,EAAqBC,IAA0B7K,EAAAA,EAAAA,WAAS,GAE/D,IAAKmB,EACH,OAAO,KAGT,MAAM2J,EAAiB3J,EAAS4J,aAAe5J,EAAS4J,YAAYtF,OAC9DsF,GAAkC,QAApBP,EAAArJ,EAAS4J,mBAAW,IAAAP,OAAA,EAApBA,EAAsB/E,SAAU,GAC9CuF,EACJP,GAA6BM,EAAYhH,OAAS2G,EAC9CO,EAAuBD,EACzBD,EAAYG,UAAU,EAAGR,GAAwB,MACjDK,EAEEI,EACJP,IAAwBI,EAAiBD,EAAcE,EAGnDG,EAAmB,CACvB,CAAEC,MAAO,WAAYpJ,MAAOd,EAAS3B,UACrC,CAAE6L,MAAO,SAAUpJ,MAAOd,EAASe,QACnC,CAAEmJ,MAAO,YAAapJ,MAAOd,EAASmK,UACtC,CAAED,MAAO,YAAapJ,MAAOd,EAAS5B,WACtC,CAAE8L,MAAO,QAASpJ,MAAOd,EAASG,OAASH,EAASzB,aACpDwB,OAAQqK,GAASA,EAAKtJ,OAAwB,SAAfsJ,EAAKtJ,OAEtC,OACEsE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAE8D,GAAI,GAAItK,SAAA,EAEjB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,KACRW,UAAU,KACV2E,cAAY,EACZpF,GAAI,CACFgE,WAAY,IACZJ,MAAO,eACPyB,GAAI,GACJ7L,SAEDsB,EAASS,OAIX+I,GAAgBS,EAAiBrH,OAAS,IACzCS,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ2E,IAAK,EAAGC,SAAU,OAAQF,GAAI,GAAI7L,SAC3DuL,EAAiBS,MAAM,EAAG,GAAGC,IAAI,CAACP,EAAMQ,KACvCvH,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CAEHX,MAAK,GAAAlG,OAAKoG,EAAKF,MAAK,MAAAlG,OAAKoG,EAAKtJ,OAC9BkE,QAAQ,WACRqD,KAAK,QACLnD,GAAI,CACF8C,gBAAiB,mBACjB,UAAW,CACTA,gBAAiB,kBAPhB4C,OAebvH,EAAAA,EAAAA,KAACyH,EAAAA,EAAO,CAAC5F,GAAI,CAAEqF,GAAI,KAGlBZ,GACCvE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,SAAA,EACjB0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQkF,WAAY,SAAUP,IAAK,EAAGD,GAAI,GAAI7L,SAAA,EAChE2E,EAAAA,EAAAA,KAAC2H,EAAAA,EAAQ,CAAClC,MAAM,SAASG,SAAS,WAClC5F,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKE,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,wBAGjDmL,IACCxG,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACT5C,KAAK,QACLC,QAASA,IAAMoB,GAAwBD,GACvCvE,GAAI,CAAEgG,GAAI,QAASxM,SAElB+K,GAAsBpG,EAAAA,EAAAA,KAAC8H,EAAAA,EAAc,KAAM9H,EAAAA,EAAAA,KAAC+H,EAAAA,EAAc,UAKjE/H,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACRE,GAAI,CACFmG,WAAY,IACZvC,MAAO,iBACPwC,WAAY,YACZ5M,SAEDsL,IAGFH,IAAmBJ,IAClBpG,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACR8D,MAAM,UACN5D,GAAI,CACFqG,GAAI,EACJC,OAAQ,UACRC,eAAgB,YAChB,UAAW,CACT3C,MAAO,iBAGXR,QAASA,IAAMoB,GAAuB,GAAMhL,SAC7C,kBAML0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,SAAA,EACjB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKsF,cAAY,EAACpF,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,yBAG/D2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACR8D,MAAM,iBACN5D,GAAI,CAAEwG,UAAW,UAAWhN,SAC7B,mDAOJ8K,GAAgBS,EAAiBrH,OAAS,IACzCS,EAAAA,EAAAA,KAACsI,EAAAA,EAAI,CACH3G,QAAQ,WACRE,GAAI,CACFqF,GAAI,EACJrC,YAAa,WACbxJ,UAEF0G,EAAAA,EAAAA,MAACwG,EAAAA,EAAW,CAAC1G,GAAI,CAAE2G,GAAI,mBAAoBnN,SAAA,EACzC2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,KACRsF,cAAY,EACZpF,GAAI,CAAEgE,WAAY,IAAKqB,GAAI,GAAI7L,SAChC,sBAID2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACTiG,oBAAqB,CACnBC,GAAI,MACJC,GAAI,UACJC,GAAI,eAENzB,IAAK,GACL9L,SAEDuL,EAAiBU,IAAI,CAACP,EAAMQ,KAC3BxF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAEFH,GAAI,CAAEW,QAAS,OAAQqG,cAAe,UAAWxN,SAAA,EAEjD2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,UACR8D,MAAM,iBACN5D,GAAI,CACFgE,WAAY,IACZT,cAAe,YACf0D,cAAe,IACfzN,SAED0L,EAAKF,SAER7G,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACRE,GAAI,CACFgE,WAAY,IACZJ,MAAO,eACPyC,GAAI,IACJ7M,SAED0L,EAAKtJ,UAtBH8J,WAgChB5K,EAASoM,QACRhH,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,SAAA,EACjB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKsF,cAAY,EAACpF,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,WAG/D2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACR8D,MAAM,iBACN5D,GAAI,CACF8C,gBAAiB,gBACjBc,MAAO,uBACPuD,EAAG,EACHlH,aAAc,EACdmH,OAAQ,YACRpE,YAAa,eACboD,WAAY,YACZ5M,SAEDsB,EAASoM,WAMfpM,EAASuM,SACRnH,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,SAAA,EACjB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,KACRsF,cAAY,EACZpF,GAAI,CAAEgE,WAAY,IAAKJ,MAAO,cAAepK,SAC9C,0BAGD2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACRE,GAAI,CACF8C,gBAAiB,cACjBc,MAAO,qBACPuD,EAAG,EACHlH,aAAc,EACdmH,OAAQ,YACRpE,YAAa,aACboD,WAAY,YACZ5M,SAEDsB,EAASuM,gBAQtB,EAAepD,EAAAA,KAAWC,G,0CChRnB,MAAMoD,EAAoB,CAC/BC,kBAAmB,GACnBC,qBAAsB,CAAC,EAAG,GAAI,GAAI,GAAI,IACtCC,aAAc,GAMHC,EAAc,CACzBC,aAAc,QACdC,gBAAiB,mBACjBC,iBAAkB,EAClBC,oBAAqB,QAMVC,EAAc,CACzBC,eAAgB,UAChBC,UAAW,YACXC,MAAO,UACPC,SAAU,QACVC,MAAO,OACPC,SAAU,WAMCC,EAAiB,CAC5BC,UAAW,IACXC,UAAW,GACXC,uBAAwB,KAMbC,EAAgB,CAC3BC,eAAgB,IAChBC,kBAAmB,EACnBC,iBAAkB,wCAMPC,EAAgB,CAC3BC,cAAe,MACfC,wBAAyB,G,iBCxCrBC,IAAkBC,EAAAA,EAAAA,IAAO3P,IAAA,IAAC,UAAE4P,GAAqB5P,EAAPqF,GAAKwK,EAAAA,EAAAA,GAAA7P,EAAA8P,IAAA,OACnDlL,EAAAA,EAAAA,KAACmL,EAAAA,GAAOvN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK6C,GAAK,IAAE2K,QAAS,CAAEC,OAAQL,OADjBD,CAErB9H,IAAA,IAAC,MAAEqI,GAAOrI,EAAA,MAAM,CACjB,CAAC,MAADtC,OAAO4K,EAAAA,EAAeC,UAAY,CAChCjH,SAAU,IACVqB,SAAU0F,EAAMG,WAAWC,QAAQ,IACnCC,QAASL,EAAMM,QAAQ,SAOrBC,GAAmBC,IAA0C,IAADC,EAAA,IAAxC,SAAEpP,EAAQ,UAAEqP,EAAY,WAAWF,EAC3D,IAAa,OAARnP,QAAQ,IAARA,GAAwB,QAAhBoP,EAARpP,EAAUC,sBAAc,IAAAmP,IAAxBA,EAA0BxM,UAAmB,OAAR5C,QAAQ,IAARA,IAAAA,EAAUe,QAClD,OAAO,KAIT,MAAMuO,EJc0B,WAA0C,IAA3BC,EAAgB5M,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,GAClE,MAAM6M,EAAqBC,GACpBA,EAEqB,kBAAfA,EACFA,EACJC,MAAM,KACN/E,IAAKgF,GAAMA,EAAErL,QACbvE,OAAO6P,SAGRzL,MAAMC,QAAQqL,GACTA,EACJ1P,OAAQ4P,GAAMA,GAAkB,kBAANA,GAC1BhF,IAAKgF,GAAMA,EAAErL,QAGX,GAfiB,GAkB1B,MAAO,CACLuL,QAASL,EArB6B7M,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,IAsBzCmN,UAAWN,EAAkBD,GAEjC,CItCuBQ,CACnB/P,EAASC,gBAAkBD,EAASe,QAAU,GAC9Cf,EAASuP,kBAAoB,IAGzBtP,EAAiBqP,EAAaO,QAC9BN,EAAmBD,EAAaQ,UAEtC,GAA8B,IAA1B7P,EAAe2C,OACjB,OAAO,KAGT,MAAMoN,EACsB,IAA1B/P,EAAe2C,OACX3C,EAAe,GAAE,GAAA+D,OACd/D,EAAe,GAAE,MAAA+D,OAAK/D,EAAe2C,OAAS,GAEjDqN,GACJ7K,EAAAA,EAAAA,MAAC+D,EAAAA,SAAc,CAAAzK,SAAA,EACb2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACvB,MAAM,UAAU9D,QAAQ,YAAYE,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,4BAGzE0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqG,GAAI,GAAI7M,SAAA,EACjB0G,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,QAAQW,UAAU,MAAKjH,SAAA,EACzC2E,EAAAA,EAAAA,KAAA,UAAA3E,SAAQ,aAAiB,IAAEuB,EAAeiQ,KAAK,SAEhDX,EAAiB3M,OAAS,IACzBwC,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,QAAQW,UAAU,MAAMT,GAAI,CAAEqG,GAAI,IAAM7M,SAAA,EAC1D2E,EAAAA,EAAAA,KAAA,UAAA3E,SAAQ,eAAmB,IAAE6Q,EAAiBW,KAAK,aAIzD7M,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,UAAUE,GAAI,CAAEqG,GAAI,EAAGxF,QAAS,IAAMrH,SAAC,qEAM/D,OACE2E,EAAAA,EAAAA,KAAC8K,GAAe,CAACgC,MAAOF,EAAgBG,OAAK,EAACC,UAAU,MAAK3R,UAC3D2E,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAO8F,EACPlH,MAAOuG,EACPhH,KAAK,QACLnD,GAAI,CACFuD,cAAe,aACfS,WAAY,UAUhBoH,GAAgBC,IAOf,IAPgB,UACrBC,EAAS,MACTtG,EAAK,MACLpB,EAAK,QACL+F,EAAO,KACPxG,EAAO,QAAO,YACduB,GACD2G,EACC,IAAKrG,GAAmB,MAAVA,GAA2B,SAAVA,EAC7B,OAAO,KAIT,MAAM8F,EAAeQ,EJwCKC,EAACD,EAAW1P,KACtC,IAAK0P,IAAc1P,EAAO,MAAO,GAEjC,MAAM4P,EAAOF,EAAUnQ,cACjBsQ,EAAM7P,EAAM8P,WAElB,OAAQF,GACN,IAAK,iBACL,IAAK,kBACH,MAAM,YAAN1M,OAAmB2M,GAErB,IAAK,mBACL,IAAK,oBACH,MAAM,cAAN3M,OAAqB2M,GAEvB,IAAK,aACH,MAAM,GAAN3M,OAAU2M,EAAIE,OAAO,GAAGC,cAAgBH,EAAIjG,MAAM,GAAE,UAEtD,IAAK,YACH,MAA0B,SAAtBiG,EAAItQ,cACC,aAEFsQ,EAET,IAAK,QACH,MAAM,GAAN3M,OAAU2M,EAAIE,OAAO,GAAGC,cAAgBH,EAAIjG,MAAM,GAAE,aAEtD,IAAK,WACH,MAAM,GAAN1G,OAAU2M,EAAIE,OAAO,GAAGC,cAAgBH,EAAIjG,MAAM,GAAE,aAEtD,QACE,OAAOiG,EAAIE,OAAO,GAAGC,cAAgBH,EAAIjG,MAAM,KItE/C+F,CAAaD,EAAWtG,GACP,kBAAVA,EACPA,EACA6G,OAAO7G,GAEL8G,GACJ3N,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAO8F,EACPlH,MAAOA,EACPT,KAAMA,EACNnD,GAAI,CACFuD,cAAe,aACfS,WAAY,OAKlB,IAAK2F,IAAYjF,EACf,OAAOoH,EAGT,MAAMf,EAAiBrG,GACrBxE,EAAAA,EAAAA,MAAC+D,EAAAA,SAAc,CAAAzK,SAAA,EACb2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACvB,MAAM,UAAU9D,QAAQ,YAAYE,GAAI,CAAEgE,WAAY,KAAMxK,SACrEmQ,KAEHxL,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,QAAQE,GAAI,CAAEqG,GAAI,IAAM7M,SACzCkL,OAILiF,EAGF,OACExL,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC2B,MAAOF,EAAgBG,OAAK,EAACC,UAAU,MAAK3R,SAClDsS,KAaDC,GAAsBC,IAWrB,IAADC,EAAA3Q,EAAA4Q,EAAAC,EAAA,IAXuB,SAC3BrR,EAAQ,QACRsR,GAAU,EAAI,aACdC,EAAe,CACb,SACA,YACA,QACA,WACA,QACA,aAEHL,EACC,IAAKlR,EACH,OAAO,KAIT,MAAMwR,EAAiB,CACrBtE,gBAA2B,OAAXD,QAAW,IAAXA,OAAW,EAAXA,EAAaC,iBAAkB,UAC/CC,WAAsB,OAAXF,QAAW,IAAXA,OAAW,EAAXA,EAAaE,YAAa,UACrCC,OAAkB,OAAXH,QAAW,IAAXA,OAAW,EAAXA,EAAaG,QAAS,YAC7BC,UAAqB,OAAXJ,QAAW,IAAXA,OAAW,EAAXA,EAAaI,WAAY,OACnCC,OAAkB,OAAXL,QAAW,IAAXA,OAAW,EAAXA,EAAaK,QAAS,UAC7BC,UAAqB,OAAXN,QAAW,IAAXA,OAAW,EAAXA,EAAaM,WAAY,WAG/BkE,EAAa,CACjB,CACEC,IAAK,SACL/L,WACEtC,EAAAA,EAAAA,KAAC6L,GAAgB,CACflP,SAAUA,EACVqP,UAAWmC,EAAetE,kBAIhC,CACEwE,IAAK,YACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZE,UAAU,YACVtG,MAAOlK,EAAS5B,UAChB0K,MAAO0I,EAAerE,UACtB0B,QAAQ,qBACRjF,YACE5J,EAAS5B,WAAkD,SAArC4B,EAAS5B,UAAUiC,cAAwB,0BAAA2D,OACnChE,EAAS5B,UAAUiC,eAC7C,+CAKZ,CACEqR,IAAK,QACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZE,UAAU,aACVtG,MAAOlK,EAASG,OAASH,EAASzB,WAClCuK,MAAO0I,EAAepE,MACtByB,QAAQ,mBACRjF,YAAW,iCAAA5F,OAC4B,QAD5BmN,EACTnR,EAASG,OAASH,EAASzB,kBAAU,IAAA4S,OAAA,EADOA,EAE3C9Q,cAAa,2BAItB,CACEqR,IAAK,WACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZE,UAAU,WACVtG,MAAOlK,EAAS3B,SAChByK,MAAO0I,EAAenE,SACtBwB,QAAQ,oBACRjF,YAAW,aAAA5F,OAAgC,QAAhCxD,EAAeR,EAAS3B,gBAAQ,IAAAmC,OAAA,EAAjBA,EAAmBH,cAAa,gBAIhE,CACEqR,IAAK,QACL/L,UAAW3F,EAAS1B,OAClB+E,EAAAA,EAAAA,KAACiN,GAAa,CACZE,UAAU,QACVtG,MAAOlK,EAAS1B,MAChBwK,MAAO0I,EAAelE,MACtBuB,QAAQ,aACRjF,YAAW,0BAAA5F,OAA0C,QAA1CoN,EAA4BpR,EAAS1B,aAAK,IAAA8S,OAAA,EAAdA,EAAgB/Q,cAAa,uBAEpE,MAEN,CACEqR,IAAK,WACL/L,UAAW3F,EAAS2R,UAClBtO,EAAAA,EAAAA,KAACiN,GAAa,CACZE,UAAU,WACVtG,MAAOlK,EAAS2R,SAChB7I,MAAO0I,EAAejE,SACtBsB,QAAQ,oBACRjF,YAAW,sBAAA5F,OAAyC,QAAzCqN,EAAwBrR,EAAS2R,gBAAQ,IAAAN,OAAA,EAAjBA,EAAmBhR,cAAa,yBAEnE,OAIFuR,EAAeN,EACjBG,EACAA,EAAW1R,OAAQ8R,GAASN,EAAarR,SAAS2R,EAAKH,MAE3D,OACErO,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACT2E,IAAK,IACLD,GAAI,EACJE,SAAU,OACVM,WAAY,UACZrM,SAEDkT,EAAajH,IAAImH,IAAA,IAAC,IAAEJ,EAAG,UAAE/L,GAAWmM,EAAA,OACnCnM,GACEtC,EAAAA,EAAAA,KAAC8F,EAAAA,SAAc,CAAAzK,SAAYiH,GAAN+L,GACnB,UAMZ,GAAevI,EAAAA,KAAW8H,I,+EC3P1B,MAAMc,GAAkBtT,IAMjB,IANkB,KACvBuT,EAAI,MACJpH,EAAK,YACLqH,GAAc,EAAK,iBACnBC,EAAgB,eAChBC,GAAiB,GAClB1T,EACC,MAAM2T,ELqP0BC,KAChC,IAAKA,GAAsC,kBAAhBA,EAA0B,MAAO,GAE5D,IAAIC,EAAYD,EAAY/N,OAgB5B,OAbAgO,EAAYA,EAAUC,QAAQ,aAAc,IAC5CD,EAAYA,EAAUC,QAAQ,gBAAY,IAGtCD,EAAU1P,OAAS,IACrB0P,EAAYA,EAAUzB,OAAO,GAAGC,cAAgBwB,EAAU5H,MAAM,IAI9D4H,IAAcA,EAAUE,MAAM,YAChCF,GAAa,KAGRA,GKxQsBG,CAAkBT,GAE/C,OACE5M,EAAAA,EAAAA,MAACsN,GAAAA,GAAQ,CACPxN,GAAI,CACF6D,GAAI,EACJC,GAAI,EACJ+B,WAAY,aACZhF,QAASkM,EAAc,GAAM,EAC7BjM,WAAY,4BACZtH,SAAA,EAEF2E,EAAAA,EAAAA,KAACsP,GAAAA,EAAY,CAACzN,GAAI,CAAEsD,SAAU,OAAQ+C,GAAI,IAAM7M,SAC7CyT,GACC9O,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACT5C,KAAK,QACLC,QAASA,IAAsB,OAAhB4J,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAmBtH,GAClC1F,GAAI,CACF4D,MAAOmJ,EAAc,eAAiB,gBACtC,UAAW,CACTjK,gBAAiBiK,EAAc,gBAAkB,eACjDlM,QAAS,KAEXrH,UAEF2E,EAAAA,EAAAA,KAACuP,GAAAA,EAAS,CAAC3J,SAAS,aAGtB5F,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFD,MAAO,GACPP,OAAQ,GACRS,aAAc,MACd6C,gBAAiB,eACjBc,MAAO,uBACPjD,QAAS,OACTkF,WAAY,SACZ8H,eAAgB,SAChB5J,SAAU,UACVC,WAAY,IACZ4J,WAAY,GACZpU,SAEDkM,EAAQ,OAKfvH,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CACXlD,SACExM,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACRE,GAAI,CACFmG,WAAY,IACZI,eAAgBwG,EAAc,eAAiB,QAC/CvT,SAED0T,UAkBPY,GAAuB1M,IAMtB,IANuB,SAC5BtG,EAAQ,eACRmS,GAAiB,EAAK,YACtBc,GAAc,EAAK,gBACnBC,GAAkB,EAAI,eACtBC,GACD7M,EACC,MAAO8M,EAAUC,IAAexU,EAAAA,EAAAA,UAASqU,IAClCI,EAAgBC,IAAqB1U,EAAAA,EAAAA,UAAS,IAAIW,KAEzD,IAAKQ,EACH,OAAO,KAGT,MAAMwT,ELiI6BA,IAC9BA,EAEuB,kBAAjBA,EAEFA,EACJ9D,MAAM,wCACN/E,IAAKqH,GAASA,EAAK1N,QACnBvE,OAAQiS,GAASA,GAAQA,EAAKpP,OAAS,GACvC+H,IAAKqH,GAASA,EAAKO,QAAQ,aAAc,IAAIjO,QAG9CH,MAAMC,QAAQoP,GACTA,EACJzT,OAAQiS,GAASA,GAAwB,kBAATA,GAChCrH,IAAKqH,GAASA,EAAK1N,QACnBvE,OAAQiS,GAASA,EAAKpP,OAAS,GAG7B,GAlBmB,GKlIL6Q,CAAqBzT,EAASwT,cAEnD,GAA4B,IAAxBA,EAAa5Q,OACf,OACEwC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAE8D,GAAI,GAAItK,SAAA,EACjB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKsF,cAAY,EAACpF,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,kBAG/D2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACR8D,MAAM,iBACN5D,GAAI,CAAEwG,UAAW,UAAWhN,SAC7B,oDAOP,MAAMgV,EAAwBC,IAC5B,MAAMC,EAAoB,IAAIpU,IAAI8T,GAC9BA,EAAerR,IAAI0R,GACrBC,EAAkB1R,OAAOyR,GAEzBC,EAAkBzR,IAAIwR,GAExBJ,EAAkBK,GACJ,OAAdT,QAAc,IAAdA,GAAAA,EAAiBQ,GAAYL,EAAerR,IAAI0R,KAG5CE,EAAiBP,EAAejL,KAChCyL,EAAaN,EAAa5Q,OAC1BmR,EAAuBC,KAAKC,MAAOJ,EAAiBC,EAAc,KAElEI,GACJ9O,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQkF,WAAY,SAAUP,IAAK,EAAGD,GAAI,GAAI7L,SAAA,EAChE2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKE,GAAI,CAAEgE,WAAY,IAAKrB,SAAU,GAAInJ,SAAC,iBAI9DyT,IACC9O,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAK,GAAAlG,OAAK6P,EAAc,KAAA7P,OAAI8P,EAAU,cACtChL,MAAO+K,IAAmBC,EAAa,UAAY,UACnDzL,KAAK,QACLrD,QAAQ,cAIZ3B,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAK,GAAAlG,OAAK8P,EAAU,UACpBzL,KAAK,QACLrD,QAAQ,WACRmP,MAAM9Q,EAAAA,EAAAA,KAAC+Q,GAAAA,EAAQ,MAGhBnB,IACC5P,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACT3C,QAASA,IAAM+K,GAAaD,GAC5B/K,KAAK,QACLnD,GAAI,CAAEgG,GAAI,GAAIxM,SAEb0U,GAAW/P,EAAAA,EAAAA,KAAC8H,EAAAA,EAAc,KAAM9H,EAAAA,EAAAA,KAAC+H,EAAAA,EAAc,SAMlDiJ,GACJhR,EAAAA,EAAAA,KAACiR,GAAAA,EAAI,CAACpP,GAAI,CAAE8D,GAAI,GAAItK,SACjB8U,EAAa7I,IAAI,CAACqH,EAAMpH,KACvBvH,EAAAA,EAAAA,KAAC0O,GAAe,CAEdC,KAAMA,EACNpH,MAAOA,EACPqH,YAAaqB,EAAerR,IAAI2I,GAChCsH,iBAAkBwB,EAClBvB,eAAgBA,GALXvH,MAWb,OACExF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAE8D,GAAI,GAAItK,SAAA,EACjB2E,EAAAA,EAAAA,KAACyH,EAAAA,EAAO,CAAC5F,GAAI,CAAEqF,GAAI,KAElB2J,EAGA/B,GAAkB0B,EAAiB,IAClCzO,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,SAAA,EACjB2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFD,MAAO,OACPP,OAAQ,EACRsD,gBAAiB,WACjB7C,aAAc,EACdoP,SAAU,UACV7V,UAEF2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFD,MAAM,GAADjB,OAAK+P,EAAoB,KAC9BrP,OAAQ,OACRsD,gBACE6L,IAAmBC,EACf,eACA,eACN9N,WAAY,+BAIlBZ,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,UAAU8D,MAAM,iBAAiB5D,GAAI,CAAEqG,GAAI,IAAM7M,SAAA,CAClEqV,EAAqB,mBAK3Bd,GACC5P,EAAAA,EAAAA,KAACmR,GAAAA,EAAQ,CAACC,GAAIrB,EAAUsB,QAAQ,OAAOC,eAAa,EAAAjW,SACjD2V,IAGHA,MAMR,GAAelL,EAAAA,KAAW6J,I,6HC9M1B,MAAM4B,GAAwBnW,IAevB,IAfwB,SAC7BuB,EAAQ,eACR6U,EAAc,iBACdC,EAAgB,QAChBC,EAAO,WACPC,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRnS,GAAa,EAAK,aAClBC,GAAe,EAAK,QACpBmS,GAAU,EAAK,qBACfC,GAAuB,EAAI,KAC3BhN,EAAO,SAAQ,QACfrD,EAAU,aACXvG,EACC,MAAO6W,EAAUC,IAAe1W,EAAAA,EAAAA,UAAS,OAClC2W,EAAeC,IAAoB5W,EAAAA,EAAAA,UAAS,MAEnD,IAAKmB,EACH,OAAO,KAGT,MAIM0V,EAAkBA,KACtBH,EAAY,OAORI,EAAuBA,KAC3BF,EAAiB,OAWbG,EAAelT,IACZ,OAAPqS,QAAO,IAAPA,GAAAA,EAAU/U,EAAU0C,GACpBiT,KAuBIE,GACJzQ,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ2E,IAAK,EAAGO,WAAY,UAAWrM,SAAA,EAEzD2E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAM,CACLpD,QAASA,EACTqD,KAAMA,EACNyN,WAAWzS,EAAAA,EAAAA,KAAC0S,GAAAA,EAAO,IACnBzN,QAxCqB0N,KACX,OAAdnB,QAAc,IAAdA,GAAAA,EAAiB7U,IAwCbkF,GAAI,CACFsD,SAAU,OACV8C,WAAY,UACZ5M,SACH,oBAKD2E,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CACN2B,MAAOnN,EAAa,wBAA0B,mBAAmBtE,UAEjE2E,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACT3C,QAlDqB2N,KACX,OAAhBnB,QAAgB,IAAhBA,GAAAA,EAAmB9U,GAAWgD,IAkDxB8F,MAAO9F,EAAa,QAAU,UAC9BqF,KAAMA,EAAK3J,SAEVsE,GAAaK,EAAAA,EAAAA,KAAC6S,GAAAA,EAAkB,KAAM7S,EAAAA,EAAAA,KAAC8S,GAAAA,EAAY,SAKxD9S,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC2B,MAAM,iBAAgBzR,UAC7B2E,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CAAC3C,QAxEWzH,IAC3B4U,EAAiB5U,EAAMuV,gBAuEuB/N,KAAMA,EAAK3J,UACnD2E,EAAAA,EAAAA,KAACgT,GAAAA,EAAS,SAIdjR,EAAAA,EAAAA,MAACkR,GAAAA,EAAI,CACHhB,SAAUE,EACVe,KAAM3G,QAAQ4F,GACdgB,QAASb,EACTc,aAAc,CACZC,SAAU,SACVC,WAAY,UAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,UACZjY,SAAA,EAEF2E,EAAAA,EAAAA,KAACwT,EAAAA,EAAQ,CAACvO,QAASA,IAAMsN,EAAY,QAAQlX,UAC3C2E,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CAAClD,QAAQ,iBAExBxM,EAAAA,EAAAA,KAACwT,EAAAA,EAAQ,CAACvO,QAASA,IAAMsN,EAAY,SAASlX,UAC5C2E,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CAAClD,QAAQ,uBAExBxM,EAAAA,EAAAA,KAACwT,EAAAA,EAAQ,CAACvO,QAASA,IAAMsN,EAAY,UAAUlX,UAC7C2E,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CAAClD,QAAQ,4BAMxBiH,EAAgBzB,IACpBjQ,EAAAA,EAAAA,MAAA2R,EAAAA,SAAA,CAAArY,SAAA,EACE2E,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC2B,MAAM,eAAczR,UAC3B2E,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CAAC3C,QAlHMzH,IACtB0U,EAAY1U,EAAMuV,gBAiHuB/N,KAAMA,EAAK3J,UAC9C2E,EAAAA,EAAAA,KAAC2T,GAAAA,EAAY,SAIjB5R,EAAAA,EAAAA,MAACkR,GAAAA,EAAI,CACHhB,SAAUA,EACViB,KAAM3G,QAAQ0F,GACdkB,QAASd,EACTe,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,gBAAiB,CACfF,SAAU,MACVC,WAAY,SACZjY,SAAA,EAEF0G,EAAAA,EAAAA,MAACyR,EAAAA,EAAQ,CAACvO,QAvGO2O,KACX,OAAVjC,QAAU,IAAVA,GAAAA,EAAahV,GACb0V,KAqGsChX,SAAA,EAChC2E,EAAAA,EAAAA,KAACsP,GAAAA,EAAY,CAAAjU,UACX2E,EAAAA,EAAAA,KAAC6T,GAAAA,EAAY,CAACjO,SAAS,aAEzB5F,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CAAClD,QAAQ,yBAGxBzK,EAAAA,EAAAA,MAACyR,EAAAA,EAAQ,CAACvO,QAzGO6O,KACX,OAAVlC,QAAU,IAAVA,GAAAA,EAAajV,GAAWiD,GACxByS,KAuGsChX,SAAA,EAChC2E,EAAAA,EAAAA,KAACsP,GAAAA,EAAY,CAAAjU,SACVuE,GACCI,EAAAA,EAAAA,KAAC+T,GAAAA,EAAY,CAACnO,SAAS,WAEvB5F,EAAAA,EAAAA,KAACgU,GAAAA,EAAkB,CAACpO,SAAS,aAGjC5F,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CACXlD,QAAS5M,EAAe,kBAAoB,iBAIhDI,EAAAA,EAAAA,KAACyH,EAAAA,EAAO,IAEPsK,IACChQ,EAAAA,EAAAA,MAACyR,EAAAA,EAAQ,CAACvO,QApHCgP,KACX,OAANpC,QAAM,IAANA,GAAAA,EAASlV,GACT0V,KAkHoChX,SAAA,EAC5B2E,EAAAA,EAAAA,KAACsP,GAAAA,EAAY,CAAAjU,UACX2E,EAAAA,EAAAA,KAACkU,GAAAA,EAAQ,CAACtO,SAAS,aAErB5F,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CAAClD,QAAQ,sBAI1BzK,EAAAA,EAAAA,MAACyR,EAAAA,EAAQ,CAACvO,QAvHKkP,KACX,OAARrC,QAAQ,IAARA,GAAAA,EAAWnV,GACX0V,KAqHoChX,SAAA,EAC9B2E,EAAAA,EAAAA,KAACsP,GAAAA,EAAY,CAAAjU,UACX2E,EAAAA,EAAAA,KAACoU,GAAAA,EAAU,CAACxO,SAAS,aAEvB5F,EAAAA,EAAAA,KAAC0P,GAAAA,EAAY,CAAClD,QAAQ,0BAOxB5F,GACJ7E,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ2E,IAAK,EAAGC,SAAU,OAAQc,GAAI,GAAI7M,SAAA,CAC3DsB,EAASzB,aACR8E,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAK,GAAAlG,OAAKhE,EAASzB,WAAU,eAC7B8J,KAAK,QACLrD,QAAQ,WACR8D,MACwC,aAAtC9I,EAASzB,WAAW8B,cAChB,UACsC,iBAAtCL,EAASzB,WAAW8B,cACpB,UACA,UAKTL,EAAS5B,WAAoC,SAAvB4B,EAAS5B,YAC9BiF,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAOlK,EAAS5B,UAChBiK,KAAK,QACLrD,QAAQ,WACRmP,MAAM9Q,EAAAA,EAAAA,KAAC2H,EAAAA,EAAQ,MAIlBhL,EAAS1B,QACR+E,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CAACX,MAAOlK,EAAS1B,MAAO+J,KAAK,QAAQrD,QAAQ,aAGnDhF,EAAS2R,WACRtO,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CAACX,MAAOlK,EAAS2R,SAAUtJ,KAAK,QAAQrD,QAAQ,gBAK3D,OACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAE8D,GAAI,GAAItK,SAAA,EACjB2E,EAAAA,EAAAA,KAACyH,EAAAA,EAAO,CAAC5F,GAAI,CAAEqF,GAAI,MAGnBlH,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKsF,cAAY,EAACpF,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,aAK/D0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACTgN,eAAgB,gBAChB9H,WAAY,SACZR,GAAI,GACJ7L,SAAA,CAEDmX,EACAiB,KAIF7M,EAGAjK,EAAS0X,QACRtS,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqG,GAAI,EAAGc,EAAG,EAAGrE,gBAAiB,UAAW7C,aAAc,GAAIzG,SAAA,EACpE2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,QAAQ8D,MAAM,iBAAiBwB,cAAY,EAAA5L,SAAC,yBAGhE0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ2E,IAAK,EAAGC,SAAU,QAAS/L,SAAA,CACpDsB,EAAS0X,MAAMC,YACdvS,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,UAAStG,SAAA,CAAC,QACtBsB,EAAS0X,MAAMC,UAAU,YAGlC3X,EAAS0X,MAAME,YACdxS,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,UAAStG,SAAA,CAC1BsB,EAAS0X,MAAME,UAAU,eAG7B5X,EAAS0X,MAAMG,WACdzS,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,UAAStG,SAAA,CAAC,YAClB,IACT,IAAIoZ,KAAK9X,EAAS0X,MAAMG,UAAUE,kCAUnD,GAAe5O,EAAAA,KAAWyL,IC3S1B,SAASoD,GAAcvZ,GAcnB,IAdoB,iBACtBK,EAAgB,KAChByX,EAAI,QACJC,EAAO,eACP3B,EAAc,iBACdC,EAAgB,QAChBC,EAAO,WACPC,EAAU,WACVC,EAAU,OACVC,EAAM,SACNC,EAAQ,WACRnS,GAAa,EAAK,aAClBC,GAAe,EAAK,QACpBmS,GAAU,GACX3W,EACC,IAAKK,EACH,OAAO,KAgCT,OACEsG,EAAAA,EAAAA,MAAC6S,EAAAA,GAAM,CACLC,OAAO,QACP3B,KAAMA,EACNC,QAASA,EACTtR,GAAI,CACF,qBAAsB,CACpBD,MAAO,CAAE8G,GAAI,OAAQC,GAAI,IAAKC,GAAI,KAClCkM,UAAW,aACXtS,QAAS,OACTqG,cAAe,SACf8C,QAAS,IAEXtQ,SAAA,EAGF2E,EAAAA,EAAAA,KAAC+U,EAAAA,EAAM,CACL9S,SAAS,SACTwD,MAAM,UACNuP,UAAW,EACXnT,GAAI,CACFQ,OAASiJ,GAAUA,EAAMjJ,OAAO4S,OAAS,EACzCxF,WAAY,EACZyF,aAAc,EACdrQ,YAAa,WACbxJ,UAEF0G,EAAAA,EAAAA,MAACoT,EAAAA,EAAO,CAACtT,GAAI,CAAEuT,UAAW,mBAAoB/Z,SAAA,EAC5C2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,KACRW,UAAU,MACVT,GAAI,CACF2C,SAAU,EACVqB,WAAY,IACZJ,MAAO,gBACPpK,SACH,sBAGD2E,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACTyN,KAAK,MACL5P,MAAM,UACNR,QAASkO,EACT,aAAW,QACXtR,GAAI,CACF,UAAW,CACT8C,gBAAiB,iBAEnBtJ,UAEF2E,EAAAA,EAAAA,KAACsV,EAAAA,EAAS,YAMhBtV,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACF0T,KAAM,EACNrE,SAAU,OACVvM,gBAAiB,qBACjB,uBAAwB,CACtB/C,MAAO,OAET,6BAA8B,CAC5B+C,gBAAiB,YAEnB,6BAA8B,CAC5BA,gBAAiB,WACjB7C,aAAc,MACd,UAAW,CACT6C,gBAAiB,cAGrBtJ,UAEF0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAE6D,GAAI,EAAGC,GAAI,GAAItK,SAAA,EAExB2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,UACjB2E,EAAAA,EAAAA,KAACgD,EAAmB,CAClBrG,SAAUlB,EACVgI,kBAAkB,EAClBD,gBAAgB,EAChBD,YAAa,SAKjBvD,EAAAA,EAAAA,KAAC+F,EAAqB,CACpBpJ,SAAUlB,EACVwK,2BAA2B,EAC3BC,qBAAsB,IACtBC,cAAc,KAIhBnG,EAAAA,EAAAA,KAAC4N,GAAmB,CAClBjR,SAAUlB,EACV+Z,cAAc,EACdC,eAAgB,GAChBC,OAAO,UAIT1V,EAAAA,EAAAA,KAAC2P,GAAoB,CACnBhT,SAAUlB,EACVqT,gBAAgB,EAChBc,aAAa,EACbC,iBAAiB,KAInB7P,EAAAA,EAAAA,KAACuR,GAAqB,CACpB5U,SAAUlB,EACV+V,eA/IkB7U,IACZ,OAAd6U,QAAc,IAAdA,GAAAA,EAAiB7U,IA+IT8U,iBA3ImBmB,CAACjW,EAAUgZ,KACtB,OAAhBlE,QAAgB,IAAhBA,GAAAA,EAAmB9U,EAAUgZ,IA2IrBjE,QAxIUa,CAAC5V,EAAU0C,KACtB,OAAPqS,QAAO,IAAPA,GAAAA,EAAU/U,EAAU0C,IAwIZsS,WArIchV,IACZ,OAAVgV,QAAU,IAAVA,GAAAA,EAAahV,IAqILiV,WAlIakC,CAACnX,EAAUgZ,KACtB,OAAV/D,QAAU,IAAVA,GAAAA,EAAajV,EAAUgZ,IAkIf9D,OA/HUlV,IACZ,OAANkV,QAAM,IAANA,GAAAA,EAASlV,IA+HDmV,SA5HYnV,IACZ,OAARmV,QAAQ,IAARA,GAAAA,EAAWnV,IA4HHgD,WAAYA,EACZC,aAAcA,EACdmS,QAASA,EACTC,sBAAsB,EACtBhN,KAAK,SACLrD,QAAQ,qBAMpB,CAEA,SAAemE,EAAAA,KAAW6O,I,oCC9NnB,MAAMlY,GAAgB,CAC5B,CACCiC,GAAI,EACJtB,KAAM,sBACNtC,OAAQ,QACRC,UAAW,UACXG,WAAY,eACZqL,YACC,iKACD4J,aAAc,CACb,mCACA,yDACA,0DACA,mDACA,8CAEDtP,OAAQ,CACP,2BACA,2BACA,6BAGF,CACCnC,GAAI,EACJtB,KAAM,UACNtC,OAAQ,OACRC,UAAW,cACXG,WAAY,WACZqL,YACC,qIACD4J,aAAc,CACb,oFACA,gCACA,kDACA,4DACA,2BAEDtP,OAAQ,CACP,2BACA,2BACA,6BAGF,CACCnC,GAAI,EACJtB,KAAM,QACNtC,OAAQ,OACRC,UAAW,UACXG,WAAY,eACZqL,YACC,2HACD4J,aAAc,CACb,yDACA,kEACA,2CACA,gDACA,gDACA,0DAEDtP,OAAQ,CACP,2BACA,2BACA,6BAGF,CACCnC,GAAI,EACJtB,KAAM,0BACNtC,OAAQ,YACRC,UAAW,WACXG,WAAY,WACZqL,YACC,mHACD4J,aAAc,CACb,2EACA,0DACA,yDACA,2BACA,yDAEDtP,OAAQ,CACP,2BACA,2BACA,6BAGF,CACCnC,GAAI,EACJtB,KAAM,aACNtC,OAAQ,OACRC,UAAW,WACXG,WAAY,WACZqL,YACC,2HACD4J,aAAc,CACb,wEACA,uCACA,4CACA,uCACA,4DAEDtP,OAAQ,CACP,2BACA,2BACA,6BAGF,CACCnC,GAAI,EACJtB,KAAM,QACNtC,OAAQ,OACRC,UAAW,cACXG,WAAY,WACZqL,YACC,6GACD4J,aAAc,CACb,8EACA,wDACA,uDACA,uDACA,0CAEDtP,OAAQ,CACP,2BACA,2BACA,8BAMU+U,GAAc,CAC1B,CACC/O,MAAO,MACPpJ,MAAO,OAER,CACCoJ,MAAO,aACPpJ,MAAO,cAER,CACCoJ,MAAO,YACPpJ,MAAO,aAER,CACCoJ,MAAO,YACPpJ,MAAO,aAER,CACCoJ,MAAO,SACPpJ,MAAO,UAER,CACCoJ,MAAO,SACPpJ,MAAO,UAER,CACCoJ,MAAO,QACPpJ,MAAO,SAER,CACCoJ,MAAO,WACPpJ,MAAO,YAER,CACCoJ,MAAO,SACPpJ,MAAO,UAER,CACCoJ,MAAO,aACPpJ,MAAO,cAER,CACCoJ,MAAO,OACPpJ,MAAO,QAER,CACCoJ,MAAO,aACPpJ,MAAO,cAER,CACCoJ,MAAO,cACPpJ,MAAO,eAER,CACCoJ,MAAO,OACPpJ,MAAO,QAER,CACCoJ,MAAO,aACPpJ,MAAO,cAER,CACCoJ,MAAO,YACPpJ,MAAO,aAER,CACCoJ,MAAO,QACPpJ,MAAO,SAER,CACCoJ,MAAO,UACPpJ,MAAO,YAIIoY,GAAgB,CAC5B,CACChP,MAAO,MACPpJ,MAAO,OAER,CACCoJ,MAAO,WACPpJ,MAAO,YAER,CACCoJ,MAAO,aACPpJ,MAAO,cAER,CACCoJ,MAAO,cACPpJ,MAAO,eAER,CACCoJ,MAAO,YACPpJ,MAAO,aAER,CACCoJ,MAAO,eACPpJ,MAAO,gBAER,CACCoJ,MAAO,SACPpJ,MAAO,UAER,CACCoJ,MAAO,wBACPpJ,MAAO,0BAIIqY,GAAiB,CAC7B,CACCjP,MAAO,MACPpJ,MAAO,OAER,CACCoJ,MAAO,UACPpJ,MAAO,WAER,CACCoJ,MAAO,UACPpJ,MAAO,WAER,CACCoJ,MAAO,WACPpJ,MAAO,YAER,CACCoJ,MAAO,QACPpJ,MAAO,SAER,CACCoJ,MAAO,eACPpJ,MAAO,gBAER,CACCoJ,MAAO,cACPpJ,MAAO,eAER,CACCoJ,MAAO,QACPpJ,MAAO,SAER,CACCoJ,MAAO,gBACPpJ,MAAO,iBAER,CACCoJ,MAAO,gBACPpJ,MAAO,iBAER,CACCoJ,MAAO,cACPpJ,MAAO,aAER,CACCoJ,MAAO,YACPpJ,MAAO,aAER,CACCoJ,MAAO,QACPpJ,MAAO,UAIIsY,GAAa,CACzB,CACClP,MAAO,MACPpJ,MAAO,OAER,CACCoJ,MAAO,OACPpJ,MAAO,QAER,CACCoJ,MAAO,OACPpJ,MAAO,QAGR,CACCoJ,MAAO,SACPpJ,MAAO,WAIIuY,GAAmB,CAC/B,CACCnP,MAAO,MACPpJ,MAAO,OAER,CACCoJ,MAAO,WACPpJ,MAAO,YAER,CACCoJ,MAAO,eACPpJ,MAAO,gBAER,CACCoJ,MAAO,SACPpJ,MAAO,WCzTIwY,GAAsBA,CAACC,EAAWrb,KAC7C,IAAKA,GAAsC,KAAvBA,EAAYoG,OAC9B,OAAOiV,EAGT,MAAMnZ,EAAQlC,EAAYmC,cAAciE,OAExC,OAAOiV,EAAUxZ,OAAQC,IAAc,IAADM,EAAA+I,EAAA+F,EAAAoK,EAAAjZ,EAAAC,EACpC,MAAMC,GAAoB,QAAbH,EAAAN,EAASS,YAAI,IAAAH,OAAA,EAAbA,EAAeD,gBAAiB,GACvCuJ,GAAkC,QAApBP,EAAArJ,EAAS4J,mBAAW,IAAAP,OAAA,EAApBA,EAAsBhJ,gBAAiB,GACrDJ,GACmB,QAAvBmP,EAAApP,EAASC,sBAAc,IAAAmP,OAAA,EAAvBA,EAAyBc,KAAK,KAAK7P,gBAAiB,GAChDkP,GACqB,QAAzBiK,EAAAxZ,EAASuP,wBAAgB,IAAAiK,OAAA,EAAzBA,EAA2BtJ,KAAK,KAAK7P,gBAAiB,GAClDjC,GAA8B,QAAlBmC,EAAAP,EAAS5B,iBAAS,IAAAmC,OAAA,EAAlBA,EAAoBF,gBAAiB,GACjDhC,GAA4B,QAAjBmC,EAAAR,EAAS3B,gBAAQ,IAAAmC,OAAA,EAAjBA,EAAmBH,gBAAiB,GAErD,OACEI,EAAKP,SAASE,IACdwJ,EAAY1J,SAASE,IACrBH,EAAeC,SAASE,IACxBmP,EAAiBrP,SAASE,IAC1BhC,EAAU8B,SAASE,IACnB/B,EAAS6B,SAASE,MAWXqZ,GAAiBA,CAACF,EAAWpb,IACnCA,GAAqB,QAAXA,EAIRob,EAAUxZ,OAAQC,GAIhB,IAHgBA,EAASC,gBAAkB,MACzBD,EAASuP,kBAAoB,IAEN7O,KAC7CiP,GAAMA,EAAEtP,gBAAkBlC,EAAOkC,gBAR7BkZ,EAmBEG,GAAoBA,CAACH,EAAWnb,IACtCA,GAA2B,QAAdA,EAIXmb,EAAUxZ,OACdC,IAAQ,IAAA2Z,EAAA,OAAuB,QAAlBA,EAAA3Z,EAAS5B,iBAAS,IAAAub,OAAA,EAAlBA,EAAoBtZ,iBAAkBjC,EAAUiC,gBAJvDkZ,EAcEK,GAAmBA,CAACL,EAAWlb,IACrCA,GAAyB,QAAbA,EAIVkb,EAAUxZ,OACdC,IAAQ,IAAA6Z,EAAA,OAAsB,QAAjBA,EAAA7Z,EAAS3B,gBAAQ,IAAAwb,OAAA,EAAjBA,EAAmBxZ,iBAAkBhC,EAASgC,gBAJrDkZ,EAcEO,GAAgBA,CAACP,EAAWjb,IAClCA,GAAmB,QAAVA,EAIPib,EAAUxZ,OACdC,IAAQ,IAAAoR,EAAA,OAAmB,QAAdA,EAAApR,EAAS1B,aAAK,IAAA8S,OAAA,EAAdA,EAAgB/Q,iBAAkB/B,EAAM+B,gBAJ/CkZ,EAcEQ,GAAqBA,CAACR,EAAWhb,IACvCA,GAA6B,QAAfA,EAIZgb,EAAUxZ,OACdC,IAAQ,IAAAga,EAAA,OAAmB,QAAdA,EAAAha,EAASG,aAAK,IAAA6Z,OAAA,EAAdA,EAAgB3Z,iBAAkB9B,EAAW8B,gBAJpDkZ,EAcEU,GAAkBA,CAACV,EAAW5a,KACzC,IAAK4a,IAAcpV,MAAMC,QAAQmV,GAC/B,MAAO,GAGT,IAAI5Z,EAAoB4Z,EAuBxB,OApBA5Z,EAAoB2Z,GAClB3Z,EACAhB,EAAQT,aAIVyB,EAAoB8Z,GAAe9Z,EAAmBhB,EAAQR,QAG9DwB,EAAoB+Z,GAAkB/Z,EAAmBhB,EAAQP,WAGjEuB,EAAoBia,GAAiBja,EAAmBhB,EAAQN,UAGhEsB,EAAoBma,GAAcna,EAAmBhB,EAAQL,OAG7DqB,EAAoBoa,GAAmBpa,EAAmBhB,EAAQJ,YAE3DoB,GASIua,GAAiBA,CAACC,EAAYrZ,KACzC,MAQMsZ,EARiB,CACrBjc,OAAQ8a,GACR7a,UAAW+a,GACX9a,SAAU6a,GACV5a,MAAO8a,GACP7a,WAAY8a,IAGiBc,GAC/B,IAAKC,EAAS,OAAOtZ,EAErB,MAAMuZ,EAASD,EAAQE,KAAMC,GAAQA,EAAIzZ,QAAUA,GACnD,OAAOuZ,EAASA,EAAOnQ,MAAQpJ,GAQpB0Z,GAAsB7b,IACjC,IAAI8b,EAAQ,EASZ,OAPI9b,EAAQT,aAAauc,IACF,QAAnB9b,EAAQR,QAAkBsc,IACJ,QAAtB9b,EAAQP,WAAqBqc,IACR,QAArB9b,EAAQN,UAAoBoc,IACV,QAAlB9b,EAAQL,OAAiBmc,IACF,QAAvB9b,EAAQJ,YAAsBkc,IAE3BA,GAQIC,GAA0B/b,IACrC,MAAMgc,EAAgB,GAkDtB,OAhDIhc,EAAQT,aACVyc,EAAcC,KAAK,CACjBlJ,IAAK,cACLmJ,KAAM,SACN3Q,MAAM,IAADlG,OAAMrF,EAAQT,YAAW,OAIX,QAAnBS,EAAQR,QACVwc,EAAcC,KAAK,CACjBlJ,IAAK,SACLmJ,KAAM,SACN3Q,MAAOgQ,GAAe,SAAUvb,EAAQR,UAIlB,QAAtBQ,EAAQP,WACVuc,EAAcC,KAAK,CACjBlJ,IAAK,YACLmJ,KAAM,SACN3Q,MAAOgQ,GAAe,YAAavb,EAAQP,aAItB,QAArBO,EAAQN,UACVsc,EAAcC,KAAK,CACjBlJ,IAAK,WACLmJ,KAAM,SACN3Q,MAAOgQ,GAAe,WAAYvb,EAAQN,YAIxB,QAAlBM,EAAQL,OACVqc,EAAcC,KAAK,CACjBlJ,IAAK,QACLmJ,KAAM,SACN3Q,MAAOgQ,GAAe,QAASvb,EAAQL,SAIhB,QAAvBK,EAAQJ,YACVoc,EAAcC,KAAK,CACjBlJ,IAAK,aACLmJ,KAAM,SACN3Q,MAAOgQ,GAAe,aAAcvb,EAAQJ,cAIzCoc,GCzNT,SAASG,GAAchX,GACrB,MAAM,QACJnF,EAAO,aACPuC,EAAY,mBACZP,EAAkB,aAClBQ,EAAY,sBACZ4Z,GACEjX,EAGEkX,GAAqBpb,EAAAA,EAAAA,SAAQ,IAC1B4a,GAAmB7b,GACzB,CAACA,IAGEsc,GAAsBrb,EAAAA,EAAAA,SAAQ,IAC3B8a,GAAuB/b,GAC7B,CAACA,IA6BEuc,EAAiBzc,IAAA,IAAC,KAAEgC,EAAI,MAAEyJ,EAAK,QAAEkQ,EAAO,MAAEtZ,GAAOrC,EAAA,OACrD2G,EAAAA,EAAAA,MAAC+V,EAAAA,EAAW,CAACC,WAAS,EAAC/S,KAAK,QAAO3J,SAAA,EACjC2E,EAAAA,EAAAA,KAACgY,EAAAA,EAAU,CAACtZ,GAAE,GAAAiC,OAAKvD,EAAI,UAAS/B,SAAEwL,KAClC7G,EAAAA,EAAAA,KAACiY,EAAAA,EAAM,CACLC,QAAO,GAAAvX,OAAKvD,EAAI,UAChBsB,GAAE,GAAAiC,OAAKvD,EAAI,WACXA,KAAMA,EACNK,MAAOA,EACPoJ,MAAOA,EACPsR,SAAU7a,EAAmBjC,SAE5B0b,EAAQzP,IAAKP,IACZ/G,EAAAA,EAAAA,KAACwT,EAAAA,EAAQ,CAAkB/V,MAAOsJ,EAAKtJ,MAAMpC,SAC1C0L,EAAKF,OADOE,EAAKtJ,cAQ5B,OACEsE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAED,MAAO,QAASvG,SAAA,EAEzB0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACTgN,eAAgB,gBAChB9H,WAAY,SACZR,GAAI,GACJ7L,SAAA,EAEF2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAKW,UAAU,KAAKT,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,qBAGhEsc,EAAqB,IACpB3X,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAK,GAAAlG,OAAKgX,GACVlS,MAAM,UACNT,KAAK,QACLrD,QAAQ,SACRE,GAAI,CAAEsD,SAAU,aAMrBwS,EAAqB,IACpB5V,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqF,GAAI,GAAI7L,SAAA,EACjB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,QAAQ8D,MAAM,iBAAiB5D,GAAI,CAAEqF,GAAI,GAAI7L,SAAC,qBAGlE2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ4E,SAAU,OAAQD,IAAK,GAAI9L,SACpDuc,EAAoBtQ,IAAK5K,IACxBsD,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CAEHX,MAAOnK,EAAOmK,MACduR,SAAUA,IAhFWpa,KACjC,GAAI0Z,GAA0D,oBAA1BA,EAElC,YADAA,EAAsB1Z,GAKxB,MAAMR,EAAQ,CACZE,OAAQ,CACNN,KAAMY,EACNP,MAAqB,gBAAdO,EAA8B,GAAK2M,EAAcC,gBAI1C,gBAAd5M,EACFH,EAAaL,GAEbF,EAAmBE,IA+DOO,CAA0BrB,EAAO2R,KACjDrJ,KAAK,QACLrD,QAAQ,WACR8D,MAAM,UACN5D,GAAI,CACF,wBAAyB,CACvB+D,SAAU,UARTlJ,EAAO2R,YAkBtBtM,EAAAA,EAAAA,MAACsW,GAAAA,EAAK,CAACzM,QAAS,EAAEvQ,SAAA,EAEhB2E,EAAAA,EAAAA,KAACsY,GAAAA,EAAS,CACRP,WAAS,EACTlR,MAAM,mBACNlF,QAAQ,WACRvE,KAAK,cACLK,MAAOnC,EAAQT,YACfsd,SAAUta,EACV0a,YAAahO,EAAcG,iBAC3B1F,KAAK,QACLwT,WAAY,CACVC,cAAczY,EAAAA,EAAAA,KAAC0Y,GAAAA,EAAU,CAAC7W,GAAI,CAAE4D,MAAO,oBAEzC5D,GAAI,CACF,2BAA4B,CAC1B,mBAAoB,CAClBgD,YAAa,qBAOrB7E,EAAAA,EAAAA,KAAC6X,EAAc,CACbza,KAAK,SACLyJ,MAAM,eACNkQ,QAASnB,GACTnY,MAAOnC,EAAQR,UAIjBkF,EAAAA,EAAAA,KAAC6X,EAAc,CACbza,KAAK,YACLyJ,MAAM,YACNkQ,QAASjB,GACTrY,MAAOnC,EAAQP,aAIjBiF,EAAAA,EAAAA,KAAC6X,EAAc,CACbza,KAAK,WACLyJ,MAAM,WACNkQ,QAASlB,GACTpY,MAAOnC,EAAQN,YAIjBgF,EAAAA,EAAAA,KAAC6X,EAAc,CACbza,KAAK,QACLyJ,MAAM,QACNkQ,QAAShB,GACTtY,MAAOnC,EAAQL,SAIjB+E,EAAAA,EAAAA,KAAC6X,EAAc,CACbza,KAAK,aACLyJ,MAAM,aACNkQ,QAASf,GACTvY,MAAOnC,EAAQJ,cAIjB8E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAM,CACLpD,QAAQ,WACRsD,QAASnH,EACToH,SAAiC,IAAvByS,EACVI,WAAS,EACTlW,GAAI,CACFqG,GAAI,EACJ9C,cAAe,OACfS,WAAY,KACZxK,SACH,2BAMT,CAEA,SAAeyK,EAAAA,KAAW2R,I,qCCjPnB,MAAMkB,GAA2B,CACtC,OACA,iBACA,YACA,QACA,WACA,SACA,gBAMWC,GAA2B,CACtC,mBACA,QACA,WACA,eAMWC,GAAqB,CAChCC,SAAU,CAAEjS,MAAO,WAAYkS,MAAO,GACtCC,aAAc,CAAEnS,MAAO,eAAgBkS,MAAO,GAC9CE,OAAQ,CAAEpS,MAAO,SAAUkS,MAAO,IAMvBG,GAAwB,CACnCC,SACE,qEACFC,WAAY,qCACZC,YAAa,qDACbC,UAAW,sDACXC,aACE,kEACFC,OAAQ,qCACR,wBAAyB,kDAMdC,GAAuB,CAClCC,aAAc,CAAC,UAAW,WAAY,eACtCC,SAAU,CAAC,UAAW,SACtBC,WAAY,CAAC,aACbC,YAAa,CAAC,QAAS,gBAAiB,gBAAiB,aACzDC,UAAW,CAAC,eAAgB,UC5CjBC,GAAoBpd,IAC/B,MAAMqd,EAAS,GAEf,OAAKrd,GAAgC,kBAAbA,GAKxBgc,GAAyBsB,QAASC,IAC3Bvd,EAASud,GAEHpZ,MAAMC,QAAQpE,EAASud,KAAsC,IAA3Bvd,EAASud,GAAO3a,QAC3Dya,EAAOzC,KAAK,SAAD5W,OAAUuZ,EAAK,2BAF1BF,EAAOzC,KAAK,2BAAD5W,OAA4BuZ,MAOvCvd,EAASC,iBAAmBkE,MAAMC,QAAQpE,EAASC,iBACrDod,EAAOzC,KAAK,mCAGV5a,EAASuP,mBAAqBpL,MAAMC,QAAQpE,EAASuP,mBACvD8N,EAAOzC,KAAK,qCAGV5a,EAASkE,SAAWC,MAAMC,QAAQpE,EAASkE,SAC7CmZ,EAAOzC,KAAK,2BAGV5a,EAASwT,eAAiBrP,MAAMC,QAAQpE,EAASwT,eACnD6J,EAAOzC,KAAK,iCAGP,CACL4C,QAA2B,IAAlBH,EAAOza,OAChBya,WA/BO,CAAEG,SAAS,EAAOH,OAAQ,CAAC,gCAwCzBI,GAAsBhd,GAC5BA,EAEEA,EACJiP,MAAM,KACN/E,IAAK+S,GAASA,EAAK7M,OAAO,GAAGC,cAAgB4M,EAAKhT,MAAM,GAAGrK,eAC3D6P,KAAK,KALU,GAcPyN,GAAsB,SAAC/T,GAAkC,IAArBgU,EAASjb,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,IAC3D,IAAKiH,EAAa,MAAO,GAEzB,GAAIA,EAAYhH,QAAUgb,EAAW,OAAOhU,EAE5C,MAAMiU,EAAYjU,EAAYG,UAAU,EAAG6T,GACrCE,EAAiBD,EAAUE,YAAY,KAE7C,OAAOD,EAAiB,EACpBD,EAAU9T,UAAU,EAAG+T,GAAkB,MACzCD,EAAY,KAClB,EAOaG,GAAsBzf,IACjC,IAAKA,EAAY,OAAO,IAExB,MAAM0f,EAAU/B,GAAmB3d,EAAW8B,eAC9C,OAAO4d,EAAUA,EAAQ7B,MAAQ,KAQtB8B,GAAwB9f,IACnC,IAAKA,EAAW,MAAO,UAEvB,MAAM+f,EAAiB/f,EAAUiC,cAEjC,IAAK,MAAOhC,EAAU+f,KAAkBC,OAAOC,QAC7CxB,IAEA,GAAIsB,EAAcle,SAASie,GACzB,OAAO9f,EAASgC,cAAckS,QAAQ,IAAK,KAI/C,MAAO,SASIxC,GAAqB,SAACwO,GAA6B,IAApBC,EAAU7b,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,EACvD,IAAK4b,IAAYpa,MAAMC,QAAQma,GAAU,MAAO,GAEhD,MAAMjM,EAAYiM,EAAQ5T,IACvBxM,GAAWA,EAAO0S,OAAO,GAAGC,cAAgB3S,EAAOuM,MAAM,GAAGrK,eAG/D,GAAIiS,EAAU1P,QAAU4b,EACtB,OAAOlM,EAAUpC,KAAK,MAGxB,MAAMuO,EAAYnM,EAAU5H,MAAM,EAAG8T,GAC/BE,EAAYpM,EAAU1P,OAAS4b,EAErC,MAAM,GAANxa,OAAUya,EAAUvO,KAAK,MAAK,MAAAlM,OAAK0a,EAAS,QAC9C,EAOaC,GAAmB3e,GAE3BA,GACAA,EAASkE,QACTC,MAAMC,QAAQpE,EAASkE,SACG,IAA3BlE,EAASkE,OAAOtB,QAKX5C,EAASkE,OAAO,IAHd,2BAME0a,GAAwB5e,IAEnC,GAAImE,MAAMC,QAAQpE,EAASkE,SAAWlE,EAASkE,OAAOtB,OAAS,EAC7D,OAAO5C,EAASkE,OAAOyG,IAAKkU,GACrBA,EAGHA,EAAMvX,WAAW,YACjBuX,EAAMvX,WAAW,aACjBuX,EAAMvX,WAAW,SAEVuX,EAEH,GAAN7a,OAAUoD,uBAA4BpD,OACpC6a,EAAMvX,WAAW,KAAOuX,EAAK,IAAA7a,OAAO6a,IAVnBA,GAgBvB,GAAI7e,EAASS,KAAM,CAGjB,MAAMqe,EAAqB9e,EAASS,KAAK8R,QAAQ,OAAQ,KACnDwM,EAAa,aAAA/a,OAAgB8a,GAQnC,MALyB,CAAC,QAAS,SACMnU,IAAKqU,GACtC,GAANhb,OAAUoD,sBAA4B,KAAApD,OAAI+a,EAAa,KAAA/a,OAAIgb,GAI/D,CAEA,MAAO,IAQIC,GAAoBjf,GAC1BA,GAELiB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKjB,GAAQ,IACXS,KAAMgd,GAAmBzd,EAASS,MAClCmJ,YAAa5J,EAAS4J,YAAc5J,EAAS4J,YAAYtF,OAAS,GAClErE,eAAgBkE,MAAMC,QAAQpE,EAASC,gBACnCD,EAASC,eACT,GACJsP,iBAAkBpL,MAAMC,QAAQpE,EAASuP,kBACrCvP,EAASuP,iBACT,GACJrL,OAAQ0a,GAAqB5e,GAC7BwT,aAAcrP,MAAMC,QAAQpE,EAASwT,cACjCxT,EAASwT,aACT,GACJpV,UAAW4B,EAAS5B,WAAa,YACjC+B,MAAOH,EAASG,OAAS,WACzB9B,SAAU2B,EAAS3B,UAAY,WAC/BC,MAAO0B,EAAS1B,OAAS,KACzBqT,SAAU3R,EAAS2R,UAAY,OApBX,KA+BXuN,GAAgB,SAC3B3F,GAGI,IAFJ4F,EAAMxc,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,OACTyc,EAASzc,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,MAEZ,IAAK4W,IAAcpV,MAAMC,QAAQmV,GAAY,MAAO,GAoCpD,MAlCwB,IAAIA,GAAW8F,KAAK,CAACC,EAAGC,KAAO,IAADC,EAAAC,EACpD,IAAIC,EAAQC,EAEZ,OAAQR,GACN,IAAK,OACHO,EAASJ,EAAE7e,MAAQ,GACnBkf,EAASJ,EAAE9e,MAAQ,GACnB,MACF,IAAK,aACHif,EAAS1B,GAAmBsB,EAAEnf,OAC9Bwf,EAAS3B,GAAmBuB,EAAEpf,OAC9B,MACF,IAAK,SACHuf,GAAyB,QAAhBF,EAAAF,EAAErf,sBAAc,IAAAuf,OAAA,EAAhBA,EAAmB,KAAM,GAClCG,GAAyB,QAAhBF,EAAAF,EAAEtf,sBAAc,IAAAwf,OAAA,EAAhBA,EAAmB,KAAM,GAClC,MACF,IAAK,YACHC,EAASJ,EAAElhB,WAAa,GACxBuhB,EAASJ,EAAEnhB,WAAa,GACxB,MACF,QACEshB,EAASJ,EAAEH,IAAW,GACtBQ,EAASJ,EAAEJ,IAAW,GAG1B,MAAsB,kBAAXO,GAAyC,kBAAXC,EAClB,QAAdP,EACHM,EAAOE,cAAcD,GACrBA,EAAOC,cAAcF,GAGN,QAAdN,EAAsBM,EAASC,EAASA,EAASD,GAI5D,E,yBCpQA,MAAMnb,GAAgB9F,IAA2D,IAA1D,SAAEuB,EAAQ,IAAEyE,EAAG,OAAEC,EAASkI,EAAYC,cAAcpO,EACzE,MAAOmH,EAASia,IAAchhB,EAAAA,EAAAA,WAAS,IAChCihB,EAAOC,IAAYlhB,EAAAA,EAAAA,WAAS,GAE7BmhB,EAAWrB,GAAgB3e,GAC3BigB,EAAUxb,IAAe,OAARzE,QAAQ,IAARA,OAAQ,EAARA,EAAUS,OAAQ,iBAWzC,OAAIqf,GAEAzc,EAAAA,EAAAA,KAAC0B,EAAAA,EAAQ,CACPC,QAAQ,cACRC,MAAM,OACNP,OAAQA,KAMZU,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEI,SAAU,WAAYZ,UAAShG,SAAA,CACvCkH,IACCvC,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFI,SAAU,WACVC,IAAK,EACLC,KAAM,EACNqD,MAAO,EACPqX,OAAQ,EACRra,QAAS,OACTkF,WAAY,SACZ8H,eAAgB,SAChB7K,gBAAiB,UACjBtC,OAAQ,GACRhH,UAEF2E,EAAAA,EAAAA,KAAC8c,GAAAA,EAAgB,CAAC9X,KAAM,QAI5BhF,EAAAA,EAAAA,KAAC+c,GAAAA,EAAS,CACRza,UAAU,MACVjB,OAAQA,EACRma,MAAOmB,EACPvb,IAAKwb,EACLra,QAAQ,OACRK,OA9CkBC,KACtB2Z,GAAW,IA8CP1Z,QA3CmBC,KACvByZ,GAAW,GACXE,GAAS,IA0CL7a,GAAI,CACFY,UAAW,QACXC,QAASH,EAAU,EAAI,EACvBI,WAAY,kCAOtB,GAAemD,EAAAA,KAAW5E,I,iBCpEpB8b,IAAcjS,EAAAA,EAAAA,IAAO3P,IAAA,IAAC,UAAE4P,GAAqB5P,EAAPqF,GAAKwK,EAAAA,EAAAA,GAAA7P,EAAA8P,IAAA,OAC/ClL,EAAAA,EAAAA,KAACmL,EAAAA,GAAOvN,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK6C,GAAK,IAAE2K,QAAS,CAAEC,OAAQL,OADrBD,CAEjB9H,IAAA,IAAC,MAAEqI,GAAOrI,EAAA,MAAM,CACjB,CAAC,MAADtC,OAAO4K,EAAAA,EAAeC,UAAY,CAChCjH,SAAU4F,EAAeC,UACzBxE,SAAU0F,EAAMG,WAAWC,QAAQvB,EAAeE,eAOhD4C,GAAgBnB,IAAgD,IAA/C,MAAEjF,EAAK,MAAEpB,EAAK,QAAE+F,EAAO,KAAExG,EAAO,SAAS8G,EAC9D,IAAKjF,GAAmB,MAAVA,EACZ,OAAO,KAGT,MAAM2H,GACJxO,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAOA,EACPpB,MAAOA,EACPT,KAAMA,EACNnD,GAAI,CAAEuD,cAAe,gBAIzB,OAAKoG,GAKHxL,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC2B,MAAOtB,EAASuB,OAAK,EAAA1R,SAC3BmT,IALIA,GAaLyO,GAAa/P,IAAmB,IAADnB,EAAA,IAAjB,SAAEpP,GAAUuQ,EAC9B,GAAa,OAARvQ,QAAQ,IAARA,GAAwB,QAAhBoP,EAARpP,EAAUC,sBAAc,IAAAmP,IAAxBA,EAA0BxM,OAC7B,OAAO,KAGT,MAAM2d,EAAgBvgB,EAASC,eAAe,GACxCsP,EAAmBvP,EAASuP,kBAAoB,GAEhDV,GACJzJ,EAAAA,EAAAA,MAAC+D,EAAAA,SAAc,CAAAzK,SAAA,EACb2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACvB,MAAM,UAAU9D,QAAQ,YAAWtG,SAAC,4BAGhD0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEqG,GAAI,IAAM7M,SAAA,EACnB0G,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,UAAStG,SAAA,EAC3B2E,EAAAA,EAAAA,KAAA,UAAA3E,SAAQ,cACPqR,GAAmB/P,EAASC,mBAE9BsP,EAAiB3M,OAAS,IACzBwC,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CAACrF,QAAQ,UAAUa,QAAQ,QAAOnH,SAAA,EAC3C2E,EAAAA,EAAAA,KAAA,UAAA3E,SAAQ,gBACPqR,GAAmBR,YAO9B,OACElM,EAAAA,EAAAA,KAACgd,GAAW,CAAClQ,MAAOtB,EAAQnQ,UAC1B2E,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAOqW,EACPzX,MAAOmE,EAAYC,eACnB7E,KAAK,QACLnD,GAAI,CAAEuD,cAAe,mBAcvB+X,GAAgBtP,IAIf,IAJgB,SACrBlR,EAAQ,QACRsR,GAAU,EAAI,aACdC,EAAe,CAAC,SAAU,YAAa,QAAS,WAAY,QAAS,aACtEL,EACC,IAAKlR,EACH,OAAO,KAGT,MAAMyR,EAAa,CACjB,CACEC,IAAK,SACL/L,WAAWtC,EAAAA,EAAAA,KAACid,GAAU,CAACtgB,SAAUA,KAEnC,CACE0R,IAAK,YACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZpG,MAAOlK,EAAS5B,UAChB0K,MAAOmE,EAAYE,UACnB0B,QAAQ,oBAId,CACE6C,IAAK,QACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZpG,MAAOlK,EAASG,MAChB2I,MAAOmE,EAAYG,MACnByB,QAAQ,sBAId,CACE6C,IAAK,WACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZpG,MAAOlK,EAAS3B,SAChByK,MAAOmE,EAAYI,SACnBwB,QAAQ,uBAId,CACE6C,IAAK,QACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZpG,MAAOlK,EAAS1B,MAChBwK,MAAOmE,EAAYK,MACnBuB,QAAQ,gBAId,CACE6C,IAAK,WACL/L,WACEtC,EAAAA,EAAAA,KAACiN,GAAa,CACZpG,MAAOlK,EAAS2R,SAChB7I,MAAOmE,EAAYM,SACnBsB,QAAQ,wBAMV+C,EAAeN,EACjBG,EACAA,EAAW1R,OAAO8R,GAAQN,EAAarR,SAAS2R,EAAKH,MAEzD,OACErO,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ2E,IAAK,EAAGD,GAAI,EAAGE,SAAU,QAAS/L,SAC3DkT,EAAajH,IAAIwG,IAAA,IAAC,IAAEO,EAAG,UAAE/L,GAAWwL,EAAA,OACnC9N,EAAAA,EAAAA,KAAC8F,EAAAA,SAAc,CAAAzK,SACZiH,GADkB+L,QAQ7B,GAAevI,EAAAA,KAAWqX,ICrKpBC,GAAkBhiB,IAIjB,IAJkB,SACvBuB,EAAQ,kBACR0gB,EAAoBlT,EAAeG,uBAAsB,UACzDgT,GAAY,GACbliB,EACC,IAAKuB,EACH,OAAO,KAGT,MAAM4gB,EAAgBnD,GAAmBzd,EAASS,MAC5CqJ,EAAuB6T,GAAoB3d,EAAS4J,YAAa8W,GAEvE,OACEtb,EAAAA,EAAAA,MAACwG,EAAAA,EAAW,CAAC1G,GAAI,CAAE2C,SAAU,EAAGhC,QAAS,OAAQqG,cAAe,UAAWxN,SAAA,EAEzE2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTC,cAAY,EACZtF,QAAQ,KACRW,UAAU,KACVT,GAAI,CACFgE,WAAY,IACZmC,WAAY,IACZd,GAAIoW,EAAY,EAAI,GACpBjiB,SAEDkiB,IAIFD,IACCtd,EAAAA,EAAAA,KAACmd,GAAa,CAACxgB,SAAUA,IAI1B8J,IACCzG,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEqG,GAAI,QAAS7M,UACtB2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,QACR8D,MAAM,iBACN5D,GAAI,CACFmG,WAAY,IACZxF,QAAS,cACTgb,gBAAiB,EACjBC,gBAAiB,WACjBvM,SAAU,UACV7V,SAEDoL,MAMN9J,EAASwT,cAAgBrP,MAAMC,QAAQpE,EAASwT,eAAiBxT,EAASwT,aAAa5Q,OAAS,IAC/FwC,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CACTrF,QAAQ,UACR8D,MAAM,iBACN5D,GAAI,CAAEqG,GAAI,EAAGG,UAAW,UAAWhN,SAAA,CAElCsB,EAASwT,aAAa5Q,OAAO,QAAuC,IAAjC5C,EAASwT,aAAa5Q,OAAe,IAAM,GAAG,sBAO5F,GAAeuG,EAAAA,KAAWsX,I,eC1D1B,MAAMM,GAAkBtiB,IASjB,IATkB,SACvBuB,EAAQ,cACRghB,EAAa,iBACblM,EAAgB,QAChBC,EAAO,WACP/R,GAAa,EAAK,aAClBie,GAAe,EAAK,UACpBC,GAAY,EAAK,QACjBlc,EAAU,aACXvG,EACC,IAAKuB,EACH,OAAO,KAuBT,OACEoF,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEmH,EAAG,EAAG8U,GAAI,EAAGtb,QAAS,OAAQ2E,IAAK,EAAGO,WAAY,UAAWrM,SAAA,EAEtE2E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAM,CACLpD,QAASA,EACToW,WAAS,EACT9S,QA1BoB8Y,KACpBJ,GAA0C,oBAAlBA,GAC1BA,EAAchhB,IAyBZ8V,WAAWzS,EAAAA,EAAAA,KAACge,GAAAA,EAAQ,IACpBnc,GAAI,CACFuD,cAAe,OACfS,WAAY,KACZxK,SACH,kBAKD0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQ2E,IAAK,IAAM9L,SAAA,CAEpCuiB,IACC5d,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC2B,MAAOnN,EAAa,wBAA0B,mBAAmBtE,UACxE2E,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACT5C,KAAK,QACLC,QArCkBzH,IAC5BA,EAAMygB,kBACFxM,GAAgD,oBAArBA,GAC7BA,EAAiB9U,IAmCT8I,MAAO9F,EAAa,QAAU,UAC9BkC,GAAI,CACF,UAAW,CACT8C,gBAAiBhF,EAAa,cAAgB,eAC9C+C,QAAS,KAEXrH,SAEDsE,GAAaK,EAAAA,EAAAA,KAAC8S,GAAAA,EAAY,KAAM9S,EAAAA,EAAAA,KAACke,GAAAA,EAAkB,QAMzDL,IACC7d,EAAAA,EAAAA,KAACmL,EAAAA,EAAO,CAAC2B,MAAM,iBAAgBzR,UAC7B2E,EAAAA,EAAAA,KAAC4H,EAAAA,EAAU,CACT5C,KAAK,QACLC,QAjDSzH,IACnBA,EAAMygB,kBACFvM,GAA8B,oBAAZA,GACpBA,EAAQ/U,IA+CA8I,MAAM,UAASpK,UAEf2E,EAAAA,EAAAA,KAACgT,GAAAA,EAAS,eASxB,GAAelN,EAAAA,KAAW4X,ICnF1B,SAASS,GAAS1d,GAChB,MACE9D,SAAUyhB,EAAW,cACrBC,EAAa,iBACb5M,EAAgB,QAChBC,EAAO,WACP/R,GAAa,EAAK,aAClBie,GAAe,EAAK,UACpBC,GAAY,EAAK,UACjBS,EAAY,CAAC,EAAC,UACdC,EAAY,CAAC,GACX9d,EAGE9D,EAAWif,GAAiBwC,GAElC,IAAKzhB,EACH,OAAO,KAGT,MAIM6hB,EAAmB,CACvB3c,GAAI,CACFR,OAAQ,OACRmB,QAAS,OACTqG,cAAe,SACflG,WAAW,aAADhC,OAAe4I,EAAYI,oBAAmB,iBAAAhJ,OAAgB4I,EAAYI,qBACpFxB,OAAQ,UACR,UAAW,CACTsW,UAAWlV,EAAYE,gBACvBiV,UAAWnV,EAAYG,mBAG3BzE,QAASA,IAAMoZ,GAAiBA,EAAc1hB,IAGhD,OACEgiB,EAAAA,EAAAA,eAACC,GAAAA,GAAIhhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GApBkB,CACvBoH,KAAM,CAAE0D,GAAI,GAAIC,GAAI,EAAGC,GAAI,KAqBrB0V,GAAS,IACbjQ,IAAK1R,EAASS,MAAQT,EAAS+B,MAE/BqD,EAAAA,EAAAA,MAACuG,EAAAA,GAAI1K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAK4gB,GAAsBD,GAAS,IAAAljB,SAAA,EAEvC2E,EAAAA,EAAAA,KAACkB,GAAa,CAACvE,SAAUA,EAAUyE,IAAKzE,EAASS,QAGjD4C,EAAAA,EAAAA,KAACod,GAAe,CAACzgB,SAAUA,KAG3BqD,EAAAA,EAAAA,KAAC0d,GAAe,CACd/gB,SAAUA,EACVghB,cAAeU,EACf5M,iBAAkBA,EAClBC,QAASA,EACT/R,WAAYA,EACZie,aAAcA,EACdC,UAAWA,QAKrB,CAEA,SAAe/X,EAAAA,KAAWqY,ICxF1B,SAASU,GAAape,GACpB,MAAM,UACJyV,EAAS,WACT4I,EAAU,KACVC,EAAI,aACJC,EAAY,oBACZ/gB,EAAmB,aACnBH,GACE2C,EAEJ,OACEsB,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAAA3G,SAAA,EAEF2E,EAAAA,EAAAA,KAAC4e,GAAAA,EAAI,CAACK,WAAS,EAACrT,QAAS,EAAEvQ,SACxB6a,EAAU3W,OAAS,EAClB2W,EAAU5O,IAAK3K,IACbqD,EAAAA,EAAAA,KAACme,GAAQ,CAEPxhB,SAAUA,EACV0hB,cAAepgB,GAFVtB,EAASS,QAMlB4C,EAAAA,EAAAA,KAAC4e,GAAAA,EAAI,CAAC5Z,KAAM,CAAE0D,GAAI,IAAKrN,UACrB0G,EAAAA,EAAAA,MAACmd,GAAAA,EAAK,CAACrd,GAAI,CAAEmH,EAAG,EAAGmW,UAAW,UAAW9jB,SAAA,EACvC2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,KAAItG,SAAC,+CAGzB2E,EAAAA,EAAAA,KAAC+E,EAAAA,EAAM,CAACpD,QAAQ,WAAWE,GAAI,CAAEqG,GAAI,GAAKjD,QAASnH,EAAazC,SAAC,yBASxE6a,EAAU3W,OAAS,GAAKuf,EAAa,IACpC9e,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACTgN,eAAgB,SAChBtH,GAAI,EACJhB,GAAI,GACJ7L,UAEF2E,EAAAA,EAAAA,KAACof,GAAAA,EAAU,CACThI,MAAO0H,EACPC,KAAMA,EACN5G,SAAU6G,EACVvZ,MAAM,UACNT,KAAK,QACLqa,iBAAe,EACfC,gBAAc,EACdzd,GAAI,CACF,sBAAuB,CACrBuF,SAAU,OACVoI,eAAgB,eAQzBsP,EAAa,KACZ9e,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQgN,eAAgB,SAAUtH,GAAI,EAAGhB,GAAI,GAAI7L,UACnE0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACT2E,IAAK,EACLC,SAAU,OACVoI,eAAgB,UAChBnU,SAAA,EAEF2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CACTrF,QAAQ,UACR8D,MAAM,iBACN5D,GAAI,CAAE0d,GAAI,EAAGC,UAAW,UAAWnkB,SACpC,gBAGA,CACC,EACAsV,KAAK8O,MAAmB,IAAbX,GACXnO,KAAK8O,MAAmB,GAAbX,GACXnO,KAAK8O,MAAmB,IAAbX,GACXA,GAECpiB,OACC,CAACgjB,EAASnY,EAAOoY,IACfD,EAAU,GACVA,GAAWZ,GACXa,EAAIC,QAAQF,KAAanY,GAE5BD,IAAKoY,IACJ1f,EAAAA,EAAAA,KAAC+E,EAAAA,EAAM,CAELC,KAAK,QACLrD,QAASod,IAASW,EAAU,YAAc,WAC1Cza,QAASA,IAAM+Z,EAAa,KAAMU,GAClC7d,GAAI,CAAEsD,SAAU,OAAQO,GAAI,GAAIrK,SAE/BqkB,GANIA,WAcvB,CAEA,SAAe5Z,EAAAA,KAAW+Y,IChF1B,SAzCA,SAA0Bpe,GACxB,MAAM,eAAEX,EAAc,KAAEif,EAAI,SAAEc,EAAQ,qBAAEC,GAAyBrf,EAC3Dqe,EAAanO,KAAKoP,KAAKjgB,EAAiB+f,GACxCG,GAAcjB,EAAO,GAAKc,EAC1BI,EAAWtP,KAAKuP,IAAIF,EAAaH,EAAU/f,GAE3CqgB,EACJL,GAAwBhgB,IAAmBggB,EAE7C,OACE/d,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CAAEW,QAAS,OAAQkF,WAAY,SAAUP,IAAK,EAAGC,SAAU,QAAS/L,SAAA,EAExE2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,QAAQ8D,MAAM,iBAAgBpK,SAC/C8kB,GACCpe,EAAAA,EAAAA,MAAA2R,EAAAA,SAAA,CAAArY,SAAA,CAAE,WACS2kB,EAAa,EAAE,IAAEC,EAAS,OAAKngB,EAAe,uBAEvDiC,EAAAA,EAAAA,MAACiF,EAAAA,EAAU,CACT1E,UAAU,OACVX,QAAQ,UACRE,GAAI,CAAEgG,GAAI,EAAGnF,QAAS,IAAMrH,SAAA,CAC7B,WACUykB,EAAqB,gBAE/B,WAAAnf,OAEQqf,EAAa,EAAC,KAAArf,OAAIsf,EAAQ,QAAAtf,OAAOb,EAAc,iBAI9DE,EAAAA,EAAAA,KAACwH,EAAAA,EAAI,CACHX,MAAK,QAAAlG,OAAUoe,EAAI,QAAApe,OAAOme,GAC1Bnd,QAAQ,WACRqD,KAAK,QACLS,MAAM,cAId,ECjBM2a,GAAcA,KAClB,MAAM9U,GAAQ+U,EAAAA,EAAAA,KACRC,GAAWC,EAAAA,EAAAA,GAAcjV,EAAMkV,YAAYC,KAAK,QAGhD,QAEJnlB,EAAO,kBACPgB,EAAiB,mBAGjBgB,EAAkB,aAClBO,EAAY,aACZC,EAAY,0BACZC,EAAyB,iBAGzBtC,EAAgB,YAChBE,EAAW,WACXE,EAAU,oBAGVoC,EAAmB,qBACnBC,EAAoB,WACpBC,EAAU,WACVE,EAAU,kBAGVtC,EAAiB,kBACjBuC,EAAiB,mBACjBC,EAAkB,eAGlBuB,GACEI,KAGG6e,EAAM2B,IAAWllB,EAAAA,EAAAA,UAAS,IAC1BmlB,EAAkBC,IAAuBplB,EAAAA,EAAAA,UAAS,IAGnDqlB,EAAyBvkB,EAAkBiD,OAC3Cuf,EAAanO,KAAKoP,KAAKc,EAAyBF,GAChDX,GAAcjB,EAAO,GAAK4B,EAC1BV,EAAWtP,KAAKuP,IACpBF,EAAaW,EACbE,GAIIC,GAAqBvkB,EAAAA,EAAAA,SAAQ,IAC1BD,EAAkB+K,MAAM2Y,EAAYC,GAC1C,CAAC3jB,EAAmB0jB,EAAYC,IAenCna,EAAAA,UAAgB,KACd4a,EAAQ,IACP,CAACpkB,EAAkBiD,SAGtB,OACEwC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CAACH,GAAI,CAAEW,QAAS,OAAQZ,MAAO,OAAQP,OAAQ,SAAUhG,SAAA,EAE3D2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACFD,MAAO,CAAE8G,GAAI,OAAQE,GAAI,SACzBzD,SAAU,CAAEyD,GAAI,SAChBmY,YAAa,CAAEnY,GAAI,GACnB/D,YAAa,CAAE+D,GAAI,WACnBpG,QAAS,CAAEkG,GAAI,OAAQE,GAAI,SAC3BsI,SAAU,QACV7V,UAEF2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEmH,EAAG,GAAI3N,UAChB2E,EAAAA,EAAAA,KAACyX,GAAa,CACZnc,QAASA,EACTuC,aAAcA,EACdP,mBAAoBA,EACpBQ,aAAcA,EACd4Z,sBAAuB3Z,SAM7BiC,EAAAA,EAAAA,KAAC4U,EAAAA,GAAM,CACLjT,QAAQ,YACRuR,KAAMnX,EACNoX,QAAS5U,EACTyiB,WAAY,CACVC,aAAa,GAEfpf,GAAI,CACFW,QAAS,CAAEkG,GAAI,QAASE,GAAI,QAC5B,qBAAsB,CACpBhH,MAAO,QACPkT,UAAW,eAEbzZ,UAEF2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CAACH,GAAI,CAAEmH,EAAG,GAAI3N,UAChB2E,EAAAA,EAAAA,KAACyX,GAAa,CACZnc,QAASA,EACTuC,aAAcA,EACdP,mBAAoBA,EACpBQ,aAAcA,EACd4Z,sBAAuB3Z,SAM7BgE,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACF2C,SAAU,EACVhC,QAAS,OACTqG,cAAe,SACfjH,MAAO,CAAE8G,GAAI,OAAQE,GAAI,uBACzBvN,SAAA,EAGF0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFmH,EAAG,EACHkM,aAAc,EACdrQ,YAAa,UACbF,gBAAiB,mBACjBnC,QAAS,OACTkF,WAAY,SACZ8H,eAAgB,gBAChBpI,SAAU,OACVD,IAAK,GACL9L,SAAA,EAEF0G,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACTkF,WAAY,SACZP,IAAK,EACLC,SAAU,QACV/L,SAAA,EAEF2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAAC1E,UAAU,KAAKX,QAAQ,KAAKE,GAAI,CAAEgE,WAAY,KAAMxK,SAAC,qBAKhEwlB,EAAyB,IACxB7gB,EAAAA,EAAAA,KAACkhB,GAAgB,CACfphB,eAAgB+gB,EAChB9B,KAAMA,EACNc,SAAUc,EACVb,qBAAsBhgB,QAK5BiC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFH,GAAI,CACFW,QAAS,OACTkF,WAAY,SACZP,IAAK,EACLC,SAAU,QACV/L,SAAA,CAGDwlB,EAAyB,IACxB9e,EAAAA,EAAAA,MAAC+V,EAAAA,EAAW,CAAC9S,KAAK,QAAQnD,GAAI,CAAEsD,SAAU,KAAM9J,SAAA,EAC9C2E,EAAAA,EAAAA,KAACgY,EAAAA,EAAU,CAAA3c,SAAC,cACZ2E,EAAAA,EAAAA,KAACiY,EAAAA,EAAM,CACLxa,MAAOkjB,EACPxI,SA1HsB3a,IACpCojB,EAAoBpjB,EAAME,OAAOD,OACjCijB,EAAQ,IAyHM7Z,MAAM,WAAUxL,SAjHA,CAAC,EAAG,GAAI,GAAI,GAAI,IAmHPiM,IAAK0P,IAC5BhX,EAAAA,EAAAA,KAACwT,EAAAA,EAAQ,CAAc/V,MAAOuZ,EAAO3b,SAClC2b,GADYA,SAStBsJ,IACCtgB,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFM,UAAU,SACV2C,QAAS3G,EACTuD,GAAI,CACFW,QAAS,CAAEkG,GAAI,OAAQE,GAAI,QAC3BlB,WAAY,SACZP,IAAK,EACLzB,GAAI,EACJC,GAAI,EACJsD,OAAQ,EACRpE,YAAa,UACb/C,aAAc,EACdqG,OAAQ,WACR9M,UAEF2E,EAAAA,EAAAA,KAACgH,EAAAA,EAAU,CAACrF,QAAQ,QAAOtG,SAAC,qBAOpC2E,EAAAA,EAAAA,KAACgC,EAAAA,EAAG,CACFH,GAAI,CACF2C,SAAU,EACVwE,EAAG,GACH3N,UAEF2E,EAAAA,EAAAA,KAAC6e,GAAY,CACX3I,UAAW4K,EACXhhB,eAAgB+gB,EAChB/B,WAAYA,EACZC,KAAMA,EACN4B,iBAAkBA,EAClB3B,aAhLemC,CAAC3jB,EAAO4jB,KAC/BV,EAAQU,GAERC,OAAOC,SAAS,CAAEpf,IAAK,EAAGqf,SAAU,YA8K5BtjB,oBAAqBA,EACrBH,aAAcA,UAMpBkC,EAAAA,EAAAA,KAAC2U,GAAc,CACblZ,iBAAkBA,EAClByX,KAAMvX,EACNwX,QAASjV,EACTrC,WAAYA,EACZsC,WAAYA,EACZE,WAAYA,QAMpB,GAAeyH,EAAAA,KAAWsa,ICtQboB,GAAsBA,CAACC,EAAYC,EAAa7B,KAC3D,MAAMf,EAAanO,KAAKoP,KAAK0B,EAAa5B,GACpCG,GAAc0B,EAAc,GAAK7B,EAGvC,MAAO,CACLf,aACAkB,aACAC,SALetP,KAAKuP,IAAIF,EAAaH,EAAU4B,GAM/CC,cACA7B,WACA4B,aACAE,YAAaD,EAAc5C,EAC3B8C,YAAaF,EAAc,IAWlBG,GAAoBA,CAACC,EAAOJ,EAAa7B,KACpD,IAAKiC,IAAUhhB,MAAMC,QAAQ+gB,GAC3B,MAAO,GAGT,MAAM9B,GAAc0B,EAAc,GAAK7B,EACjCI,EAAWD,EAAaH,EAE9B,OAAOiC,EAAMza,MAAM2Y,EAAYC,IAUpB8B,GAA2BA,CAACL,EAAa7B,EAAU4B,KAE9D,MAAMO,EAAgB7Y,EAAkBE,qBAAqBxM,SAC3DgjB,GAEEA,EACA1W,EAAkBC,kBAGhB6Y,EAAUtR,KAAKuR,IAAI,EAAGvR,KAAKoP,KAAK0B,EAAaO,IAG7CG,EAAmBxR,KAAKuR,IAAI,EAAGvR,KAAKuP,IAAIwB,EAAaO,IAE3D,MAAO,CACLP,YAAaS,EACbtC,SAAUmC,EACV7H,QAASuH,IAAgBS,GAAoBtC,IAAamC,IAWjDI,GAA2B,SACtCC,GAGI,IAFJlC,EAAU7gB,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,IAAAA,UAAA,GACVgjB,EAAoBhjB,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,EAEvB,MAAM,WAAE0gB,EAAU,SAAEC,EAAQ,WAAEwB,GAAeY,EAE7C,OAAIlC,GAAcmC,EAAuB,EACjC,WAAN3hB,OACEqf,EAAa,EAAC,KAAArf,OACZsf,EAAQ,QAAAtf,OAAO8gB,EAAU,gCAAA9gB,OAA+B2hB,EAAoB,WAG5E,WAAN3hB,OAAkBqf,EAAa,EAAC,KAAArf,OAAIsf,EAAQ,QAAAtf,OAAO8gB,EAAU,aAC/D,EASac,GAAoB,SAACb,EAAa5C,GAAgC,IAApB0D,EAAUljB,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,EACtE,GAAIwf,GAAc0D,EAChB,OAAO1hB,MAAM2hB,KAAK,CAAEljB,OAAQuf,GAAc,CAAC4D,EAAGC,IAAMA,EAAI,GAG1D,MAAMC,EAAOjS,KAAK8O,MAAM+C,EAAa,GACrC,IAAIK,EAAQlS,KAAKuR,IAAI,EAAGR,EAAckB,GAClCE,EAAMnS,KAAKuP,IAAIpB,EAAY+D,EAAQL,EAAa,GAOpD,OAJIM,EAAMD,EAAQ,EAAIL,IACpBK,EAAQlS,KAAKuR,IAAI,EAAGY,EAAMN,EAAa,IAGlC1hB,MAAM2hB,KAAK,CAAEljB,OAAQujB,EAAMD,EAAQ,GAAK,CAACH,EAAGC,IAAME,EAAQF,EACnE,EASaI,GAA2B,WAKtC,MAAMC,GAJQ1jB,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,MAELA,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,KAIT2jB,GALI3jB,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,KAKkB,GAEzB4jB,EAAcvS,KAAK8O,MAAMuD,EAAkBC,GAC3CE,EAAkBxS,KAAKuR,IAJT,IAI0BgB,GAG9C,OAAO/Z,EAAkBE,qBAAqB+Z,OAAO,CAACC,EAASre,IACtD2L,KAAK2S,IAAIte,EAAOme,GACrBxS,KAAK2S,IAAID,EAAUF,GACjBne,EACAqe,EAER,ECvIMzoB,GAAkB,CACtBC,YAAa,GACbC,OAAQ6P,EAAcC,cACtB7P,UAAW4P,EAAcC,cACzB5P,SAAU2P,EAAcC,cACxB3P,MAAO0P,EAAcC,cACrB1P,WAAYyP,EAAcC,eAQf2Y,GAAqB,WAAqB,IAApBrN,EAAS5W,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,GAC7C,MAAOhE,EAASC,IAAcC,EAAAA,EAAAA,UAASZ,IAKjC4oB,GAAejmB,EAAAA,EAAAA,aAAY,CAACH,EAAMK,KACtClC,EAAYoC,IAAIC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXD,GAAI,IACP,CAACP,GAAOK,MAET,IAKGI,GAAeN,EAAAA,EAAAA,aAClBC,IACCgmB,EAAa,cAAehmB,EAAME,OAAOD,QAE3C,CAAC+lB,IAMGlmB,GAAqBC,EAAAA,EAAAA,aACxBC,IACC,MAAM,KAAEJ,EAAI,MAAEK,GAAUD,EAAME,OAC9B8lB,EAAapmB,EAAMK,IAErB,CAAC+lB,IAMGC,GAAkBlmB,EAAAA,EAAAA,aAAY,KAClChC,EAAWX,KACV,IAKG8oB,GAAsBnmB,EAAAA,EAAAA,aACzBS,IACC,MAAMP,EACU,gBAAdO,EAA8B,GAAK2M,EAAcC,cACnD4Y,EAAaxlB,EAAWP,IAE1B,CAAC+lB,IAMGlnB,GAAoBC,EAAAA,EAAAA,SAAQ,IACzBqa,GAAgBV,EAAW5a,GACjC,CAAC4a,EAAW5a,IAKTqc,GAAqBpb,EAAAA,EAAAA,SAAQ,IAC1B4a,GAAmB7b,GACzB,CAACA,IAKEsc,GAAsBrb,EAAAA,EAAAA,SAAQ,IAC3B8a,GAAuB/b,GAC7B,CAACA,IAKEqoB,GAAmBpnB,EAAAA,EAAAA,SAAQ,IACxBob,EAAqB,EAC3B,CAACA,IAKEwI,GAAa5jB,EAAAA,EAAAA,SAAQ,IAClBonB,GAAoBrnB,EAAkBiD,SAAW2W,EAAU3W,OACjE,CAACokB,EAAkBrnB,EAAkBiD,OAAQ2W,EAAU3W,SAE1D,MAAO,CAELjE,UACAgB,oBACAqb,qBACAC,sBACA+L,mBACAxD,aAGAtiB,eACAP,qBACAmmB,kBACAC,sBACAF,eAGAI,aAAcA,IAAMroB,EAAWX,IAC/BW,aAEJ,ECtHasoB,GAAgB,WAA+B,IAA9B/B,EAAKxiB,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,GAAIyX,EAAOzX,UAAAC,OAAA,QAAA5E,IAAA2E,UAAA,GAAAA,UAAA,GAAG,CAAC,EACnD,MAAM,YACJwkB,EAAc3a,EAAkBG,aAAY,gBAC5Cya,EAAkB5a,EAAkBC,kBAAiB,qBACrD0W,EAAuB,GACrB/I,GAEG2K,EAAasC,IAAkBxoB,EAAAA,EAAAA,UAASsoB,IACxCjE,EAAUoE,IAAezoB,EAAAA,EAAAA,UAASuoB,GAKnCG,GAAkB3nB,EAAAA,EAAAA,SAAQ,IACvBwlB,GAAyBL,EAAa7B,EAAUiC,EAAMviB,QAC5D,CAACmiB,EAAa7B,EAAUiC,EAAMviB,SAK3B8iB,GAAiB9lB,EAAAA,EAAAA,SAAQ,IACtBilB,GACLM,EAAMviB,OACN2kB,EAAgBxC,YAChBwC,EAAgBrE,UAEjB,CAACiC,EAAMviB,OAAQ2kB,EAAgBxC,YAAawC,EAAgBrE,WAKzDsE,GAAmB5nB,EAAAA,EAAAA,SAAQ,IACxBslB,GACLC,EACAoC,EAAgBxC,YAChBwC,EAAgBrE,UAEjB,CAACiC,EAAOoC,EAAgBxC,YAAawC,EAAgBrE,WAKlDM,GAAa5jB,EAAAA,EAAAA,SAAQ,IAClBujB,EAAuB,GAAKgC,EAAMviB,SAAWugB,EACnD,CAACA,EAAsBgC,EAAMviB,SAK1B6kB,GAAc7nB,EAAAA,EAAAA,SAAQ,IACnB6lB,GACLC,EACAlC,EACAL,GAED,CAACuC,EAAgBlC,EAAYL,IAK1BuE,GAAW9mB,EAAAA,EAAAA,aACdwhB,IACC,MAAMkD,EAAUtR,KAAKuR,IAAI,EAAGvR,KAAKoP,KAAK+B,EAAMviB,OAASsgB,IAC/CyE,EAAa3T,KAAKuR,IAAI,EAAGvR,KAAKuP,IAAInB,EAAMkD,IAC9C+B,EAAeM,IAEjB,CAACxC,EAAMviB,OAAQsgB,IAMX0E,GAAehnB,EAAAA,EAAAA,aAAY,KAC3B8kB,EAAeV,aACjBqC,EAAgBrmB,GAASA,EAAO,IAEjC,CAAC0kB,EAAeV,cAKb6C,GAAejnB,EAAAA,EAAAA,aAAY,KAC3B8kB,EAAeT,aACjBoC,EAAgBrmB,GAASA,EAAO,IAEjC,CAAC0kB,EAAeT,cAKb6C,GAAgBlnB,EAAAA,EAAAA,aAAY,KAChCymB,EAAe,IACd,IAKGU,GAAennB,EAAAA,EAAAA,aAAY,KAC/B,MAAM0kB,EAAUtR,KAAKuR,IAAI,EAAGvR,KAAKoP,KAAK+B,EAAMviB,OAASsgB,IACrDmE,EAAe/B,IACd,CAACH,EAAMviB,OAAQsgB,IAKZ8E,GAAiBpnB,EAAAA,EAAAA,aACpBqnB,IACMzb,EAAkBE,qBAAqBxM,SAAS+nB,KACnD1lB,QAAQ2lB,KAAK,sBAADlkB,OAAuBikB,EAAW,qBAC9CA,EAAczb,EAAkBC,mBAIlC,MAAM0b,GAAoBpD,EAAc,GAAK7B,EACvCuB,EAAUzQ,KAAK8O,MAAMqF,EAAmBF,GAAe,EAE7DX,EAAYW,GACZZ,EAAe5C,IAEjB,CAACM,EAAa7B,IAMVkF,GAAkBxnB,EAAAA,EAAAA,aAAY,KAClCymB,EAAeF,GACfG,EAAYF,IACX,CAACD,EAAaC,IAKXiB,GAAqBznB,EAAAA,EAAAA,aAAY,KACrC,MAAM0kB,EAAUtR,KAAKuR,IAAI,EAAGvR,KAAKoP,KAAK+B,EAAMviB,OAASsgB,IACjD6B,EAAcO,GAChB+B,EAAe/B,IAEhB,CAACP,EAAaI,EAAMviB,OAAQsgB,IAO/B,OAJAtjB,EAAAA,EAAAA,SAAQ,KACNyoB,KACC,CAACA,KAEJpnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAEE8jB,YAAawC,EAAgBxC,YAC7B7B,SAAUqE,EAAgBrE,SAC1BsE,oBAGG9B,GAAc,IACjBlC,aACAiE,cACAtE,uBAGAuE,WACAE,eACAC,eACAC,gBACAC,eACAC,iBAGAI,kBACAC,qBAGAC,mBAAoB9b,EAAkBE,sBAE1C,EClLA,GAR8B6b,KAE1BllB,EAAAA,EAAAA,KAAC7E,EAAiB,CAAAE,UAChB2E,EAAAA,EAAAA,KAACogB,GAAW,K","sources":["features/Exercises/context/ExercisesContext.jsx","features/Exercises/utils/exerciseDetailUtils.js","features/Exercises/components/ExerciseDetail/ExerciseImageSlider.jsx","features/Exercises/components/ExerciseDetail/ExerciseDetailContent.jsx","features/Exercises/constants/ui.constants.js","features/Exercises/components/ExerciseDetail/ExerciseDetailChips.jsx","features/Exercises/components/ExerciseDetail/ExerciseInstructions.jsx","features/Exercises/components/ExerciseDetail/ExerciseDetailActions.jsx","features/Exercises/components/ExerciseDetail/ExerciseDetail.jsx","features/Exercises/constants/exercises.constant.js","features/Exercises/utils/filterUtils.js","features/Exercises/components/SearchFilters.jsx","features/Exercises/constants/exercise.constants.js","features/Exercises/utils/exerciseUtils.js","features/Exercises/components/Exercise/ExerciseImage.jsx","features/Exercises/components/Exercise/ExerciseChips.jsx","features/Exercises/components/Exercise/ExerciseContent.jsx","features/Exercises/components/Exercise/ExerciseActions.jsx","features/Exercises/components/Exercise/Exercise.jsx","features/Exercises/components/ExerciseList.jsx","features/Exercises/components/ExerciseListInfo.jsx","features/Exercises/components/ExerciseApp.jsx","features/Exercises/utils/paginationUtils.js","features/Exercises/hooks/useExerciseFilters.js","features/Exercises/hooks/usePagination.js","features/Exercises/index.js"],"sourcesContent":["/**\r\n * ExercisesContext\r\n * Centralized state management for the Exercises feature\r\n * Manages filters, selected exercise, details modal, and image navigation\r\n */\r\n\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n} from 'react';\r\nimport exercisesData from '../constants/exercises.json';\r\n\r\n// Create the context\r\nconst ExercisesContext = createContext(undefined);\r\n\r\n// Initial filter state\r\nconst INITIAL_FILTERS = {\r\n  searchQuery: '',\r\n  muscle: 'All',\r\n  equipment: 'All',\r\n  category: 'All',\r\n  force: 'All',\r\n  difficulty: 'All',\r\n};\r\n\r\n/**\r\n * ExercisesProvider component\r\n * Provides exercise state management to child components\r\n */\r\nexport const ExercisesProvider = ({ children }) => {\r\n  // Filter state\r\n  const [filters, setFilters] = useState(INITIAL_FILTERS);\r\n\r\n  // Exercise details state\r\n  const [selectedExercise, setSelectedExercise] = useState(null);\r\n  const [detailsOpen, setDetailsOpen] = useState(false);\r\n  const [activeStep, setActiveStep] = useState(0);\r\n\r\n  // Mobile UI state\r\n  const [mobileFiltersOpen, setMobileFiltersOpen] = useState(false);\r\n\r\n  // User interaction state\r\n  const [favorites, setFavorites] = useState(new Set());\r\n  const [bookmarks, setBookmarks] = useState(new Set());\r\n\r\n  // Memoized filtered exercises to avoid recalculating on every render\r\n  const filteredExercises = useMemo(() => {\r\n    let filtered = [...exercisesData];\r\n\r\n    // Filter by muscle\r\n    if (filters.muscle && filters.muscle !== 'All') {\r\n      filtered = filtered.filter((exercise) =>\r\n        exercise.primaryMuscles.includes(filters.muscle)\r\n      );\r\n    }\r\n\r\n    // Filter by equipment\r\n    if (filters.equipment && filters.equipment !== 'All') {\r\n      filtered = filtered.filter(\r\n        (exercise) => exercise.equipment === filters.equipment\r\n      );\r\n    }\r\n\r\n    // Filter by force\r\n    if (filters.force && filters.force !== 'All') {\r\n      filtered = filtered.filter(\r\n        (exercise) => exercise.force === filters.force\r\n      );\r\n    }\r\n\r\n    // Filter by difficulty\r\n    if (filters.difficulty && filters.difficulty !== 'All') {\r\n      filtered = filtered.filter(\r\n        (exercise) => exercise.level === filters.difficulty\r\n      );\r\n    }\r\n\r\n    // Filter by category\r\n    if (filters.category && filters.category !== 'All') {\r\n      filtered = filtered.filter(\r\n        (exercise) => exercise.category === filters.category\r\n      );\r\n    }\r\n\r\n    // Filter by search query\r\n    if (filters.searchQuery) {\r\n      const query = filters.searchQuery.toLowerCase();\r\n      filtered = filtered.filter(\r\n        (exercise) =>\r\n          exercise.name?.toLowerCase().includes(query) ||\r\n          exercise.primaryMuscles.some((muscle) =>\r\n            muscle?.toLowerCase().includes(query)\r\n          ) ||\r\n          exercise.equipment?.toLowerCase().includes(query) ||\r\n          exercise.category?.toLowerCase().includes(query)\r\n      );\r\n    }\r\n\r\n    // Sanitize exercises before returning\r\n    return filtered;\r\n  }, [filters]);\r\n\r\n  // Filter management functions\r\n  const handleFilterChange = useCallback((event) => {\r\n    const { name, value } = event.target;\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  }, []);\r\n\r\n  const handleSearch = useCallback((event) => {\r\n    const value = event.target.value;\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      searchQuery: value,\r\n    }));\r\n  }, []);\r\n\r\n  const clearFilters = useCallback(() => {\r\n    setFilters(INITIAL_FILTERS);\r\n  }, []);\r\n\r\n  const handleClearSpecificFilter = useCallback((filterKey) => {\r\n    if (filterKey === 'searchQuery') {\r\n      setFilters((prev) => ({ ...prev, searchQuery: '' }));\r\n    } else {\r\n      setFilters((prev) => ({ ...prev, [filterKey]: 'All' }));\r\n    }\r\n  }, []);\r\n\r\n  // Exercise details management\r\n  const openExerciseDetails = useCallback((exercise) => {\r\n    setSelectedExercise(exercise);\r\n    setDetailsOpen(true);\r\n    setActiveStep(0);\r\n  }, []);\r\n\r\n  const closeExerciseDetails = useCallback(() => {\r\n    setDetailsOpen(false);\r\n    setSelectedExercise(null);\r\n    setActiveStep(0);\r\n  }, []);\r\n\r\n  // Image navigation\r\n  const handleNext = useCallback(() => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n  }, []);\r\n\r\n  const handleBack = useCallback(() => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  }, []);\r\n\r\n  // Mobile filters management\r\n  const openMobileFilters = useCallback(() => {\r\n    setMobileFiltersOpen(true);\r\n  }, []);\r\n\r\n  const closeMobileFilters = useCallback(() => {\r\n    setMobileFiltersOpen(false);\r\n  }, []);\r\n\r\n  // User interaction functions\r\n  const toggleFavorite = useCallback((exercise) => {\r\n    const exerciseId = exercise.name || exercise.id;\r\n    setFavorites((prev) => {\r\n      const newFavorites = new Set(prev);\r\n      if (newFavorites.has(exerciseId)) {\r\n        newFavorites.delete(exerciseId);\r\n      } else {\r\n        newFavorites.add(exerciseId);\r\n      }\r\n      return newFavorites;\r\n    });\r\n  }, []);\r\n\r\n  const toggleBookmark = useCallback((exercise) => {\r\n    const exerciseId = exercise.name || exercise.id;\r\n    setBookmarks((prev) => {\r\n      const newBookmarks = new Set(prev);\r\n      if (newBookmarks.has(exerciseId)) {\r\n        newBookmarks.delete(exerciseId);\r\n      } else {\r\n        newBookmarks.add(exerciseId);\r\n      }\r\n      return newBookmarks;\r\n    });\r\n  }, []);\r\n\r\n  // Add to workout function (placeholder for future implementation)\r\n  const addToWorkout = useCallback((exercise) => {\r\n    console.log('Adding to workout:', exercise.name);\r\n    // TODO: Implement workout functionality\r\n  }, []);\r\n\r\n  // Share exercise function (placeholder for future implementation)\r\n  const shareExercise = useCallback((exercise, shareType = 'link') => {\r\n    console.log('Sharing exercise:', exercise.name, 'via', shareType);\r\n    // TODO: Implement sharing functionality\r\n  }, []);\r\n\r\n  // Schedule exercise function (placeholder for future implementation)\r\n  const scheduleExercise = useCallback((exercise) => {\r\n    console.log('Scheduling exercise:', exercise.name);\r\n    // TODO: Implement scheduling functionality\r\n  }, []);\r\n\r\n  // Report exercise function (placeholder for future implementation)\r\n  const reportExercise = useCallback((exercise) => {\r\n    console.log('Reporting exercise:', exercise.name);\r\n    // TODO: Implement reporting functionality\r\n  }, []);\r\n\r\n  // Edit exercise function (placeholder for future implementation)\r\n  const editExercise = useCallback((exercise) => {\r\n    console.log('Editing exercise:', exercise.name);\r\n    // TODO: Implement editing functionality\r\n  }, []);\r\n\r\n  // Helper functions for checking state\r\n  const isFavorite = useCallback(\r\n    (exercise) => {\r\n      const exerciseId = exercise?.name || exercise?.id;\r\n      return favorites.has(exerciseId);\r\n    },\r\n    [favorites]\r\n  );\r\n\r\n  const isBookmarked = useCallback(\r\n    (exercise) => {\r\n      const exerciseId = exercise?.name || exercise?.id;\r\n      return bookmarks.has(exerciseId);\r\n    },\r\n    [bookmarks]\r\n  );\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // State\r\n    filters,\r\n    filteredExercises,\r\n    selectedExercise,\r\n    detailsOpen,\r\n    activeStep,\r\n    mobileFiltersOpen,\r\n    favorites,\r\n    bookmarks,\r\n\r\n    // Filter functions\r\n    handleFilterChange,\r\n    handleSearch,\r\n    clearFilters,\r\n    handleClearSpecificFilter,\r\n\r\n    // Exercise details functions\r\n    openExerciseDetails,\r\n    closeExerciseDetails,\r\n\r\n    // Image navigation functions\r\n    handleNext,\r\n    handleBack,\r\n\r\n    // Mobile UI functions\r\n    openMobileFilters,\r\n    closeMobileFilters,\r\n\r\n    // User interaction functions\r\n    toggleFavorite,\r\n    toggleBookmark,\r\n    isFavorite,\r\n    isBookmarked,\r\n\r\n    // Action functions\r\n    addToWorkout,\r\n    shareExercise,\r\n    scheduleExercise,\r\n    reportExercise,\r\n    editExercise,\r\n\r\n    // Data\r\n    totalExercises: exercisesData.length,\r\n    filteredCount: filteredExercises.length,\r\n  };\r\n\r\n  return (\r\n    <ExercisesContext.Provider value={contextValue}>\r\n      {children}\r\n    </ExercisesContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Custom hook to use the ExercisesContext\r\n * Provides type safety and helpful error messages\r\n */\r\nexport const useExercises = () => {\r\n  const context = useContext(ExercisesContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error('useExercises must be used within an ExercisesProvider');\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\n/**\r\n * HOC to wrap components with ExercisesProvider\r\n */\r\nexport const withExercisesProvider = (Component) => {\r\n  const WrappedComponent = (props) => (\r\n    <ExercisesProvider>\r\n      <Component {...props} />\r\n    </ExercisesProvider>\r\n  );\r\n\r\n  WrappedComponent.displayName = `withExercisesProvider(${\r\n    Component.displayName || Component.name\r\n  })`;\r\n\r\n  return WrappedComponent;\r\n};\r\n\r\nexport default ExercisesContext;\r\n","/**\r\n * Exercise Detail Utility Functions\r\n * Contains helper functions for ExerciseDetail components\r\n */\r\n\r\n/**\r\n * Validates and processes exercise image array\r\n * @param {Array|string} images - Images array or single image\r\n * @returns {Array} Validated images array\r\n */\r\nexport const validateImageArray = (images) => {\r\n  if (!images) return [];\r\n\r\n  if (typeof images === 'string') {\r\n    return [images];\r\n  }\r\n\r\n  if (Array.isArray(images)) {\r\n    return images.filter((img) => img && typeof img === 'string' && img.trim());\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\n/**\r\n * Gets the full image source path with PUBLIC_URL\r\n * @param {string} imagePath - Relative image path\r\n * @param {string} exerciseName - Exercise name for fallback\r\n * @returns {string} Full image source path\r\n */\r\nexport const getImageSrc = (imagePath, exerciseName = '') => {\r\n  if (!imagePath || typeof imagePath !== 'string') return '';\r\n\r\n  // If already a full URL, return as is\r\n  if (imagePath.startsWith('http') || imagePath.startsWith('data:')) {\r\n    return imagePath;\r\n  }\r\n\r\n  // Add PUBLIC_URL prefix for local images\r\n  const publicUrl = process.env.PUBLIC_URL || '';\r\n  const cleanPath = imagePath.startsWith('/') ? imagePath : `/${imagePath}`;\r\n\r\n  return `${publicUrl}${cleanPath}`;\r\n};\r\n\r\n/**\r\n * Formats muscle groups for display\r\n * @param {Array|string} muscles - Primary muscles array or string\r\n * @param {Array|string} secondaryMuscles - Secondary muscles array or string\r\n * @returns {Object} Formatted muscle groups with primary and secondary arrays\r\n */\r\nexport const formatMuscleGroups = (muscles = [], secondaryMuscles = []) => {\r\n  const formatMuscleArray = (muscleData) => {\r\n    if (!muscleData) return [];\r\n\r\n    if (typeof muscleData === 'string') {\r\n      return muscleData\r\n        .split(',')\r\n        .map((m) => m.trim())\r\n        .filter(Boolean);\r\n    }\r\n\r\n    if (Array.isArray(muscleData)) {\r\n      return muscleData\r\n        .filter((m) => m && typeof m === 'string')\r\n        .map((m) => m.trim());\r\n    }\r\n\r\n    return [];\r\n  };\r\n\r\n  return {\r\n    primary: formatMuscleArray(muscles),\r\n    secondary: formatMuscleArray(secondaryMuscles),\r\n  };\r\n};\r\n\r\n/**\r\n * Gets appropriate chip color based on attribute type and value\r\n * @param {string} attribute - Attribute name (difficulty, force, mechanic, etc.)\r\n * @param {string} value - Attribute value\r\n * @returns {string} Material-UI chip color\r\n */\r\nexport const getChipColor = (attribute, value) => {\r\n  if (!attribute || !value) return 'default';\r\n\r\n  const attr = attribute.toLowerCase();\r\n  const val = value.toLowerCase();\r\n\r\n  switch (attr) {\r\n    case 'difficulty':\r\n      switch (val) {\r\n        case 'beginner':\r\n          return 'success';\r\n        case 'intermediate':\r\n          return 'warning';\r\n        case 'advanced':\r\n          return 'error';\r\n        case 'expert':\r\n          return 'error';\r\n        default:\r\n          return 'default';\r\n      }\r\n\r\n    case 'force':\r\n      switch (val) {\r\n        case 'push':\r\n          return 'primary';\r\n        case 'pull':\r\n          return 'secondary';\r\n        case 'static':\r\n          return 'info';\r\n        default:\r\n          return 'default';\r\n      }\r\n\r\n    case 'mechanic':\r\n      switch (val) {\r\n        case 'compound':\r\n          return 'primary';\r\n        case 'isolation':\r\n          return 'secondary';\r\n        default:\r\n          return 'default';\r\n      }\r\n\r\n    case 'category':\r\n      return 'info';\r\n\r\n    case 'equipment':\r\n      if (val === 'none' || val === 'bodyweight') {\r\n        return 'success';\r\n      }\r\n      return 'default';\r\n\r\n    default:\r\n      return 'default';\r\n  }\r\n};\r\n\r\n/**\r\n * Gets formatted display label for chip attributes\r\n * @param {string} attribute - Attribute name\r\n * @param {string} value - Attribute value\r\n * @returns {string} Formatted display label\r\n */\r\nexport const getChipLabel = (attribute, value) => {\r\n  if (!attribute || !value) return '';\r\n\r\n  const attr = attribute.toLowerCase();\r\n  const val = value.toString();\r\n\r\n  switch (attr) {\r\n    case 'primarymuscles':\r\n    case 'primary_muscles':\r\n      return `Primary: ${val}`;\r\n\r\n    case 'secondarymuscles':\r\n    case 'secondary_muscles':\r\n      return `Secondary: ${val}`;\r\n\r\n    case 'difficulty':\r\n      return `${val.charAt(0).toUpperCase() + val.slice(1)} Level`;\r\n\r\n    case 'equipment':\r\n      if (val.toLowerCase() === 'none') {\r\n        return 'Bodyweight';\r\n      }\r\n      return val;\r\n\r\n    case 'force':\r\n      return `${val.charAt(0).toUpperCase() + val.slice(1)} Movement`;\r\n\r\n    case 'mechanic':\r\n      return `${val.charAt(0).toUpperCase() + val.slice(1)} Exercise`;\r\n\r\n    default:\r\n      return val.charAt(0).toUpperCase() + val.slice(1);\r\n  }\r\n};\r\n\r\n/**\r\n * Gets tooltip text for exercise attributes\r\n * @param {string} attribute - Attribute name\r\n * @param {string} value - Attribute value\r\n * @returns {string} Tooltip text\r\n */\r\nexport const getAttributeTooltip = (attribute, value) => {\r\n  if (!attribute || !value) return '';\r\n\r\n  const attr = attribute.toLowerCase();\r\n  const val = value.toLowerCase();\r\n\r\n  switch (attr) {\r\n    case 'difficulty':\r\n      switch (val) {\r\n        case 'beginner':\r\n          return 'Suitable for those new to exercise or this movement pattern';\r\n        case 'intermediate':\r\n          return 'Requires some experience and basic strength/mobility';\r\n        case 'advanced':\r\n          return 'Requires significant strength, skill, and experience';\r\n        case 'expert':\r\n          return 'Only for highly experienced individuals with exceptional strength/skill';\r\n        default:\r\n          return `Difficulty level: ${value}`;\r\n      }\r\n\r\n    case 'force':\r\n      switch (val) {\r\n        case 'push':\r\n          return 'Movement involves pushing weight away from the body';\r\n        case 'pull':\r\n          return 'Movement involves pulling weight toward the body';\r\n        case 'static':\r\n          return 'Isometric exercise with no joint movement';\r\n        default:\r\n          return `Force type: ${value}`;\r\n      }\r\n\r\n    case 'mechanic':\r\n      switch (val) {\r\n        case 'compound':\r\n          return 'Multi-joint exercise working several muscle groups';\r\n        case 'isolation':\r\n          return 'Single-joint exercise targeting specific muscles';\r\n        default:\r\n          return `Exercise mechanic: ${value}`;\r\n      }\r\n\r\n    case 'equipment':\r\n      if (val === 'none' || val === 'bodyweight') {\r\n        return 'No equipment required - uses bodyweight only';\r\n      }\r\n      return `Required equipment: ${value}`;\r\n\r\n    case 'category':\r\n      return `Exercise category: ${value}`;\r\n\r\n    case 'primarymuscles':\r\n    case 'primary_muscles':\r\n      return `Primary muscles targeted by this exercise: ${value}`;\r\n\r\n    case 'secondarymuscles':\r\n    case 'secondary_muscles':\r\n      return `Secondary muscles assisted during this exercise: ${value}`;\r\n\r\n    default:\r\n      return `${attribute}: ${value}`;\r\n  }\r\n};\r\n\r\n/**\r\n * Validates and processes exercise instructions\r\n * @param {Array|string} instructions - Instructions array or string\r\n * @returns {Array} Validated instructions array\r\n */\r\nexport const validateInstructions = (instructions) => {\r\n  if (!instructions) return [];\r\n\r\n  if (typeof instructions === 'string') {\r\n    // Split by common delimiters and clean up\r\n    return instructions\r\n      .split(/\\n|\\r\\n|\\.(?=\\s[A-Z])|\\d+\\.|•|-/)\r\n      .map((step) => step.trim())\r\n      .filter((step) => step && step.length > 3)\r\n      .map((step) => step.replace(/^\\d+\\.?\\s*/, '').trim());\r\n  }\r\n\r\n  if (Array.isArray(instructions)) {\r\n    return instructions\r\n      .filter((step) => step && typeof step === 'string')\r\n      .map((step) => step.trim())\r\n      .filter((step) => step.length > 3);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\n/**\r\n * Formats individual instruction step\r\n * @param {string} instruction - Raw instruction text\r\n * @returns {string} Formatted instruction\r\n */\r\nexport const formatInstruction = (instruction) => {\r\n  if (!instruction || typeof instruction !== 'string') return '';\r\n\r\n  let formatted = instruction.trim();\r\n\r\n  // Remove leading numbers or bullets\r\n  formatted = formatted.replace(/^\\d+\\.?\\s*/, '');\r\n  formatted = formatted.replace(/^[•-]\\s*/, '');\r\n\r\n  // Ensure proper capitalization\r\n  if (formatted.length > 0) {\r\n    formatted = formatted.charAt(0).toUpperCase() + formatted.slice(1);\r\n  }\r\n\r\n  // Ensure proper punctuation\r\n  if (formatted && !formatted.match(/[.!?]$/)) {\r\n    formatted += '.';\r\n  }\r\n\r\n  return formatted;\r\n};\r\n\r\n/**\r\n * Calculates image loading priority based on position\r\n * @param {number} index - Image index in array\r\n * @param {number} total - Total number of images\r\n * @returns {string} Loading priority ('high', 'low', 'lazy')\r\n */\r\nexport const getImageLoadingPriority = (index, total) => {\r\n  if (index === 0) return 'high'; // First image should load immediately\r\n  if (index < 3) return 'low'; // Next few images with normal priority\r\n  return 'lazy'; // Rest can be lazy loaded\r\n};\r\n\r\n/**\r\n * Generates exercise sharing data\r\n * @param {Object} exercise - Exercise object\r\n * @returns {Object} Share data with title, description, url\r\n */\r\nexport const generateShareData = (exercise) => {\r\n  if (!exercise) return null;\r\n\r\n  const title = `${exercise.name} - Exercise Guide`;\r\n  const description =\r\n    exercise.instructions && exercise.instructions.length > 0\r\n      ? `Learn how to perform ${\r\n          exercise.name\r\n        }. ${exercise.instructions[0]?.substring(0, 100)}...`\r\n      : `Complete guide for ${exercise.name} exercise including form, muscles worked, and variations.`;\r\n\r\n  const url = window.location.href;\r\n\r\n  return {\r\n    title,\r\n    text: description,\r\n    url,\r\n  };\r\n};\r\n\r\n/**\r\n * Formats exercise statistics for display\r\n * @param {Object} stats - Exercise statistics object\r\n * @returns {Object} Formatted statistics\r\n */\r\nexport const formatExerciseStats = (stats) => {\r\n  if (!stats || typeof stats !== 'object') return null;\r\n\r\n  return {\r\n    timesUsed: stats.timesUsed\r\n      ? parseInt(stats.timesUsed).toLocaleString()\r\n      : null,\r\n    avgRating: stats.avgRating ? parseFloat(stats.avgRating).toFixed(1) : null,\r\n    lastUsed: stats.lastUsed ? new Date(stats.lastUsed) : null,\r\n    popularity: stats.popularity || null,\r\n    difficulty: stats.difficulty || null,\r\n  };\r\n};\r\n\r\n/**\r\n * Debounce function for search and other frequent operations\r\n * @param {Function} func - Function to debounce\r\n * @param {number} wait - Wait time in milliseconds\r\n * @returns {Function} Debounced function\r\n */\r\nexport const debounce = (func, wait) => {\r\n  let timeout;\r\n  return function executedFunction(...args) {\r\n    const later = () => {\r\n      clearTimeout(timeout);\r\n      func(...args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n};\r\n","/**\r\n * Exercise Image Slider Component\r\n * Handles image display with navigation, loading states, and error handling\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { Box, Button, MobileStepper, Skeleton } from '@mui/material';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport {\r\n  validateImageArray,\r\n  getImageSrc,\r\n} from '../../utils/exerciseDetailUtils';\r\n\r\n/**\r\n * Individual image component with loading and error states\r\n */\r\nconst ExerciseImage = ({ src, alt, height = 300 }) => {\r\n  const [imageError, setImageError] = useState(false);\r\n  const [imageLoading, setImageLoading] = useState(true);\r\n\r\n  const handleImageLoad = () => {\r\n    setImageLoading(false);\r\n  };\r\n\r\n  const handleImageError = () => {\r\n    setImageLoading(false);\r\n    setImageError(true);\r\n  };\r\n\r\n  if (imageError || !src) {\r\n    return (\r\n      <Skeleton\r\n        variant='rectangular'\r\n        width='100%'\r\n        height={height}\r\n        sx={{\r\n          borderRadius: 1,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ position: 'relative' }}>\r\n      {imageLoading && (\r\n        <Skeleton\r\n          variant='rectangular'\r\n          width='100%'\r\n          height={height}\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            bgcolor: 'grey.50',\r\n            zIndex: 1,\r\n          }}\r\n        />\r\n      )}\r\n      <Box\r\n        component='img'\r\n        loading='lazy'\r\n        sx={{\r\n          height,\r\n          display: 'block',\r\n          width: '100%',\r\n          objectFit: 'cover',\r\n          opacity: imageLoading ? 0 : 1,\r\n          transition: 'opacity 0.3s ease-in-out',\r\n        }}\r\n        src={src}\r\n        alt={alt}\r\n        onLoad={handleImageLoad}\r\n        onError={handleImageError}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\n/**\r\n * ExerciseImageSlider component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object containing images\r\n * @param {number} props.activeStep - Current active image index\r\n * @param {Function} props.onNext - Handler for next button\r\n * @param {Function} props.onBack - Handler for back button\r\n * @param {number} props.imageHeight - Height of images (optional, default: 300)\r\n * @param {boolean} props.showNavigation - Whether to show navigation controls\r\n * @param {boolean} props.showImageCounter - Whether to show image counter\r\n * @returns {JSX.Element} ExerciseImageSlider component\r\n */\r\nconst ExerciseImageSlider = ({\r\n  exercise,\r\n  activeStep: propActiveStep,\r\n  onNext: propOnNext,\r\n  onBack: propOnBack,\r\n  imageHeight = 300,\r\n  showNavigation = true,\r\n  showImageCounter = true,\r\n}) => {\r\n  // Internal state for navigation if not controlled externally\r\n  const [internalActiveStep, setInternalActiveStep] = useState(0);\r\n\r\n  // Use prop values if provided, otherwise use internal state\r\n  const activeStep =\r\n    propActiveStep !== undefined ? propActiveStep : internalActiveStep;\r\n  const onNext =\r\n    propOnNext ||\r\n    (() => {\r\n      const images = validateImageArray(exercise?.images);\r\n      if (activeStep < images.length - 1) {\r\n        setInternalActiveStep(activeStep + 1);\r\n      }\r\n    });\r\n  const onBack =\r\n    propOnBack ||\r\n    (() => {\r\n      if (activeStep > 0) {\r\n        setInternalActiveStep(activeStep - 1);\r\n      }\r\n    });\r\n  if (!exercise) {\r\n    return (\r\n      <Skeleton\r\n        variant='rectangular'\r\n        width='100%'\r\n        height={imageHeight}\r\n        sx={{ bgcolor: 'grey.100' }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const images = validateImageArray(exercise.images);\r\n  const totalImages = images.length;\r\n  const currentImage = images[activeStep] || '';\r\n\r\n  // If the image already has PUBLIC_URL (from sanitizeExercise), use it directly\r\n  // Otherwise, use getImageSrc to add PUBLIC_URL\r\n  const currentImageSrc =\r\n    currentImage && currentImage.includes(process.env.PUBLIC_URL || '')\r\n      ? currentImage\r\n      : getImageSrc(currentImage, exercise.name);\r\n\r\n  // If no valid images, show skeleton\r\n  if (totalImages === 0) {\r\n    return (\r\n      <Box sx={{ position: 'relative', width: '100%' }}>\r\n        <Skeleton\r\n          variant='rectangular'\r\n          width='100%'\r\n          height={imageHeight}\r\n          sx={{ bgcolor: 'grey.100' }}\r\n        />\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const isFirstImage = activeStep === 0;\r\n  const isLastImage = activeStep === totalImages - 1;\r\n  const canNavigate = totalImages > 1;\r\n\r\n  return (\r\n    <Box sx={{ position: 'relative', width: '100%' }}>\r\n      <Box sx={{ maxWidth: '100%', flexGrow: 1 }}>\r\n        <ExerciseImage\r\n          src={currentImageSrc}\r\n          alt={`${exercise.name} - image ${activeStep + 1}`}\r\n          height={imageHeight}\r\n        />\r\n\r\n        {/* Navigation Stepper */}\r\n        {canNavigate && showNavigation && (\r\n          <MobileStepper\r\n            variant='dots'\r\n            steps={totalImages}\r\n            position='static'\r\n            activeStep={activeStep}\r\n            sx={{\r\n              flexGrow: 1,\r\n              backgroundColor: 'background.paper',\r\n              borderTop: 1,\r\n              borderColor: 'divider',\r\n            }}\r\n            nextButton={\r\n              <Button\r\n                size='small'\r\n                onClick={onNext}\r\n                disabled={isLastImage}\r\n                sx={{\r\n                  minWidth: '64px',\r\n                  textTransform: 'none',\r\n                }}\r\n              >\r\n                Next\r\n                <KeyboardArrowRight />\r\n              </Button>\r\n            }\r\n            backButton={\r\n              <Button\r\n                size='small'\r\n                onClick={onBack}\r\n                disabled={isFirstImage}\r\n                sx={{\r\n                  minWidth: '64px',\r\n                  textTransform: 'none',\r\n                }}\r\n              >\r\n                <KeyboardArrowLeft />\r\n                Back\r\n              </Button>\r\n            }\r\n          />\r\n        )}\r\n      </Box>\r\n\r\n      {/* Image Counter */}\r\n      {totalImages > 1 && showImageCounter && (\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 8,\r\n            right: 8,\r\n            backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n            color: 'white',\r\n            px: 1.5,\r\n            py: 0.5,\r\n            borderRadius: 1,\r\n            fontSize: '0.75rem',\r\n            fontWeight: 500,\r\n          }}\r\n        >\r\n          {activeStep + 1} of {totalImages}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseImageSlider);\r\n","/**\r\n * Exercise Detail Content Component\r\n * Displays the main content section with description and basic exercise information\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  Chip,\r\n} from '@mui/material';\r\nimport {\r\n  ExpandMore as ExpandMoreIcon,\r\n  ExpandLess as ExpandLessIcon,\r\n  Info as InfoIcon,\r\n} from '@mui/icons-material';\r\n\r\n/**\r\n * ExerciseDetailContent component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object containing details\r\n * @param {boolean} props.showExpandableDescription - Whether description can be collapsed/expanded\r\n * @param {number} props.maxDescriptionLength - Max characters before truncation\r\n * @param {boolean} props.showMetadata - Whether to show exercise metadata section\r\n * @returns {JSX.Element} ExerciseDetailContent component\r\n */\r\nconst ExerciseDetailContent = ({\r\n  exercise,\r\n  showExpandableDescription = true,\r\n  maxDescriptionLength = 300,\r\n  showMetadata = true,\r\n}) => {\r\n  const [descriptionExpanded, setDescriptionExpanded] = useState(false);\r\n\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const hasDescription = exercise.description && exercise.description.trim();\r\n  const description = exercise.description?.trim() || '';\r\n  const shouldTruncate =\r\n    showExpandableDescription && description.length > maxDescriptionLength;\r\n  const truncatedDescription = shouldTruncate\r\n    ? description.substring(0, maxDescriptionLength) + '...'\r\n    : description;\r\n\r\n  const displayDescription =\r\n    descriptionExpanded || !shouldTruncate ? description : truncatedDescription;\r\n\r\n  // Exercise basic info for metadata section\r\n  const exerciseMetadata = [\r\n    { label: 'Category', value: exercise.category },\r\n    { label: 'Target', value: exercise.target },\r\n    { label: 'Body Part', value: exercise.bodyPart },\r\n    { label: 'Equipment', value: exercise.equipment },\r\n    { label: 'Level', value: exercise.level || exercise.difficulty },\r\n  ].filter((item) => item.value && item.value !== 'None');\r\n\r\n  return (\r\n    <Box sx={{ py: 2 }}>\r\n      {/* Exercise Name */}\r\n      <Typography\r\n        variant='h4'\r\n        component='h1'\r\n        gutterBottom\r\n        sx={{\r\n          fontWeight: 700,\r\n          color: 'text.primary',\r\n          mb: 2,\r\n        }}\r\n      >\r\n        {exercise.name}\r\n      </Typography>\r\n\r\n      {/* Quick Info Chips */}\r\n      {showMetadata && exerciseMetadata.length > 0 && (\r\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 3 }}>\r\n          {exerciseMetadata.slice(0, 4).map((item, index) => (\r\n            <Chip\r\n              key={index}\r\n              label={`${item.label}: ${item.value}`}\r\n              variant='outlined'\r\n              size='small'\r\n              sx={{\r\n                backgroundColor: 'background.paper',\r\n                '&:hover': {\r\n                  backgroundColor: 'action.hover',\r\n                },\r\n              }}\r\n            />\r\n          ))}\r\n        </Box>\r\n      )}\r\n\r\n      <Divider sx={{ mb: 3 }} />\r\n\r\n      {/* Description Section */}\r\n      {hasDescription ? (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 2 }}>\r\n            <InfoIcon color='action' fontSize='small' />\r\n            <Typography variant='h6' sx={{ fontWeight: 600 }}>\r\n              About This Exercise\r\n            </Typography>\r\n            {shouldTruncate && (\r\n              <IconButton\r\n                size='small'\r\n                onClick={() => setDescriptionExpanded(!descriptionExpanded)}\r\n                sx={{ ml: 'auto' }}\r\n              >\r\n                {descriptionExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n              </IconButton>\r\n            )}\r\n          </Box>\r\n\r\n          <Typography\r\n            variant='body1'\r\n            sx={{\r\n              lineHeight: 1.7,\r\n              color: 'text.secondary',\r\n              whiteSpace: 'pre-line',\r\n            }}\r\n          >\r\n            {displayDescription}\r\n          </Typography>\r\n\r\n          {shouldTruncate && !descriptionExpanded && (\r\n            <Typography\r\n              variant='body2'\r\n              color='primary'\r\n              sx={{\r\n                mt: 1,\r\n                cursor: 'pointer',\r\n                textDecoration: 'underline',\r\n                '&:hover': {\r\n                  color: 'primary.dark',\r\n                },\r\n              }}\r\n              onClick={() => setDescriptionExpanded(true)}\r\n            >\r\n              Read more\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      ) : (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant='h6' gutterBottom sx={{ fontWeight: 600 }}>\r\n            About This Exercise\r\n          </Typography>\r\n          <Typography\r\n            variant='body2'\r\n            color='text.secondary'\r\n            sx={{ fontStyle: 'italic' }}\r\n          >\r\n            No description available for this exercise.\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Detailed Metadata Card */}\r\n      {showMetadata && exerciseMetadata.length > 0 && (\r\n        <Card\r\n          variant='outlined'\r\n          sx={{\r\n            mb: 3,\r\n            borderColor: 'divider',\r\n          }}\r\n        >\r\n          <CardContent sx={{ pb: '16px !important' }}>\r\n            <Typography\r\n              variant='h6'\r\n              gutterBottom\r\n              sx={{ fontWeight: 600, mb: 2 }}\r\n            >\r\n              Exercise Details\r\n            </Typography>\r\n\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                gridTemplateColumns: {\r\n                  xs: '1fr',\r\n                  sm: '1fr 1fr',\r\n                  md: '1fr 1fr 1fr',\r\n                },\r\n                gap: 2,\r\n              }}\r\n            >\r\n              {exerciseMetadata.map((item, index) => (\r\n                <Box\r\n                  key={index}\r\n                  sx={{ display: 'flex', flexDirection: 'column' }}\r\n                >\r\n                  <Typography\r\n                    variant='caption'\r\n                    color='text.secondary'\r\n                    sx={{\r\n                      fontWeight: 600,\r\n                      textTransform: 'uppercase',\r\n                      letterSpacing: 0.5,\r\n                    }}\r\n                  >\r\n                    {item.label}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant='body2'\r\n                    sx={{\r\n                      fontWeight: 500,\r\n                      color: 'text.primary',\r\n                      mt: 0.5,\r\n                    }}\r\n                  >\r\n                    {item.value}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Additional Notes */}\r\n      {exercise.notes && (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant='h6' gutterBottom sx={{ fontWeight: 600 }}>\r\n            Notes\r\n          </Typography>\r\n          <Typography\r\n            variant='body2'\r\n            color='text.secondary'\r\n            sx={{\r\n              backgroundColor: 'warning.light',\r\n              color: 'warning.contrastText',\r\n              p: 2,\r\n              borderRadius: 1,\r\n              border: '1px solid',\r\n              borderColor: 'warning.main',\r\n              whiteSpace: 'pre-line',\r\n            }}\r\n          >\r\n            {exercise.notes}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Safety Tips */}\r\n      {exercise.safety && (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography\r\n            variant='h6'\r\n            gutterBottom\r\n            sx={{ fontWeight: 600, color: 'error.main' }}\r\n          >\r\n            Safety & Precautions\r\n          </Typography>\r\n          <Typography\r\n            variant='body2'\r\n            sx={{\r\n              backgroundColor: 'error.light',\r\n              color: 'error.contrastText',\r\n              p: 2,\r\n              borderRadius: 1,\r\n              border: '1px solid',\r\n              borderColor: 'error.main',\r\n              whiteSpace: 'pre-line',\r\n            }}\r\n          >\r\n            {exercise.safety}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseDetailContent);\r\n","/**\r\n * UI-related constants for the Exercise module\r\n */\r\n\r\n/**\r\n * Pagination configuration constants\r\n */\r\nexport const PAGINATION_CONFIG = {\r\n  DEFAULT_PAGE_SIZE: 12,\r\n  AVAILABLE_PAGE_SIZES: [6, 12, 24, 48, 96],\r\n  INITIAL_PAGE: 1,\r\n};\r\n\r\n/**\r\n * Card layout and styling constants\r\n */\r\nexport const CARD_CONFIG = {\r\n  IMAGE_HEIGHT: '200px',\r\n  HOVER_TRANSFORM: 'translateY(-5px)',\r\n  HOVER_BOX_SHADOW: 6,\r\n  TRANSITION_DURATION: '0.2s',\r\n};\r\n\r\n/**\r\n * Chip color mapping for different exercise attributes\r\n */\r\nexport const CHIP_COLORS = {\r\n  PRIMARY_MUSCLE: 'primary',\r\n  EQUIPMENT: 'secondary',\r\n  LEVEL: 'default',\r\n  CATEGORY: 'error',\r\n  FORCE: 'info',\r\n  MECHANIC: 'success',\r\n};\r\n\r\n/**\r\n * Tooltip configuration\r\n */\r\nexport const TOOLTIP_CONFIG = {\r\n  MAX_WIDTH: 220,\r\n  FONT_SIZE: 12,\r\n  DESCRIPTION_MAX_LENGTH: 120,\r\n};\r\n\r\n/**\r\n * Search configuration\r\n */\r\nexport const SEARCH_CONFIG = {\r\n  DEBOUNCE_DELAY: 300,\r\n  MIN_SEARCH_LENGTH: 2,\r\n  PLACEHOLDER_TEXT: 'Search by name, muscle, equipment...',\r\n};\r\n\r\n/**\r\n * Filter configuration\r\n */\r\nexport const FILTER_CONFIG = {\r\n  DEFAULT_VALUE: 'All',\r\n  ACTIVE_FILTER_THRESHOLD: 1,\r\n};\r\n","/**\r\n * Exercise Detail Chips Component\r\n * Displays exercise attributes as chips with detailed tooltips for the detail view\r\n */\r\n\r\nimport React from 'react';\r\nimport { Box, Chip, Typography } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\r\nimport { CHIP_COLORS } from '../../constants/ui.constants';\r\nimport {\r\n  formatMuscleGroups,\r\n  getChipLabel,\r\n} from '../../utils/exerciseDetailUtils';\r\n\r\n/**\r\n * Custom styled tooltip for detailed exercise information\r\n */\r\nconst DetailedTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    maxWidth: 280,\r\n    fontSize: theme.typography.pxToRem(13),\r\n    padding: theme.spacing(1.5),\r\n  },\r\n}));\r\n\r\n/**\r\n * Muscle Groups Chip with enhanced tooltip\r\n */\r\nconst MuscleGroupsChip = ({ exercise, chipColor = 'primary' }) => {\r\n  if (!exercise?.primaryMuscles?.length && !exercise?.target) {\r\n    return null;\r\n  }\r\n\r\n  // Get muscle groups using our utility function\r\n  const muscleGroups = formatMuscleGroups(\r\n    exercise.primaryMuscles || exercise.target || [],\r\n    exercise.secondaryMuscles || []\r\n  );\r\n\r\n  const primaryMuscles = muscleGroups.primary;\r\n  const secondaryMuscles = muscleGroups.secondary;\r\n\r\n  if (primaryMuscles.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  const displayLabel =\r\n    primaryMuscles.length === 1\r\n      ? primaryMuscles[0]\r\n      : `${primaryMuscles[0]} +${primaryMuscles.length - 1}`;\r\n\r\n  const tooltipContent = (\r\n    <React.Fragment>\r\n      <Typography color='inherit' variant='subtitle2' sx={{ fontWeight: 600 }}>\r\n        Muscle Groups Targeted\r\n      </Typography>\r\n      <Box sx={{ mt: 1 }}>\r\n        <Typography variant='body2' component='div'>\r\n          <strong>Primary:</strong> {primaryMuscles.join(', ')}\r\n        </Typography>\r\n        {secondaryMuscles.length > 0 && (\r\n          <Typography variant='body2' component='div' sx={{ mt: 0.5 }}>\r\n            <strong>Secondary:</strong> {secondaryMuscles.join(', ')}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n      <Typography variant='caption' sx={{ mt: 1, opacity: 0.8 }}>\r\n        Primary muscles are the main focus, secondary provide support\r\n      </Typography>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <DetailedTooltip title={tooltipContent} arrow placement='top'>\r\n      <Chip\r\n        label={displayLabel}\r\n        color={chipColor}\r\n        size='small'\r\n        sx={{\r\n          textTransform: 'capitalize',\r\n          fontWeight: 500,\r\n        }}\r\n      />\r\n    </DetailedTooltip>\r\n  );\r\n};\r\n\r\n/**\r\n * Generic exercise attribute chip with tooltip\r\n */\r\nconst AttributeChip = ({\r\n  attribute,\r\n  label,\r\n  color,\r\n  tooltip,\r\n  size = 'small',\r\n  description,\r\n}) => {\r\n  if (!label || label === '-' || label === 'None') {\r\n    return null;\r\n  }\r\n\r\n  // Use getChipLabel with attribute and value, or fallback to label\r\n  const displayLabel = attribute\r\n    ? getChipLabel(attribute, label)\r\n    : typeof label === 'string'\r\n    ? label\r\n    : String(label);\r\n\r\n  const chipElement = (\r\n    <Chip\r\n      label={displayLabel}\r\n      color={color}\r\n      size={size}\r\n      sx={{\r\n        textTransform: 'capitalize',\r\n        fontWeight: 500,\r\n      }}\r\n    />\r\n  );\r\n\r\n  if (!tooltip && !description) {\r\n    return chipElement;\r\n  }\r\n\r\n  const tooltipContent = description ? (\r\n    <React.Fragment>\r\n      <Typography color='inherit' variant='subtitle2' sx={{ fontWeight: 600 }}>\r\n        {tooltip}\r\n      </Typography>\r\n      <Typography variant='body2' sx={{ mt: 0.5 }}>\r\n        {description}\r\n      </Typography>\r\n    </React.Fragment>\r\n  ) : (\r\n    tooltip\r\n  );\r\n\r\n  return (\r\n    <Tooltip title={tooltipContent} arrow placement='top'>\r\n      {chipElement}\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\n/**\r\n * ExerciseDetailChips component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object\r\n * @param {boolean} props.showAll - Whether to show all available chips\r\n * @param {Array} props.visibleChips - Array of chip types to show\r\n * @returns {JSX.Element} ExerciseDetailChips component\r\n */\r\nconst ExerciseDetailChips = ({\r\n  exercise,\r\n  showAll = true,\r\n  visibleChips = [\r\n    'muscle',\r\n    'equipment',\r\n    'level',\r\n    'category',\r\n    'force',\r\n    'mechanic',\r\n  ],\r\n}) => {\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  // Safely access CHIP_COLORS with fallbacks\r\n  const safeChipColors = {\r\n    PRIMARY_MUSCLE: CHIP_COLORS?.PRIMARY_MUSCLE || 'primary',\r\n    EQUIPMENT: CHIP_COLORS?.EQUIPMENT || 'default',\r\n    LEVEL: CHIP_COLORS?.LEVEL || 'secondary',\r\n    CATEGORY: CHIP_COLORS?.CATEGORY || 'info',\r\n    FORCE: CHIP_COLORS?.FORCE || 'warning',\r\n    MECHANIC: CHIP_COLORS?.MECHANIC || 'success',\r\n  };\r\n\r\n  const chipConfig = [\r\n    {\r\n      key: 'muscle',\r\n      component: (\r\n        <MuscleGroupsChip\r\n          exercise={exercise}\r\n          chipColor={safeChipColors.PRIMARY_MUSCLE}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'equipment',\r\n      component: (\r\n        <AttributeChip\r\n          attribute='equipment'\r\n          label={exercise.equipment}\r\n          color={safeChipColors.EQUIPMENT}\r\n          tooltip='Equipment Required'\r\n          description={\r\n            exercise.equipment && exercise.equipment.toLowerCase() !== 'none'\r\n              ? `This exercise requires ${exercise.equipment.toLowerCase()}`\r\n              : 'No equipment needed - bodyweight exercise'\r\n          }\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'level',\r\n      component: (\r\n        <AttributeChip\r\n          attribute='difficulty'\r\n          label={exercise.level || exercise.difficulty}\r\n          color={safeChipColors.LEVEL}\r\n          tooltip='Difficulty Level'\r\n          description={`This exercise is suitable for ${(\r\n            exercise.level || exercise.difficulty\r\n          )?.toLowerCase()} level practitioners`}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'category',\r\n      component: (\r\n        <AttributeChip\r\n          attribute='category'\r\n          label={exercise.category}\r\n          color={safeChipColors.CATEGORY}\r\n          tooltip='Exercise Category'\r\n          description={`This is a ${exercise.category?.toLowerCase()} exercise`}\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'force',\r\n      component: exercise.force ? (\r\n        <AttributeChip\r\n          attribute='force'\r\n          label={exercise.force}\r\n          color={safeChipColors.FORCE}\r\n          tooltip='Force Type'\r\n          description={`This exercise involves ${exercise.force?.toLowerCase()} movement pattern`}\r\n        />\r\n      ) : null,\r\n    },\r\n    {\r\n      key: 'mechanic',\r\n      component: exercise.mechanic ? (\r\n        <AttributeChip\r\n          attribute='mechanic'\r\n          label={exercise.mechanic}\r\n          color={safeChipColors.MECHANIC}\r\n          tooltip='Movement Mechanic'\r\n          description={`This exercise uses ${exercise.mechanic?.toLowerCase()} movement mechanics`}\r\n        />\r\n      ) : null,\r\n    },\r\n  ];\r\n\r\n  const displayChips = showAll\r\n    ? chipConfig\r\n    : chipConfig.filter((chip) => visibleChips.includes(chip.key));\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        display: 'flex',\r\n        gap: 1.5,\r\n        mb: 3,\r\n        flexWrap: 'wrap',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      {displayChips.map(({ key, component }) =>\r\n        component ? (\r\n          <React.Fragment key={key}>{component}</React.Fragment>\r\n        ) : null\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseDetailChips);\r\n","/**\r\n * Exercise Instructions Component\r\n * Displays step-by-step instructions for performing the exercise\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Divider,\r\n  Chip,\r\n  IconButton,\r\n  Collapse,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n} from '@mui/material';\r\nimport {\r\n  ExpandMore as ExpandMoreIcon,\r\n  ExpandLess as ExpandLessIcon,\r\n  CheckCircleOutline as CheckIcon,\r\n  PlayArrow as PlayIcon,\r\n} from '@mui/icons-material';\r\nimport {\r\n  validateInstructions,\r\n  formatInstruction,\r\n} from '../../utils/exerciseDetailUtils';\r\n\r\n/**\r\n * Individual instruction step component\r\n */\r\nconst InstructionStep = ({\r\n  step,\r\n  index,\r\n  isCompleted = false,\r\n  onToggleComplete,\r\n  showCheckboxes = false,\r\n}) => {\r\n  const formattedInstruction = formatInstruction(step);\r\n\r\n  return (\r\n    <ListItem\r\n      sx={{\r\n        px: 0,\r\n        py: 1,\r\n        alignItems: 'flex-start',\r\n        opacity: isCompleted ? 0.7 : 1,\r\n        transition: 'opacity 0.2s ease-in-out',\r\n      }}\r\n    >\r\n      <ListItemIcon sx={{ minWidth: '40px', mt: 0.5 }}>\r\n        {showCheckboxes ? (\r\n          <IconButton\r\n            size='small'\r\n            onClick={() => onToggleComplete?.(index)}\r\n            sx={{\r\n              color: isCompleted ? 'success.main' : 'action.active',\r\n              '&:hover': {\r\n                backgroundColor: isCompleted ? 'success.light' : 'action.hover',\r\n                opacity: 0.1,\r\n              },\r\n            }}\r\n          >\r\n            <CheckIcon fontSize='small' />\r\n          </IconButton>\r\n        ) : (\r\n          <Box\r\n            sx={{\r\n              width: 24,\r\n              height: 24,\r\n              borderRadius: '50%',\r\n              backgroundColor: 'primary.main',\r\n              color: 'primary.contrastText',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              fontSize: '0.75rem',\r\n              fontWeight: 600,\r\n              flexShrink: 0,\r\n            }}\r\n          >\r\n            {index + 1}\r\n          </Box>\r\n        )}\r\n      </ListItemIcon>\r\n\r\n      <ListItemText\r\n        primary={\r\n          <Typography\r\n            variant='body1'\r\n            sx={{\r\n              lineHeight: 1.6,\r\n              textDecoration: isCompleted ? 'line-through' : 'none',\r\n            }}\r\n          >\r\n            {formattedInstruction}\r\n          </Typography>\r\n        }\r\n      />\r\n    </ListItem>\r\n  );\r\n};\r\n\r\n/**\r\n * ExerciseInstructions component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object containing instructions\r\n * @param {boolean} props.showCheckboxes - Whether to show completion checkboxes\r\n * @param {boolean} props.collapsible - Whether instructions can be collapsed\r\n * @param {boolean} props.defaultExpanded - Default expanded state\r\n * @param {Function} props.onStepComplete - Handler for step completion\r\n * @returns {JSX.Element} ExerciseInstructions component\r\n */\r\nconst ExerciseInstructions = ({\r\n  exercise,\r\n  showCheckboxes = false,\r\n  collapsible = false,\r\n  defaultExpanded = true,\r\n  onStepComplete,\r\n}) => {\r\n  const [expanded, setExpanded] = useState(defaultExpanded);\r\n  const [completedSteps, setCompletedSteps] = useState(new Set());\r\n\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const instructions = validateInstructions(exercise.instructions);\r\n\r\n  if (instructions.length === 0) {\r\n    return (\r\n      <Box sx={{ py: 2 }}>\r\n        <Typography variant='h6' gutterBottom sx={{ fontWeight: 600 }}>\r\n          Instructions\r\n        </Typography>\r\n        <Typography\r\n          variant='body2'\r\n          color='text.secondary'\r\n          sx={{ fontStyle: 'italic' }}\r\n        >\r\n          No instructions available for this exercise.\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  const handleToggleComplete = (stepIndex) => {\r\n    const newCompletedSteps = new Set(completedSteps);\r\n    if (completedSteps.has(stepIndex)) {\r\n      newCompletedSteps.delete(stepIndex);\r\n    } else {\r\n      newCompletedSteps.add(stepIndex);\r\n    }\r\n    setCompletedSteps(newCompletedSteps);\r\n    onStepComplete?.(stepIndex, !completedSteps.has(stepIndex));\r\n  };\r\n\r\n  const completedCount = completedSteps.size;\r\n  const totalSteps = instructions.length;\r\n  const completionPercentage = Math.round((completedCount / totalSteps) * 100);\r\n\r\n  const headerContent = (\r\n    <Box sx={{ display: 'flex', alignItems: 'center', gap: 2, mb: 2 }}>\r\n      <Typography variant='h6' sx={{ fontWeight: 600, flexGrow: 1 }}>\r\n        Instructions\r\n      </Typography>\r\n\r\n      {showCheckboxes && (\r\n        <Chip\r\n          label={`${completedCount}/${totalSteps} completed`}\r\n          color={completedCount === totalSteps ? 'success' : 'default'}\r\n          size='small'\r\n          variant='outlined'\r\n        />\r\n      )}\r\n\r\n      <Chip\r\n        label={`${totalSteps} steps`}\r\n        size='small'\r\n        variant='outlined'\r\n        icon={<PlayIcon />}\r\n      />\r\n\r\n      {collapsible && (\r\n        <IconButton\r\n          onClick={() => setExpanded(!expanded)}\r\n          size='small'\r\n          sx={{ ml: 1 }}\r\n        >\r\n          {expanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\r\n        </IconButton>\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  const instructionsContent = (\r\n    <List sx={{ py: 0 }}>\r\n      {instructions.map((step, index) => (\r\n        <InstructionStep\r\n          key={index}\r\n          step={step}\r\n          index={index}\r\n          isCompleted={completedSteps.has(index)}\r\n          onToggleComplete={handleToggleComplete}\r\n          showCheckboxes={showCheckboxes}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ py: 2 }}>\r\n      <Divider sx={{ mb: 3 }} />\r\n\r\n      {headerContent}\r\n\r\n      {/* Progress bar for checkbox mode */}\r\n      {showCheckboxes && completedCount > 0 && (\r\n        <Box sx={{ mb: 2 }}>\r\n          <Box\r\n            sx={{\r\n              width: '100%',\r\n              height: 4,\r\n              backgroundColor: 'grey.200',\r\n              borderRadius: 2,\r\n              overflow: 'hidden',\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                width: `${completionPercentage}%`,\r\n                height: '100%',\r\n                backgroundColor:\r\n                  completedCount === totalSteps\r\n                    ? 'success.main'\r\n                    : 'primary.main',\r\n                transition: 'width 0.3s ease-in-out',\r\n              }}\r\n            />\r\n          </Box>\r\n          <Typography variant='caption' color='text.secondary' sx={{ mt: 0.5 }}>\r\n            {completionPercentage}% complete\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {collapsible ? (\r\n        <Collapse in={expanded} timeout='auto' unmountOnExit>\r\n          {instructionsContent}\r\n        </Collapse>\r\n      ) : (\r\n        instructionsContent\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseInstructions);\r\n","/**\r\n * Exercise Detail Actions Component\r\n * Contains action buttons and controls for the exercise detail view\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Button,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Tooltip,\r\n  Chip,\r\n  Divider,\r\n  Typography,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  FavoriteBorder as FavoriteIcon,\r\n  Favorite as FavoriteFilledIcon,\r\n  Share as ShareIcon,\r\n  MoreVert as MoreVertIcon,\r\n  Schedule as ScheduleIcon,\r\n  Bookmark as BookmarkIcon,\r\n  BookmarkBorder as BookmarkBorderIcon,\r\n  Edit as EditIcon,\r\n  Report as ReportIcon,\r\n  Info as InfoIcon,\r\n} from '@mui/icons-material';\r\n\r\n/**\r\n * ExerciseDetailActions component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object\r\n * @param {Function} props.onAddToWorkout - Handler for adding exercise to workout\r\n * @param {Function} props.onToggleFavorite - Handler for toggling favorite status\r\n * @param {Function} props.onShare - Handler for sharing exercise\r\n * @param {Function} props.onSchedule - Handler for scheduling exercise\r\n * @param {Function} props.onBookmark - Handler for bookmarking exercise\r\n * @param {Function} props.onEdit - Handler for editing exercise (admin only)\r\n * @param {Function} props.onReport - Handler for reporting exercise\r\n * @param {boolean} props.isFavorite - Whether exercise is favorited\r\n * @param {boolean} props.isBookmarked - Whether exercise is bookmarked\r\n * @param {boolean} props.canEdit - Whether user can edit this exercise\r\n * @param {boolean} props.showSecondaryActions - Whether to show secondary action menu\r\n * @param {string} props.size - Size of buttons ('small', 'medium', 'large')\r\n * @param {string} props.variant - Button variant ('contained', 'outlined', 'text')\r\n * @returns {JSX.Element} ExerciseDetailActions component\r\n */\r\nconst ExerciseDetailActions = ({\r\n  exercise,\r\n  onAddToWorkout,\r\n  onToggleFavorite,\r\n  onShare,\r\n  onSchedule,\r\n  onBookmark,\r\n  onEdit,\r\n  onReport,\r\n  isFavorite = false,\r\n  isBookmarked = false,\r\n  canEdit = false,\r\n  showSecondaryActions = true,\r\n  size = 'medium',\r\n  variant = 'contained',\r\n}) => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [shareAnchorEl, setShareAnchorEl] = useState(null);\r\n\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const handleMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleShareMenuOpen = (event) => {\r\n    setShareAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleShareMenuClose = () => {\r\n    setShareAnchorEl(null);\r\n  };\r\n\r\n  const handleAddToWorkout = () => {\r\n    onAddToWorkout?.(exercise);\r\n  };\r\n\r\n  const handleToggleFavorite = () => {\r\n    onToggleFavorite?.(exercise, !isFavorite);\r\n  };\r\n\r\n  const handleShare = (shareType) => {\r\n    onShare?.(exercise, shareType);\r\n    handleShareMenuClose();\r\n  };\r\n\r\n  const handleSchedule = () => {\r\n    onSchedule?.(exercise);\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleBookmark = () => {\r\n    onBookmark?.(exercise, !isBookmarked);\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    onEdit?.(exercise);\r\n    handleMenuClose();\r\n  };\r\n\r\n  const handleReport = () => {\r\n    onReport?.(exercise);\r\n    handleMenuClose();\r\n  };\r\n\r\n  const primaryActions = (\r\n    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\r\n      {/* Add to Workout - Primary Action */}\r\n      <Button\r\n        variant={variant}\r\n        size={size}\r\n        startIcon={<AddIcon />}\r\n        onClick={handleAddToWorkout}\r\n        sx={{\r\n          minWidth: 'auto',\r\n          whiteSpace: 'nowrap',\r\n        }}\r\n      >\r\n        Add to Workout\r\n      </Button>\r\n\r\n      {/* Favorite Toggle */}\r\n      <Tooltip\r\n        title={isFavorite ? 'Remove from favorites' : 'Add to favorites'}\r\n      >\r\n        <IconButton\r\n          onClick={handleToggleFavorite}\r\n          color={isFavorite ? 'error' : 'default'}\r\n          size={size}\r\n        >\r\n          {isFavorite ? <FavoriteFilledIcon /> : <FavoriteIcon />}\r\n        </IconButton>\r\n      </Tooltip>\r\n\r\n      {/* Share Menu */}\r\n      <Tooltip title='Share exercise'>\r\n        <IconButton onClick={handleShareMenuOpen} size={size}>\r\n          <ShareIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n\r\n      <Menu\r\n        anchorEl={shareAnchorEl}\r\n        open={Boolean(shareAnchorEl)}\r\n        onClose={handleShareMenuClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'center',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'center',\r\n        }}\r\n      >\r\n        <MenuItem onClick={() => handleShare('link')}>\r\n          <ListItemText primary='Copy Link' />\r\n        </MenuItem>\r\n        <MenuItem onClick={() => handleShare('email')}>\r\n          <ListItemText primary='Share via Email' />\r\n        </MenuItem>\r\n        <MenuItem onClick={() => handleShare('social')}>\r\n          <ListItemText primary='Share on Social' />\r\n        </MenuItem>\r\n      </Menu>\r\n    </Box>\r\n  );\r\n\r\n  const secondaryMenu = showSecondaryActions && (\r\n    <>\r\n      <Tooltip title='More actions'>\r\n        <IconButton onClick={handleMenuOpen} size={size}>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n      </Tooltip>\r\n\r\n      <Menu\r\n        anchorEl={anchorEl}\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleMenuClose}\r\n        anchorOrigin={{\r\n          vertical: 'bottom',\r\n          horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n          vertical: 'top',\r\n          horizontal: 'right',\r\n        }}\r\n      >\r\n        <MenuItem onClick={handleSchedule}>\r\n          <ListItemIcon>\r\n            <ScheduleIcon fontSize='small' />\r\n          </ListItemIcon>\r\n          <ListItemText primary='Schedule Workout' />\r\n        </MenuItem>\r\n\r\n        <MenuItem onClick={handleBookmark}>\r\n          <ListItemIcon>\r\n            {isBookmarked ? (\r\n              <BookmarkIcon fontSize='small' />\r\n            ) : (\r\n              <BookmarkBorderIcon fontSize='small' />\r\n            )}\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            primary={isBookmarked ? 'Remove Bookmark' : 'Bookmark'}\r\n          />\r\n        </MenuItem>\r\n\r\n        <Divider />\r\n\r\n        {canEdit && (\r\n          <MenuItem onClick={handleEdit}>\r\n            <ListItemIcon>\r\n              <EditIcon fontSize='small' />\r\n            </ListItemIcon>\r\n            <ListItemText primary='Edit Exercise' />\r\n          </MenuItem>\r\n        )}\r\n\r\n        <MenuItem onClick={handleReport}>\r\n          <ListItemIcon>\r\n            <ReportIcon fontSize='small' />\r\n          </ListItemIcon>\r\n          <ListItemText primary='Report Issue' />\r\n        </MenuItem>\r\n      </Menu>\r\n    </>\r\n  );\r\n\r\n  // Exercise metadata chips\r\n  const exerciseMetadata = (\r\n    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mt: 2 }}>\r\n      {exercise.difficulty && (\r\n        <Chip\r\n          label={`${exercise.difficulty} difficulty`}\r\n          size='small'\r\n          variant='outlined'\r\n          color={\r\n            exercise.difficulty.toLowerCase() === 'beginner'\r\n              ? 'success'\r\n              : exercise.difficulty.toLowerCase() === 'intermediate'\r\n              ? 'warning'\r\n              : 'error'\r\n          }\r\n        />\r\n      )}\r\n\r\n      {exercise.equipment && exercise.equipment !== 'None' && (\r\n        <Chip\r\n          label={exercise.equipment}\r\n          size='small'\r\n          variant='outlined'\r\n          icon={<InfoIcon />}\r\n        />\r\n      )}\r\n\r\n      {exercise.force && (\r\n        <Chip label={exercise.force} size='small' variant='outlined' />\r\n      )}\r\n\r\n      {exercise.mechanic && (\r\n        <Chip label={exercise.mechanic} size='small' variant='outlined' />\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ py: 2 }}>\r\n      <Divider sx={{ mb: 3 }} />\r\n\r\n      {/* Header */}\r\n      <Typography variant='h6' gutterBottom sx={{ fontWeight: 600 }}>\r\n        Actions\r\n      </Typography>\r\n\r\n      {/* Primary Actions Row */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 2,\r\n        }}\r\n      >\r\n        {primaryActions}\r\n        {secondaryMenu}\r\n      </Box>\r\n\r\n      {/* Exercise Metadata */}\r\n      {exerciseMetadata}\r\n\r\n      {/* Usage Statistics (if available) */}\r\n      {exercise.stats && (\r\n        <Box sx={{ mt: 2, p: 2, backgroundColor: 'grey.50', borderRadius: 1 }}>\r\n          <Typography variant='body2' color='text.secondary' gutterBottom>\r\n            Exercise Statistics\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\r\n            {exercise.stats.timesUsed && (\r\n              <Typography variant='caption'>\r\n                Used {exercise.stats.timesUsed} times\r\n              </Typography>\r\n            )}\r\n            {exercise.stats.avgRating && (\r\n              <Typography variant='caption'>\r\n                {exercise.stats.avgRating}/5 rating\r\n              </Typography>\r\n            )}\r\n            {exercise.stats.lastUsed && (\r\n              <Typography variant='caption'>\r\n                Last used{' '}\r\n                {new Date(exercise.stats.lastUsed).toLocaleDateString()}\r\n              </Typography>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseDetailActions);\r\n","/**\r\n * Exercise Detail Component (Refactored)\r\n * Main detail view for exercises using modular sub-components\r\n */\r\n\r\nimport React from 'react';\r\nimport {\r\n  Box,\r\n  Drawer,\r\n  IconButton,\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n} from '@mui/material';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n// Import sub-components\r\nimport ExerciseImageSlider from './ExerciseImageSlider';\r\nimport ExerciseDetailContent from './ExerciseDetailContent';\r\nimport ExerciseDetailChips from './ExerciseDetailChips';\r\nimport ExerciseInstructions from './ExerciseInstructions';\r\nimport ExerciseDetailActions from './ExerciseDetailActions';\r\n\r\n/**\r\n * ExerciseDetail component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.selectedExercise - Selected exercise object\r\n * @param {boolean} props.open - Whether drawer is open\r\n * @param {Function} props.onClose - Handler for closing drawer\r\n * @param {Function} props.onAddToWorkout - Handler for adding exercise to workout\r\n * @param {Function} props.onToggleFavorite - Handler for toggling favorite status\r\n * @param {Function} props.onShare - Handler for sharing exercise\r\n * @param {Function} props.onSchedule - Handler for scheduling exercise\r\n * @param {Function} props.onBookmark - Handler for bookmarking exercise\r\n * @param {Function} props.onEdit - Handler for editing exercise\r\n * @param {Function} props.onReport - Handler for reporting exercise\r\n * @param {boolean} props.isFavorite - Whether exercise is favorited\r\n * @param {boolean} props.isBookmarked - Whether exercise is bookmarked\r\n * @param {boolean} props.canEdit - Whether user can edit exercise\r\n * @returns {JSX.Element} ExerciseDetail component\r\n */\r\nfunction ExerciseDetail({\r\n  selectedExercise,\r\n  open,\r\n  onClose,\r\n  onAddToWorkout,\r\n  onToggleFavorite,\r\n  onShare,\r\n  onSchedule,\r\n  onBookmark,\r\n  onEdit,\r\n  onReport,\r\n  isFavorite = false,\r\n  isBookmarked = false,\r\n  canEdit = false,\r\n}) {\r\n  if (!selectedExercise) {\r\n    return null;\r\n  }\r\n\r\n  const handleAddToWorkout = (exercise) => {\r\n    onAddToWorkout?.(exercise);\r\n    // Could show success message here\r\n  };\r\n\r\n  const handleToggleFavorite = (exercise, newState) => {\r\n    onToggleFavorite?.(exercise, newState);\r\n  };\r\n\r\n  const handleShare = (exercise, shareType) => {\r\n    onShare?.(exercise, shareType);\r\n  };\r\n\r\n  const handleSchedule = (exercise) => {\r\n    onSchedule?.(exercise);\r\n  };\r\n\r\n  const handleBookmark = (exercise, newState) => {\r\n    onBookmark?.(exercise, newState);\r\n  };\r\n\r\n  const handleEdit = (exercise) => {\r\n    onEdit?.(exercise);\r\n  };\r\n\r\n  const handleReport = (exercise) => {\r\n    onReport?.(exercise);\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      anchor='right'\r\n      open={open}\r\n      onClose={onClose}\r\n      sx={{\r\n        '& .MuiDrawer-paper': {\r\n          width: { xs: '100%', sm: 600, md: 700 },\r\n          boxSizing: 'border-box',\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          padding: 0,\r\n        },\r\n      }}\r\n    >\r\n      {/* Fixed Header */}\r\n      <AppBar\r\n        position='static'\r\n        color='default'\r\n        elevation={2}\r\n        sx={{\r\n          zIndex: (theme) => theme.zIndex.appBar + 1,\r\n          flexShrink: 0,\r\n          borderBottom: 1,\r\n          borderColor: 'divider',\r\n        }}\r\n      >\r\n        <Toolbar sx={{ minHeight: '64px !important' }}>\r\n          <Typography\r\n            variant='h6'\r\n            component='div'\r\n            sx={{\r\n              flexGrow: 1,\r\n              fontWeight: 600,\r\n              color: 'text.primary',\r\n            }}\r\n          >\r\n            Exercise Details\r\n          </Typography>\r\n          <IconButton\r\n            edge='end'\r\n            color='inherit'\r\n            onClick={onClose}\r\n            aria-label='close'\r\n            sx={{\r\n              '&:hover': {\r\n                backgroundColor: 'action.hover',\r\n              },\r\n            }}\r\n          >\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      {/* Scrollable Content */}\r\n      <Box\r\n        sx={{\r\n          flex: 1,\r\n          overflow: 'auto',\r\n          backgroundColor: 'background.default',\r\n          '&::-webkit-scrollbar': {\r\n            width: '8px',\r\n          },\r\n          '&::-webkit-scrollbar-track': {\r\n            backgroundColor: 'grey.100',\r\n          },\r\n          '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'grey.400',\r\n            borderRadius: '4px',\r\n            '&:hover': {\r\n              backgroundColor: 'grey.600',\r\n            },\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ px: 3, py: 2 }}>\r\n          {/* Image Slider */}\r\n          <Box sx={{ mb: 2 }}>\r\n            <ExerciseImageSlider\r\n              exercise={selectedExercise}\r\n              showImageCounter={true}\r\n              showNavigation={true}\r\n              imageHeight={300}\r\n            />\r\n          </Box>\r\n\r\n          {/* Main Content */}\r\n          <ExerciseDetailContent\r\n            exercise={selectedExercise}\r\n            showExpandableDescription={true}\r\n            maxDescriptionLength={300}\r\n            showMetadata={true}\r\n          />\r\n\r\n          {/* Exercise Attribute Chips */}\r\n          <ExerciseDetailChips\r\n            exercise={selectedExercise}\r\n            showTooltips={true}\r\n            maxChipsToShow={10}\r\n            layout='wrap'\r\n          />\r\n\r\n          {/* Instructions */}\r\n          <ExerciseInstructions\r\n            exercise={selectedExercise}\r\n            showCheckboxes={false}\r\n            collapsible={true}\r\n            defaultExpanded={true}\r\n          />\r\n\r\n          {/* Actions */}\r\n          <ExerciseDetailActions\r\n            exercise={selectedExercise}\r\n            onAddToWorkout={handleAddToWorkout}\r\n            onToggleFavorite={handleToggleFavorite}\r\n            onShare={handleShare}\r\n            onSchedule={handleSchedule}\r\n            onBookmark={handleBookmark}\r\n            onEdit={handleEdit}\r\n            onReport={handleReport}\r\n            isFavorite={isFavorite}\r\n            isBookmarked={isBookmarked}\r\n            canEdit={canEdit}\r\n            showSecondaryActions={true}\r\n            size='medium'\r\n            variant='contained'\r\n          />\r\n        </Box>\r\n      </Box>\r\n    </Drawer>\r\n  );\r\n}\r\n\r\nexport default React.memo(ExerciseDetail);\r\n","// Mock data for exercises\r\nexport const exercisesData = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tname: 'Barbell Bench Press',\r\n\t\tmuscle: 'Chest',\r\n\t\tequipment: 'Barbell',\r\n\t\tdifficulty: 'Intermediate',\r\n\t\tdescription:\r\n\t\t\t'Lie on a flat bench, grip the barbell with hands slightly wider than shoulder-width. Lower the bar to your chest, then press it back up to full arm extension.',\r\n\t\tinstructions: [\r\n\t\t\t'Lie flat on your back on a bench',\r\n\t\t\t'Grip the bar with hands just wider than shoulder-width',\r\n\t\t\t'Lift the bar off the rack and hold it straight over you',\r\n\t\t\t'Lower the bar slowly until it touches your chest',\r\n\t\t\t'Push the bar back to the starting position',\r\n\t\t],\r\n\t\timages: [\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tname: 'Pull-up',\r\n\t\tmuscle: 'Back',\r\n\t\tequipment: 'Body Weight',\r\n\t\tdifficulty: 'Advanced',\r\n\t\tdescription:\r\n\t\t\t'Hang from a pull-up bar with palms facing away from you, pull your body up until your chin is above the bar, then lower back down.',\r\n\t\tinstructions: [\r\n\t\t\t'Grab the pull-up bar with a grip slightly wider than shoulders, palms facing away',\r\n\t\t\t'Hang with arms fully extended',\r\n\t\t\t'Pull yourself up until your chin passes the bar',\r\n\t\t\t'Lower yourself with control until arms are fully extended',\r\n\t\t\t'Repeat for desired reps',\r\n\t\t],\r\n\t\timages: [\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tname: 'Squat',\r\n\t\tmuscle: 'Legs',\r\n\t\tequipment: 'Barbell',\r\n\t\tdifficulty: 'Intermediate',\r\n\t\tdescription:\r\n\t\t\t'Place a barbell on your upper back, squat down until thighs are parallel to the floor, then return to standing position.',\r\n\t\tinstructions: [\r\n\t\t\t'Place the barbell on your upper back, not on your neck',\r\n\t\t\t'Stand with feet shoulder-width apart, toes slightly pointed out',\r\n\t\t\t'Keep your back straight and core engaged',\r\n\t\t\t'Bend at the knees and hips to lower your body',\r\n\t\t\t'Lower until thighs are parallel to the ground',\r\n\t\t\t'Push through your heels to return to starting position',\r\n\t\t],\r\n\t\timages: [\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tname: 'Dumbbell Shoulder Press',\r\n\t\tmuscle: 'Shoulders',\r\n\t\tequipment: 'Dumbbell',\r\n\t\tdifficulty: 'Beginner',\r\n\t\tdescription:\r\n\t\t\t'Sit or stand with dumbbells at shoulder height, press them upward until arms are extended, then lower back down.',\r\n\t\tinstructions: [\r\n\t\t\t'Sit on a bench with back support or stand with feet shoulder-width apart',\r\n\t\t\t'Hold dumbbells at shoulder height, palms facing forward',\r\n\t\t\t'Press the weights upward until arms are fully extended',\r\n\t\t\t'Pause briefly at the top',\r\n\t\t\t'Lower the weights back to shoulder level with control',\r\n\t\t],\r\n\t\timages: [\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tname: 'Bicep Curl',\r\n\t\tmuscle: 'Arms',\r\n\t\tequipment: 'Dumbbell',\r\n\t\tdifficulty: 'Beginner',\r\n\t\tdescription:\r\n\t\t\t'Hold dumbbells with arms extended and palms facing forward, curl the weights up to shoulder level, then lower back down.',\r\n\t\tinstructions: [\r\n\t\t\t'Stand with feet shoulder-width apart, holding dumbbells at your sides',\r\n\t\t\t'Keep your elbows close to your torso',\r\n\t\t\t'Curl the weights up toward your shoulders',\r\n\t\t\t'Hold the contracted position briefly',\r\n\t\t\t'Lower the weights back to starting position with control',\r\n\t\t],\r\n\t\timages: [\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t],\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tname: 'Plank',\r\n\t\tmuscle: 'Core',\r\n\t\tequipment: 'Body Weight',\r\n\t\tdifficulty: 'Beginner',\r\n\t\tdescription:\r\n\t\t\t'Support your body on your forearms and toes while keeping your body in a straight line from head to heels.',\r\n\t\tinstructions: [\r\n\t\t\t'Start in a push-up position, then bend your elbows to rest on your forearms',\r\n\t\t\t'Your elbows should be directly beneath your shoulders',\r\n\t\t\t'Keep your body in a straight line from head to heels',\r\n\t\t\t\"Engage your core and don't let your hips sag or lift\",\r\n\t\t\t'Hold the position for the desired time',\r\n\t\t],\r\n\t\timages: [\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t\t'/api/placeholder/500/300',\r\n\t\t],\r\n\t},\r\n];\r\n\r\n// Filter options\r\nexport const muscleTypes = [\r\n\t{\r\n\t\tlabel: 'All',\r\n\t\tvalue: 'All',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Abdominals',\r\n\t\tvalue: 'abdominals',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Abductors',\r\n\t\tvalue: 'abductors',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Adductors',\r\n\t\tvalue: 'adductors',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Biceps',\r\n\t\tvalue: 'biceps',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Calves',\r\n\t\tvalue: 'calves',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Chest',\r\n\t\tvalue: 'chest',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Forearms',\r\n\t\tvalue: 'forearms',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Glutes',\r\n\t\tvalue: 'glutes',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Hamstrings',\r\n\t\tvalue: 'hamstrings',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Lats',\r\n\t\tvalue: 'lats',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Lower back',\r\n\t\tvalue: 'lower back',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Middle back',\r\n\t\tvalue: 'middle back',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Neck',\r\n\t\tvalue: 'neck',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Quadriceps',\r\n\t\tvalue: 'quadriceps',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Shoulders',\r\n\t\tvalue: 'shoulders',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Traps',\r\n\t\tvalue: 'traps',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Triceps',\r\n\t\tvalue: 'triceps',\r\n\t},\r\n];\r\n\r\nexport const categoryTypes = [\r\n\t{\r\n\t\tlabel: 'All',\r\n\t\tvalue: 'All',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Strength',\r\n\t\tvalue: 'strength',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Stretching',\r\n\t\tvalue: 'stretching',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Plyometrics',\r\n\t\tvalue: 'plyometrics',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Strongman',\r\n\t\tvalue: 'strongman',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Powerlifting',\r\n\t\tvalue: 'powerlifting',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Cardio',\r\n\t\tvalue: 'cardio',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Olympic Weightlifting',\r\n\t\tvalue: 'olympic weightlifting',\r\n\t},\r\n];\r\n\r\nexport const equipmentTypes = [\r\n\t{\r\n\t\tlabel: 'All',\r\n\t\tvalue: 'All',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Machine',\r\n\t\tvalue: 'machine',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Barbell',\r\n\t\tvalue: 'barbell',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Dumbbell',\r\n\t\tvalue: 'dumbbell',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Cable',\r\n\t\tvalue: 'cable',\r\n\t},\r\n\t{\r\n\t\tlabel: 'e-z Curl bar',\r\n\t\tvalue: 'e-z curl bar',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Kettlebells',\r\n\t\tvalue: 'kettlebells',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Bands',\r\n\t\tvalue: 'bands',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Medicine ball',\r\n\t\tvalue: 'medicine ball',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Exercise ball',\r\n\t\tvalue: 'exercise ball',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Body Weight',\r\n\t\tvalue: 'body only',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Foam roll',\r\n\t\tvalue: 'foam roll',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Other',\r\n\t\tvalue: 'other',\r\n\t},\r\n];\r\n\r\nexport const forceTypes = [\r\n\t{\r\n\t\tlabel: 'All',\r\n\t\tvalue: 'All',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Push',\r\n\t\tvalue: 'push',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Pull',\r\n\t\tvalue: 'pull',\r\n\t},\r\n\r\n\t{\r\n\t\tlabel: 'Static',\r\n\t\tvalue: 'static',\r\n\t},\r\n];\r\n\r\nexport const difficultyLevels = [\r\n\t{\r\n\t\tlabel: 'All',\r\n\t\tvalue: 'All',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Beginner',\r\n\t\tvalue: 'beginner',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Intermediate',\r\n\t\tvalue: 'intermediate',\r\n\t},\r\n\t{\r\n\t\tlabel: 'Expert',\r\n\t\tvalue: 'expert',\r\n\t},\r\n];\r\n","/**\r\n * Exercise filtering utilities\r\n * Provides functions for filtering exercises based on various criteria\r\n */\r\n\r\nimport {\r\n  muscleTypes,\r\n  categoryTypes,\r\n  equipmentTypes,\r\n  forceTypes,\r\n  difficultyLevels,\r\n} from '../constants/exercises.constant';\r\n\r\n/**\r\n * Filters exercises based on search query\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {string} searchQuery - Search query string\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const filterBySearchQuery = (exercises, searchQuery) => {\r\n  if (!searchQuery || searchQuery.trim() === '') {\r\n    return exercises;\r\n  }\r\n\r\n  const query = searchQuery.toLowerCase().trim();\r\n\r\n  return exercises.filter((exercise) => {\r\n    const name = exercise.name?.toLowerCase() || '';\r\n    const description = exercise.description?.toLowerCase() || '';\r\n    const primaryMuscles =\r\n      exercise.primaryMuscles?.join(' ').toLowerCase() || '';\r\n    const secondaryMuscles =\r\n      exercise.secondaryMuscles?.join(' ').toLowerCase() || '';\r\n    const equipment = exercise.equipment?.toLowerCase() || '';\r\n    const category = exercise.category?.toLowerCase() || '';\r\n\r\n    return (\r\n      name.includes(query) ||\r\n      description.includes(query) ||\r\n      primaryMuscles.includes(query) ||\r\n      secondaryMuscles.includes(query) ||\r\n      equipment.includes(query) ||\r\n      category.includes(query)\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Filters exercises by muscle group\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {string} muscle - Muscle group filter\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const filterByMuscle = (exercises, muscle) => {\r\n  if (!muscle || muscle === 'All') {\r\n    return exercises;\r\n  }\r\n\r\n  return exercises.filter((exercise) => {\r\n    const primaryMuscles = exercise.primaryMuscles || [];\r\n    const secondaryMuscles = exercise.secondaryMuscles || [];\r\n\r\n    return [...primaryMuscles, ...secondaryMuscles].some(\r\n      (m) => m.toLowerCase() === muscle.toLowerCase()\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Filters exercises by equipment type\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {string} equipment - Equipment filter\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const filterByEquipment = (exercises, equipment) => {\r\n  if (!equipment || equipment === 'All') {\r\n    return exercises;\r\n  }\r\n\r\n  return exercises.filter(\r\n    (exercise) => exercise.equipment?.toLowerCase() === equipment.toLowerCase()\r\n  );\r\n};\r\n\r\n/**\r\n * Filters exercises by category\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {string} category - Category filter\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const filterByCategory = (exercises, category) => {\r\n  if (!category || category === 'All') {\r\n    return exercises;\r\n  }\r\n\r\n  return exercises.filter(\r\n    (exercise) => exercise.category?.toLowerCase() === category.toLowerCase()\r\n  );\r\n};\r\n\r\n/**\r\n * Filters exercises by force type\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {string} force - Force filter\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const filterByForce = (exercises, force) => {\r\n  if (!force || force === 'All') {\r\n    return exercises;\r\n  }\r\n\r\n  return exercises.filter(\r\n    (exercise) => exercise.force?.toLowerCase() === force.toLowerCase()\r\n  );\r\n};\r\n\r\n/**\r\n * Filters exercises by difficulty level\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {string} difficulty - Difficulty filter\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const filterByDifficulty = (exercises, difficulty) => {\r\n  if (!difficulty || difficulty === 'All') {\r\n    return exercises;\r\n  }\r\n\r\n  return exercises.filter(\r\n    (exercise) => exercise.level?.toLowerCase() === difficulty.toLowerCase()\r\n  );\r\n};\r\n\r\n/**\r\n * Applies all filters to exercise array\r\n * @param {Array} exercises - Array of exercise objects\r\n * @param {Object} filters - Filter object containing all filter values\r\n * @returns {Array} Filtered exercises array\r\n */\r\nexport const applyAllFilters = (exercises, filters) => {\r\n  if (!exercises || !Array.isArray(exercises)) {\r\n    return [];\r\n  }\r\n\r\n  let filteredExercises = exercises;\r\n\r\n  // Apply search query filter\r\n  filteredExercises = filterBySearchQuery(\r\n    filteredExercises,\r\n    filters.searchQuery\r\n  );\r\n\r\n  // Apply muscle filter\r\n  filteredExercises = filterByMuscle(filteredExercises, filters.muscle);\r\n\r\n  // Apply equipment filter\r\n  filteredExercises = filterByEquipment(filteredExercises, filters.equipment);\r\n\r\n  // Apply category filter\r\n  filteredExercises = filterByCategory(filteredExercises, filters.category);\r\n\r\n  // Apply force filter\r\n  filteredExercises = filterByForce(filteredExercises, filters.force);\r\n\r\n  // Apply difficulty filter\r\n  filteredExercises = filterByDifficulty(filteredExercises, filters.difficulty);\r\n\r\n  return filteredExercises;\r\n};\r\n\r\n/**\r\n * Gets the display label for a filter option\r\n * @param {string} filterType - Type of filter (muscle, equipment, etc.)\r\n * @param {string} value - Filter value\r\n * @returns {string} Display label\r\n */\r\nexport const getFilterLabel = (filterType, value) => {\r\n  const filterMappings = {\r\n    muscle: muscleTypes,\r\n    equipment: equipmentTypes,\r\n    category: categoryTypes,\r\n    force: forceTypes,\r\n    difficulty: difficultyLevels,\r\n  };\r\n\r\n  const options = filterMappings[filterType];\r\n  if (!options) return value;\r\n\r\n  const option = options.find((opt) => opt.value === value);\r\n  return option ? option.label : value;\r\n};\r\n\r\n/**\r\n * Counts active filters\r\n * @param {Object} filters - Filter object\r\n * @returns {number} Number of active filters\r\n */\r\nexport const countActiveFilters = (filters) => {\r\n  let count = 0;\r\n\r\n  if (filters.searchQuery) count++;\r\n  if (filters.muscle !== 'All') count++;\r\n  if (filters.equipment !== 'All') count++;\r\n  if (filters.category !== 'All') count++;\r\n  if (filters.force !== 'All') count++;\r\n  if (filters.difficulty !== 'All') count++;\r\n\r\n  return count;\r\n};\r\n\r\n/**\r\n * Gets active filter details for display\r\n * @param {Object} filters - Filter object\r\n * @returns {Array} Array of active filter objects with key and label\r\n */\r\nexport const getActiveFilterDetails = (filters) => {\r\n  const activeFilters = [];\r\n\r\n  if (filters.searchQuery) {\r\n    activeFilters.push({\r\n      key: 'searchQuery',\r\n      type: 'search',\r\n      label: `\"${filters.searchQuery}\"`,\r\n    });\r\n  }\r\n\r\n  if (filters.muscle !== 'All') {\r\n    activeFilters.push({\r\n      key: 'muscle',\r\n      type: 'filter',\r\n      label: getFilterLabel('muscle', filters.muscle),\r\n    });\r\n  }\r\n\r\n  if (filters.equipment !== 'All') {\r\n    activeFilters.push({\r\n      key: 'equipment',\r\n      type: 'filter',\r\n      label: getFilterLabel('equipment', filters.equipment),\r\n    });\r\n  }\r\n\r\n  if (filters.category !== 'All') {\r\n    activeFilters.push({\r\n      key: 'category',\r\n      type: 'filter',\r\n      label: getFilterLabel('category', filters.category),\r\n    });\r\n  }\r\n\r\n  if (filters.force !== 'All') {\r\n    activeFilters.push({\r\n      key: 'force',\r\n      type: 'filter',\r\n      label: getFilterLabel('force', filters.force),\r\n    });\r\n  }\r\n\r\n  if (filters.difficulty !== 'All') {\r\n    activeFilters.push({\r\n      key: 'difficulty',\r\n      type: 'filter',\r\n      label: getFilterLabel('difficulty', filters.difficulty),\r\n    });\r\n  }\r\n\r\n  return activeFilters;\r\n};\r\n","/**\r\n * SearchFilters Component\r\n * Provides comprehensive filtering interface for exercises with active filter display\r\n *\r\n * Features:\r\n * - Multi-criteria filtering (search, muscle, equipment, category, force, difficulty)\r\n * - Active filter chips with individual removal\r\n * - Filter count indicator\r\n * - Responsive grid layout\r\n */\r\n\r\nimport React, { useMemo } from 'react';\r\nimport {\r\n  Typography,\r\n  Stack,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  TextField,\r\n  Chip,\r\n  Box,\r\n} from '@mui/material';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {\r\n  difficultyLevels,\r\n  equipmentTypes,\r\n  categoryTypes,\r\n  forceTypes,\r\n  muscleTypes,\r\n} from '../constants/exercises.constant';\r\nimport {\r\n  countActiveFilters,\r\n  getActiveFilterDetails,\r\n} from '../utils/filterUtils';\r\nimport { SEARCH_CONFIG, FILTER_CONFIG } from '../constants/ui.constants';\r\n\r\n/**\r\n * SearchFilters Component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.filters - Current filter state\r\n * @param {Function} props.handleSearch - Search query change handler\r\n * @param {Function} props.handleFilterChange - Filter dropdown change handler\r\n * @param {Function} props.clearFilters - Clear all filters handler\r\n * @param {Function} props.onClearSpecificFilter - Clear specific filter handler (optional)\r\n * @returns {JSX.Element} SearchFilters component\r\n */\r\nfunction SearchFilters(props) {\r\n  const {\r\n    filters,\r\n    handleSearch,\r\n    handleFilterChange,\r\n    clearFilters,\r\n    onClearSpecificFilter,\r\n  } = props;\r\n\r\n  // Count active filters using utility function\r\n  const activeFiltersCount = useMemo(() => {\r\n    return countActiveFilters(filters);\r\n  }, [filters]);\r\n\r\n  // Get active filter details using utility function\r\n  const activeFilterDetails = useMemo(() => {\r\n    return getActiveFilterDetails(filters);\r\n  }, [filters]);\r\n\r\n  /**\r\n   * Handles clearing a specific filter\r\n   */\r\n  const handleClearSpecificFilter = (filterKey) => {\r\n    if (onClearSpecificFilter && typeof onClearSpecificFilter === 'function') {\r\n      onClearSpecificFilter(filterKey);\r\n      return;\r\n    }\r\n\r\n    // Fallback implementation\r\n    const event = {\r\n      target: {\r\n        name: filterKey,\r\n        value: filterKey === 'searchQuery' ? '' : FILTER_CONFIG.DEFAULT_VALUE,\r\n      },\r\n    };\r\n\r\n    if (filterKey === 'searchQuery') {\r\n      handleSearch(event);\r\n    } else {\r\n      handleFilterChange(event);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Renders filter dropdown component\r\n   */\r\n  const FilterDropdown = ({ name, label, options, value }) => (\r\n    <FormControl fullWidth size='small'>\r\n      <InputLabel id={`${name}-label`}>{label}</InputLabel>\r\n      <Select\r\n        labelId={`${name}-label`}\r\n        id={`${name}-select`}\r\n        name={name}\r\n        value={value}\r\n        label={label}\r\n        onChange={handleFilterChange}\r\n      >\r\n        {options.map((item) => (\r\n          <MenuItem key={item.value} value={item.value}>\r\n            {item.label}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      {/* Header Section */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 2,\r\n        }}\r\n      >\r\n        <Typography variant='h6' component='h3' sx={{ fontWeight: 600 }}>\r\n          Filter Exercises\r\n        </Typography>\r\n        {activeFiltersCount > 0 && (\r\n          <Chip\r\n            label={`${activeFiltersCount}`}\r\n            color='primary'\r\n            size='small'\r\n            variant='filled'\r\n            sx={{ minWidth: '32px' }}\r\n          />\r\n        )}\r\n      </Box>\r\n\r\n      {/* Active Filters Display */}\r\n      {activeFiltersCount > 0 && (\r\n        <Box sx={{ mb: 3 }}>\r\n          <Typography variant='body2' color='text.secondary' sx={{ mb: 1 }}>\r\n            Active filters:\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n            {activeFilterDetails.map((filter) => (\r\n              <Chip\r\n                key={filter.key}\r\n                label={filter.label}\r\n                onDelete={() => handleClearSpecificFilter(filter.key)}\r\n                size='small'\r\n                variant='outlined'\r\n                color='primary'\r\n                sx={{\r\n                  '& .MuiChip-deleteIcon': {\r\n                    fontSize: '16px',\r\n                  },\r\n                }}\r\n              />\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Filter Controls - Vertical Stack */}\r\n      <Stack spacing={3}>\r\n        {/* Search Field */}\r\n        <TextField\r\n          fullWidth\r\n          label='Search Exercises'\r\n          variant='outlined'\r\n          name='searchQuery'\r\n          value={filters.searchQuery}\r\n          onChange={handleSearch}\r\n          placeholder={SEARCH_CONFIG.PLACEHOLDER_TEXT}\r\n          size='small'\r\n          InputProps={{\r\n            endAdornment: <SearchIcon sx={{ color: 'action.active' }} />,\r\n          }}\r\n          sx={{\r\n            '& .MuiOutlinedInput-root': {\r\n              '&:hover fieldset': {\r\n                borderColor: 'primary.main',\r\n              },\r\n            },\r\n          }}\r\n        />\r\n\r\n        {/* Muscle Group Filter */}\r\n        <FilterDropdown\r\n          name='muscle'\r\n          label='Muscle Group'\r\n          options={muscleTypes}\r\n          value={filters.muscle}\r\n        />\r\n\r\n        {/* Equipment Filter */}\r\n        <FilterDropdown\r\n          name='equipment'\r\n          label='Equipment'\r\n          options={equipmentTypes}\r\n          value={filters.equipment}\r\n        />\r\n\r\n        {/* Category Filter */}\r\n        <FilterDropdown\r\n          name='category'\r\n          label='Category'\r\n          options={categoryTypes}\r\n          value={filters.category}\r\n        />\r\n\r\n        {/* Force Filter */}\r\n        <FilterDropdown\r\n          name='force'\r\n          label='Force'\r\n          options={forceTypes}\r\n          value={filters.force}\r\n        />\r\n\r\n        {/* Difficulty Filter */}\r\n        <FilterDropdown\r\n          name='difficulty'\r\n          label='Difficulty'\r\n          options={difficultyLevels}\r\n          value={filters.difficulty}\r\n        />\r\n\r\n        {/* Clear Filters Button */}\r\n        <Button\r\n          variant='outlined'\r\n          onClick={clearFilters}\r\n          disabled={activeFiltersCount === 0}\r\n          fullWidth\r\n          sx={{\r\n            mt: 2,\r\n            textTransform: 'none',\r\n            fontWeight: 500,\r\n          }}\r\n        >\r\n          Clear All Filters\r\n        </Button>\r\n      </Stack>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default React.memo(SearchFilters);\r\n","/**\r\n * Exercise data structure and validation constants\r\n */\r\n\r\n/**\r\n * Required fields for exercise validation\r\n */\r\nexport const REQUIRED_EXERCISE_FIELDS = [\r\n  'name',\r\n  'primaryMuscles',\r\n  'equipment',\r\n  'level',\r\n  'category',\r\n  'images',\r\n  'instructions',\r\n];\r\n\r\n/**\r\n * Optional exercise fields\r\n */\r\nexport const OPTIONAL_EXERCISE_FIELDS = [\r\n  'secondaryMuscles',\r\n  'force',\r\n  'mechanic',\r\n  'description',\r\n];\r\n\r\n/**\r\n * Exercise difficulty levels mapping\r\n */\r\nexport const DIFFICULTY_MAPPING = {\r\n  beginner: { label: 'Beginner', order: 1 },\r\n  intermediate: { label: 'Intermediate', order: 2 },\r\n  expert: { label: 'Expert', order: 3 },\r\n};\r\n\r\n/**\r\n * Exercise categories with descriptions\r\n */\r\nexport const CATEGORY_DESCRIPTIONS = {\r\n  strength:\r\n    'Resistance training exercises focusing on building muscle strength',\r\n  stretching: 'Flexibility and mobility exercises',\r\n  plyometrics: 'Explosive movement exercises for power development',\r\n  strongman: 'Functional strength exercises with heavy implements',\r\n  powerlifting:\r\n    'Competition-focused strength exercises (squat, bench, deadlift)',\r\n  cardio: 'Cardiovascular endurance exercises',\r\n  'olympic weightlifting': 'Technical barbell lifts (snatch, clean & jerk)',\r\n};\r\n\r\n/**\r\n * Equipment categories\r\n */\r\nexport const EQUIPMENT_CATEGORIES = {\r\n  FREE_WEIGHTS: ['barbell', 'dumbbell', 'kettlebells'],\r\n  MACHINES: ['machine', 'cable'],\r\n  BODYWEIGHT: ['body only'],\r\n  ACCESSORIES: ['bands', 'medicine ball', 'exercise ball', 'foam roll'],\r\n  SPECIALTY: ['e-z curl bar', 'other'],\r\n};\r\n","/**\r\n * Exercise data validation and formatting utilities\r\n */\r\n\r\nimport {\r\n  REQUIRED_EXERCISE_FIELDS,\r\n  DIFFICULTY_MAPPING,\r\n  EQUIPMENT_CATEGORIES,\r\n} from '../constants/exercise.constants';\r\n\r\n/**\r\n * Validates an exercise object against required fields\r\n * @param {Object} exercise - Exercise object to validate\r\n * @returns {Object} Validation result with isValid flag and errors array\r\n */\r\nexport const validateExercise = (exercise) => {\r\n  const errors = [];\r\n\r\n  if (!exercise || typeof exercise !== 'object') {\r\n    return { isValid: false, errors: ['Exercise must be an object'] };\r\n  }\r\n\r\n  // Check required fields\r\n  REQUIRED_EXERCISE_FIELDS.forEach((field) => {\r\n    if (!exercise[field]) {\r\n      errors.push(`Missing required field: ${field}`);\r\n    } else if (Array.isArray(exercise[field]) && exercise[field].length === 0) {\r\n      errors.push(`Field ${field} cannot be empty array`);\r\n    }\r\n  });\r\n\r\n  // Validate specific field formats\r\n  if (exercise.primaryMuscles && !Array.isArray(exercise.primaryMuscles)) {\r\n    errors.push('primaryMuscles must be an array');\r\n  }\r\n\r\n  if (exercise.secondaryMuscles && !Array.isArray(exercise.secondaryMuscles)) {\r\n    errors.push('secondaryMuscles must be an array');\r\n  }\r\n\r\n  if (exercise.images && !Array.isArray(exercise.images)) {\r\n    errors.push('images must be an array');\r\n  }\r\n\r\n  if (exercise.instructions && !Array.isArray(exercise.instructions)) {\r\n    errors.push('instructions must be an array');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n};\r\n\r\n/**\r\n * Formats exercise name for display\r\n * @param {string} name - Raw exercise name\r\n * @returns {string} Formatted exercise name\r\n */\r\nexport const formatExerciseName = (name) => {\r\n  if (!name) return '';\r\n\r\n  return name\r\n    .split(' ')\r\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n    .join(' ');\r\n};\r\n\r\n/**\r\n * Truncates exercise description to specified length\r\n * @param {string} description - Exercise description\r\n * @param {number} maxLength - Maximum length (default: 120)\r\n * @returns {string} Truncated description\r\n */\r\nexport const truncateDescription = (description, maxLength = 120) => {\r\n  if (!description) return '';\r\n\r\n  if (description.length <= maxLength) return description;\r\n\r\n  const truncated = description.substring(0, maxLength);\r\n  const lastSpaceIndex = truncated.lastIndexOf(' ');\r\n\r\n  return lastSpaceIndex > 0\r\n    ? truncated.substring(0, lastSpaceIndex) + '...'\r\n    : truncated + '...';\r\n};\r\n\r\n/**\r\n * Gets exercise difficulty order for sorting\r\n * @param {string} difficulty - Difficulty level\r\n * @returns {number} Difficulty order\r\n */\r\nexport const getDifficultyOrder = (difficulty) => {\r\n  if (!difficulty) return 999;\r\n\r\n  const mapping = DIFFICULTY_MAPPING[difficulty.toLowerCase()];\r\n  return mapping ? mapping.order : 999;\r\n};\r\n\r\n/**\r\n * Gets equipment category for an exercise\r\n * @param {string} equipment - Equipment name\r\n * @returns {string} Equipment category\r\n */\r\nexport const getEquipmentCategory = (equipment) => {\r\n  if (!equipment) return 'unknown';\r\n\r\n  const equipmentLower = equipment.toLowerCase();\r\n\r\n  for (const [category, equipmentList] of Object.entries(\r\n    EQUIPMENT_CATEGORIES\r\n  )) {\r\n    if (equipmentList.includes(equipmentLower)) {\r\n      return category.toLowerCase().replace('_', ' ');\r\n    }\r\n  }\r\n\r\n  return 'other';\r\n};\r\n\r\n/**\r\n * Formats muscle groups for display\r\n * @param {Array} muscles - Array of muscle names\r\n * @param {number} maxDisplay - Maximum muscles to display (default: 2)\r\n * @returns {string} Formatted muscle groups string\r\n */\r\nexport const formatMuscleGroups = (muscles, maxDisplay = 2) => {\r\n  if (!muscles || !Array.isArray(muscles)) return '';\r\n\r\n  const formatted = muscles.map(\r\n    (muscle) => muscle.charAt(0).toUpperCase() + muscle.slice(1).toLowerCase()\r\n  );\r\n\r\n  if (formatted.length <= maxDisplay) {\r\n    return formatted.join(', ');\r\n  }\r\n\r\n  const displayed = formatted.slice(0, maxDisplay);\r\n  const remaining = formatted.length - maxDisplay;\r\n\r\n  return `${displayed.join(', ')} +${remaining} more`;\r\n};\r\n\r\n/**\r\n * Gets primary image for an exercise\r\n * @param {Object} exercise - Exercise object\r\n * @returns {string} Primary image URL or placeholder\r\n */\r\nexport const getPrimaryImage = (exercise) => {\r\n  if (\r\n    !exercise ||\r\n    !exercise.images ||\r\n    !Array.isArray(exercise.images) ||\r\n    exercise.images.length === 0\r\n  ) {\r\n    return '/api/placeholder/500/300';\r\n  }\r\n\r\n  return exercise.images[0] || '/api/placeholder/500/300';\r\n};\r\n\r\nexport const getPrepopulatedImage = (exercise) => {\r\n  // If exercise already has images, process them\r\n  if (Array.isArray(exercise.images) && exercise.images.length > 0) {\r\n    return exercise.images.map((image) => {\r\n      if (!image) return image;\r\n      // Only prepend PUBLIC_URL if the image doesn't already have a protocol (http/https)\r\n      if (\r\n        image.startsWith('http://') ||\r\n        image.startsWith('https://') ||\r\n        image.startsWith('/api/')\r\n      ) {\r\n        return image;\r\n      }\r\n      return `${process.env.PUBLIC_URL || ''}${\r\n        image.startsWith('/') ? image : `/${image}`\r\n      }`;\r\n    });\r\n  }\r\n\r\n  // Generate image paths based on exercise name\r\n  if (exercise.name) {\r\n    // Use the exact exercise name as folder name, replacing spaces with underscores\r\n    // This matches the folder structure in public/exercises/\r\n    const exerciseFolderName = exercise.name.replace(/\\s+/g, '_');\r\n    const baseImagePath = `exercises/${exerciseFolderName}`;\r\n\r\n    // Try common image file names found in the exercise folders\r\n    const commonImageNames = ['0.jpg', '1.jpg'];\r\n    const generatedImages = commonImageNames.map((imageName) => {\r\n      return `${process.env.PUBLIC_URL || ''}/${baseImagePath}/${imageName}`;\r\n    });\r\n\r\n    return generatedImages;\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\n/**\r\n * Sanitizes exercise data for safe display\r\n * @param {Object} exercise - Exercise object\r\n * @returns {Object} Sanitized exercise object\r\n */\r\nexport const sanitizeExercise = (exercise) => {\r\n  if (!exercise) return null;\r\n\r\n  return {\r\n    ...exercise,\r\n    name: formatExerciseName(exercise.name),\r\n    description: exercise.description ? exercise.description.trim() : '',\r\n    primaryMuscles: Array.isArray(exercise.primaryMuscles)\r\n      ? exercise.primaryMuscles\r\n      : [],\r\n    secondaryMuscles: Array.isArray(exercise.secondaryMuscles)\r\n      ? exercise.secondaryMuscles\r\n      : [],\r\n    images: getPrepopulatedImage(exercise),\r\n    instructions: Array.isArray(exercise.instructions)\r\n      ? exercise.instructions\r\n      : [],\r\n    equipment: exercise.equipment || 'body only',\r\n    level: exercise.level || 'beginner',\r\n    category: exercise.category || 'strength',\r\n    force: exercise.force || null,\r\n    mechanic: exercise.mechanic || null,\r\n  };\r\n};\r\n\r\n/**\r\n * Sorts exercises by specified criteria\r\n * @param {Array} exercises - Array of exercises\r\n * @param {string} sortBy - Sort criteria ('name', 'difficulty', 'muscle', etc.)\r\n * @param {string} sortOrder - Sort order ('asc' or 'desc')\r\n * @returns {Array} Sorted exercises array\r\n */\r\nexport const sortExercises = (\r\n  exercises,\r\n  sortBy = 'name',\r\n  sortOrder = 'asc'\r\n) => {\r\n  if (!exercises || !Array.isArray(exercises)) return [];\r\n\r\n  const sortedExercises = [...exercises].sort((a, b) => {\r\n    let aValue, bValue;\r\n\r\n    switch (sortBy) {\r\n      case 'name':\r\n        aValue = a.name || '';\r\n        bValue = b.name || '';\r\n        break;\r\n      case 'difficulty':\r\n        aValue = getDifficultyOrder(a.level);\r\n        bValue = getDifficultyOrder(b.level);\r\n        break;\r\n      case 'muscle':\r\n        aValue = a.primaryMuscles?.[0] || '';\r\n        bValue = b.primaryMuscles?.[0] || '';\r\n        break;\r\n      case 'equipment':\r\n        aValue = a.equipment || '';\r\n        bValue = b.equipment || '';\r\n        break;\r\n      default:\r\n        aValue = a[sortBy] || '';\r\n        bValue = b[sortBy] || '';\r\n    }\r\n\r\n    if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n      return sortOrder === 'asc'\r\n        ? aValue.localeCompare(bValue)\r\n        : bValue.localeCompare(aValue);\r\n    }\r\n\r\n    return sortOrder === 'asc' ? aValue - bValue : bValue - aValue;\r\n  });\r\n\r\n  return sortedExercises;\r\n};\r\n","/**\r\n * Exercise Card Image Component\r\n * Displays the exercise image with lazy loading and error handling\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport { CardMedia, Box, CircularProgress, Skeleton } from '@mui/material';\r\nimport { CARD_CONFIG } from '../../constants/ui.constants';\r\nimport { getPrimaryImage } from '../../utils/exerciseUtils';\r\n\r\n/**\r\n * ExerciseImage component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object\r\n * @param {string} props.alt - Alt text for image\r\n * @param {number|string} props.height - Image height (default: 200)\r\n * @returns {JSX.Element} ExerciseImage component\r\n */\r\nconst ExerciseImage = ({ exercise, alt, height = CARD_CONFIG.IMAGE_HEIGHT }) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n\r\n  const imageUrl = getPrimaryImage(exercise);\r\n  const altText = alt || exercise?.name || 'Exercise image';\r\n\r\n  const handleImageLoad = () => {\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleImageError = () => {\r\n    setLoading(false);\r\n    setError(true);\r\n  };\r\n\r\n  if (error) {\r\n    return (\r\n      <Skeleton\r\n        variant=\"rectangular\"\r\n        width=\"100%\"\r\n        height={height}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ position: 'relative', height }}>\r\n      {loading && (\r\n        <Box\r\n          sx={{\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0,\r\n            right: 0,\r\n            bottom: 0,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: 'grey.50',\r\n            zIndex: 1,\r\n          }}\r\n        >\r\n          <CircularProgress size={24} />\r\n        </Box>\r\n      )}\r\n      \r\n      <CardMedia\r\n        component=\"img\"\r\n        height={height}\r\n        image={imageUrl}\r\n        alt={altText}\r\n        loading=\"lazy\"\r\n        onLoad={handleImageLoad}\r\n        onError={handleImageError}\r\n        sx={{\r\n          objectFit: 'cover',\r\n          opacity: loading ? 0 : 1,\r\n          transition: 'opacity 0.3s ease-in-out',\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseImage);\r\n","/**\r\n * Exercise Attribute Chips Component\r\n * Displays exercise attributes as colored chips with tooltips\r\n */\r\n\r\nimport React from 'react';\r\nimport { Box, Chip, Typography } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\nimport Tooltip, { tooltipClasses } from '@mui/material/Tooltip';\r\nimport { CHIP_COLORS, TOOLTIP_CONFIG } from '../../constants/ui.constants';\r\nimport { formatMuscleGroups } from '../../utils/exerciseUtils';\r\n\r\n/**\r\n * Custom styled tooltip component\r\n */\r\nconst HtmlTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    maxWidth: TOOLTIP_CONFIG.MAX_WIDTH,\r\n    fontSize: theme.typography.pxToRem(TOOLTIP_CONFIG.FONT_SIZE),\r\n  },\r\n}));\r\n\r\n/**\r\n * Individual attribute chip component\r\n */\r\nconst AttributeChip = ({ label, color, tooltip, size = 'small' }) => {\r\n  if (!label || label === '-') {\r\n    return null;\r\n  }\r\n\r\n  const chip = (\r\n    <Chip\r\n      label={label}\r\n      color={color}\r\n      size={size}\r\n      sx={{ textTransform: 'capitalize' }}\r\n    />\r\n  );\r\n\r\n  if (!tooltip) {\r\n    return chip;\r\n  }\r\n\r\n  return (\r\n    <Tooltip title={tooltip} arrow>\r\n      {chip}\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\n/**\r\n * Muscle groups chip with enhanced tooltip\r\n */\r\nconst MuscleChip = ({ exercise }) => {\r\n  if (!exercise?.primaryMuscles?.length) {\r\n    return null;\r\n  }\r\n\r\n  const primaryMuscle = exercise.primaryMuscles[0];\r\n  const secondaryMuscles = exercise.secondaryMuscles || [];\r\n\r\n  const tooltip = (\r\n    <React.Fragment>\r\n      <Typography color=\"inherit\" variant=\"subtitle2\">\r\n        Muscle Groups Involved\r\n      </Typography>\r\n      <Box sx={{ mt: 0.5 }}>\r\n        <Typography variant=\"caption\">\r\n          <strong>Primary: </strong>\r\n          {formatMuscleGroups(exercise.primaryMuscles)}\r\n        </Typography>\r\n        {secondaryMuscles.length > 0 && (\r\n          <Typography variant=\"caption\" display=\"block\">\r\n            <strong>Secondary: </strong>\r\n            {formatMuscleGroups(secondaryMuscles)}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <HtmlTooltip title={tooltip}>\r\n      <Chip\r\n        label={primaryMuscle}\r\n        color={CHIP_COLORS.PRIMARY_MUSCLE}\r\n        size=\"small\"\r\n        sx={{ textTransform: 'capitalize' }}\r\n      />\r\n    </HtmlTooltip>\r\n  );\r\n};\r\n\r\n/**\r\n * ExerciseChips component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object\r\n * @param {boolean} props.showAll - Whether to show all chips (default: true)\r\n * @param {Array} props.visibleChips - Array of chip types to show (default: all)\r\n * @returns {JSX.Element} ExerciseChips component\r\n */\r\nconst ExerciseChips = ({ \r\n  exercise, \r\n  showAll = true, \r\n  visibleChips = ['muscle', 'equipment', 'level', 'category', 'force', 'mechanic'] \r\n}) => {\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const chipConfig = [\r\n    {\r\n      key: 'muscle',\r\n      component: <MuscleChip exercise={exercise} />,\r\n    },\r\n    {\r\n      key: 'equipment',\r\n      component: (\r\n        <AttributeChip\r\n          label={exercise.equipment}\r\n          color={CHIP_COLORS.EQUIPMENT}\r\n          tooltip=\"Equipment used\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'level',\r\n      component: (\r\n        <AttributeChip\r\n          label={exercise.level}\r\n          color={CHIP_COLORS.LEVEL}\r\n          tooltip=\"Difficulty level\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'category',\r\n      component: (\r\n        <AttributeChip\r\n          label={exercise.category}\r\n          color={CHIP_COLORS.CATEGORY}\r\n          tooltip=\"Exercise category\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'force',\r\n      component: (\r\n        <AttributeChip\r\n          label={exercise.force}\r\n          color={CHIP_COLORS.FORCE}\r\n          tooltip=\"Force type\"\r\n        />\r\n      ),\r\n    },\r\n    {\r\n      key: 'mechanic',\r\n      component: (\r\n        <AttributeChip\r\n          label={exercise.mechanic}\r\n          color={CHIP_COLORS.MECHANIC}\r\n          tooltip=\"Movement mechanic\"\r\n        />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const displayChips = showAll \r\n    ? chipConfig \r\n    : chipConfig.filter(chip => visibleChips.includes(chip.key));\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap' }}>\r\n      {displayChips.map(({ key, component }) => (\r\n        <React.Fragment key={key}>\r\n          {component}\r\n        </React.Fragment>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseChips);\r\n","/**\r\n * Exercise Content Component\r\n * Displays exercise name, description, and metadata\r\n */\r\n\r\nimport React from 'react';\r\nimport { CardContent, Typography, Box } from '@mui/material';\r\nimport { formatExerciseName, truncateDescription } from '../../utils/exerciseUtils';\r\nimport { TOOLTIP_CONFIG } from '../../constants/ui.constants';\r\nimport ExerciseChips from './ExerciseChips';\r\n\r\n/**\r\n * ExerciseContent component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object\r\n * @param {number} props.descriptionLength - Max description length\r\n * @param {boolean} props.showChips - Whether to show attribute chips\r\n * @returns {JSX.Element} ExerciseContent component\r\n */\r\nconst ExerciseContent = ({ \r\n  exercise, \r\n  descriptionLength = TOOLTIP_CONFIG.DESCRIPTION_MAX_LENGTH,\r\n  showChips = true \r\n}) => {\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const formattedName = formatExerciseName(exercise.name);\r\n  const truncatedDescription = truncateDescription(exercise.description, descriptionLength);\r\n\r\n  return (\r\n    <CardContent sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\r\n      {/* Exercise Name */}\r\n      <Typography \r\n        gutterBottom \r\n        variant=\"h5\" \r\n        component=\"h2\"\r\n        sx={{\r\n          fontWeight: 600,\r\n          lineHeight: 1.3,\r\n          mb: showChips ? 2 : 1,\r\n        }}\r\n      >\r\n        {formattedName}\r\n      </Typography>\r\n\r\n      {/* Exercise Attribute Chips */}\r\n      {showChips && (\r\n        <ExerciseChips exercise={exercise} />\r\n      )}\r\n\r\n      {/* Exercise Description */}\r\n      {truncatedDescription && (\r\n        <Box sx={{ mt: 'auto' }}>\r\n          <Typography \r\n            variant=\"body2\" \r\n            color=\"text.secondary\"\r\n            sx={{\r\n              lineHeight: 1.5,\r\n              display: '-webkit-box',\r\n              WebkitLineClamp: 3,\r\n              WebkitBoxOrient: 'vertical',\r\n              overflow: 'hidden',\r\n            }}\r\n          >\r\n            {truncatedDescription}\r\n          </Typography>\r\n        </Box>\r\n      )}\r\n\r\n      {/* Exercise Instructions Count */}\r\n      {exercise.instructions && Array.isArray(exercise.instructions) && exercise.instructions.length > 0 && (\r\n        <Typography \r\n          variant=\"caption\" \r\n          color=\"text.secondary\"\r\n          sx={{ mt: 1, fontStyle: 'italic' }}\r\n        >\r\n          {exercise.instructions.length} step{exercise.instructions.length !== 1 ? 's' : ''} to complete\r\n        </Typography>\r\n      )}\r\n    </CardContent>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseContent);\r\n","/**\r\n * Exercise Actions Component\r\n * Displays action buttons for the exercise card\r\n */\r\n\r\nimport React from 'react';\r\nimport { Box, Button, IconButton, Tooltip } from '@mui/material';\r\nimport { \r\n  Visibility as ViewIcon,\r\n  Favorite as FavoriteIcon,\r\n  FavoriteBorder as FavoriteBorderIcon,\r\n  Share as ShareIcon \r\n} from '@mui/icons-material';\r\n\r\n/**\r\n * ExerciseActions component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object\r\n * @param {Function} props.onViewDetails - Handler for view details action\r\n * @param {Function} props.onToggleFavorite - Handler for favorite toggle action\r\n * @param {Function} props.onShare - Handler for share action\r\n * @param {boolean} props.isFavorite - Whether exercise is favorited\r\n * @param {boolean} props.showFavorite - Whether to show favorite button\r\n * @param {boolean} props.showShare - Whether to show share button\r\n * @param {string} props.variant - Button variant ('contained', 'outlined', 'text')\r\n * @returns {JSX.Element} ExerciseActions component\r\n */\r\nconst ExerciseActions = ({ \r\n  exercise,\r\n  onViewDetails,\r\n  onToggleFavorite,\r\n  onShare,\r\n  isFavorite = false,\r\n  showFavorite = false,\r\n  showShare = false,\r\n  variant = 'contained'\r\n}) => {\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const handleViewDetails = () => {\r\n    if (onViewDetails && typeof onViewDetails === 'function') {\r\n      onViewDetails(exercise);\r\n    }\r\n  };\r\n\r\n  const handleToggleFavorite = (event) => {\r\n    event.stopPropagation();\r\n    if (onToggleFavorite && typeof onToggleFavorite === 'function') {\r\n      onToggleFavorite(exercise);\r\n    }\r\n  };\r\n\r\n  const handleShare = (event) => {\r\n    event.stopPropagation();\r\n    if (onShare && typeof onShare === 'function') {\r\n      onShare(exercise);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ p: 2, pt: 0, display: 'flex', gap: 1, alignItems: 'center' }}>\r\n      {/* Main Action Button */}\r\n      <Button\r\n        variant={variant}\r\n        fullWidth\r\n        onClick={handleViewDetails}\r\n        startIcon={<ViewIcon />}\r\n        sx={{\r\n          textTransform: 'none',\r\n          fontWeight: 500,\r\n        }}\r\n      >\r\n        View Details\r\n      </Button>\r\n\r\n      {/* Additional Action Buttons */}\r\n      <Box sx={{ display: 'flex', gap: 0.5 }}>\r\n        {/* Favorite Button */}\r\n        {showFavorite && (\r\n          <Tooltip title={isFavorite ? 'Remove from favorites' : 'Add to favorites'}>\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={handleToggleFavorite}\r\n              color={isFavorite ? 'error' : 'default'}\r\n              sx={{\r\n                '&:hover': {\r\n                  backgroundColor: isFavorite ? 'error.light' : 'action.hover',\r\n                  opacity: 0.1,\r\n                }\r\n              }}\r\n            >\r\n              {isFavorite ? <FavoriteIcon /> : <FavoriteBorderIcon />}\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n\r\n        {/* Share Button */}\r\n        {showShare && (\r\n          <Tooltip title=\"Share exercise\">\r\n            <IconButton\r\n              size=\"small\"\r\n              onClick={handleShare}\r\n              color=\"default\"\r\n            >\r\n              <ShareIcon />\r\n            </IconButton>\r\n          </Tooltip>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseActions);\r\n","/**\r\n * Exercise Card Component\r\n * Displays an individual exercise in a card format with image, details, and actions\r\n *\r\n * This component has been refactored to use smaller, reusable components:\r\n * - ExerciseImage: Handles image display with loading and error states\r\n * - ExerciseContent: Displays exercise name, chips, and description\r\n * - ExerciseActions: Handles action buttons and interactions\r\n */\r\n\r\nimport React from 'react';\r\nimport { Grid, Card } from '@mui/material';\r\nimport { CARD_CONFIG } from '../../constants/ui.constants';\r\nimport { sanitizeExercise } from '../../utils/exerciseUtils';\r\nimport ExerciseImage from './ExerciseImage';\r\nimport ExerciseContent from './ExerciseContent';\r\nimport ExerciseActions from './ExerciseActions';\r\n\r\n/**\r\n * Exercise Card Component\r\n * @param {Object} props - Component props\r\n * @param {Object} props.exercise - Exercise object with all exercise data\r\n * @param {Function} props.onOpenDetails - Handler for opening exercise details\r\n * @param {Function} props.onToggleFavorite - Handler for toggling favorite status (optional)\r\n * @param {Function} props.onShare - Handler for sharing exercise (optional)\r\n * @param {boolean} props.isFavorite - Whether this exercise is marked as favorite (optional)\r\n * @param {boolean} props.showFavorite - Whether to show favorite button (optional, default: false)\r\n * @param {boolean} props.showShare - Whether to show share button (optional, default: false)\r\n * @param {Object} props.gridProps - Additional Grid component props (optional)\r\n * @param {Object} props.cardProps - Additional Card component props (optional)\r\n * @returns {JSX.Element} Exercise card component\r\n */\r\nfunction Exercise(props) {\r\n  const {\r\n    exercise: rawExercise,\r\n    onOpenDetails,\r\n    onToggleFavorite,\r\n    onShare,\r\n    isFavorite = false,\r\n    showFavorite = false,\r\n    showShare = false,\r\n    gridProps = {},\r\n    cardProps = {},\r\n  } = props;\r\n\r\n  // Sanitize exercise data to ensure consistent format\r\n  const exercise = sanitizeExercise(rawExercise);\r\n\r\n  if (!exercise) {\r\n    return null;\r\n  }\r\n\r\n  const defaultGridProps = {\r\n    size: { xs: 12, sm: 6, md: 4 },\r\n  };\r\n\r\n  const defaultCardProps = {\r\n    sx: {\r\n      height: '100%',\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n      transition: `transform ${CARD_CONFIG.TRANSITION_DURATION}, box-shadow ${CARD_CONFIG.TRANSITION_DURATION}`,\r\n      cursor: 'pointer',\r\n      '&:hover': {\r\n        transform: CARD_CONFIG.HOVER_TRANSFORM,\r\n        boxShadow: CARD_CONFIG.HOVER_BOX_SHADOW,\r\n      },\r\n    },\r\n    onClick: () => onOpenDetails && onOpenDetails(exercise),\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      {...defaultGridProps}\r\n      {...gridProps}\r\n      key={exercise.name || exercise.id}\r\n    >\r\n      <Card {...defaultCardProps} {...cardProps}>\r\n        {/* Exercise Image */}\r\n        <ExerciseImage exercise={exercise} alt={exercise.name} />\r\n\r\n        {/* Exercise Content (Name, Chips, Description) */}\r\n        <ExerciseContent exercise={exercise} />\r\n\r\n        {/* Exercise Actions (Buttons) */}\r\n        <ExerciseActions\r\n          exercise={exercise}\r\n          onViewDetails={onOpenDetails}\r\n          onToggleFavorite={onToggleFavorite}\r\n          onShare={onShare}\r\n          isFavorite={isFavorite}\r\n          showFavorite={showFavorite}\r\n          showShare={showShare}\r\n        />\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default React.memo(Exercise);\r\n","import React from 'react';\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  Paper,\r\n  Pagination,\r\n  Box,\r\n} from '@mui/material';\r\nimport Exercise from './Exercise';\r\n\r\nfunction ExerciseList(props) {\r\n  const {\r\n    exercises,\r\n    totalPages,\r\n    page,\r\n    onPageChange,\r\n    openExerciseDetails,\r\n    clearFilters,\r\n  } = props;\r\n\r\n  return (\r\n    <Box>\r\n      {/* Exercise Grid */}\r\n      <Grid container spacing={3}>\r\n        {exercises.length > 0 ? (\r\n          exercises.map((exercise) => (\r\n            <Exercise\r\n              key={exercise.name}\r\n              exercise={exercise}\r\n              onOpenDetails={openExerciseDetails}\r\n            />\r\n          ))\r\n        ) : (\r\n          <Grid size={{ xs: 12 }}>\r\n            <Paper sx={{ p: 3, textAlign: 'center' }}>\r\n              <Typography variant='h6'>\r\n                No exercises found matching your filters.\r\n              </Typography>\r\n              <Button variant='outlined' sx={{ mt: 2 }} onClick={clearFilters}>\r\n                Clear Filters\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n\r\n      {/* Bottom Pagination */}\r\n      {exercises.length > 0 && totalPages > 1 && (\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            mt: 4,\r\n            mb: 2,\r\n          }}\r\n        >\r\n          <Pagination\r\n            count={totalPages}\r\n            page={page}\r\n            onChange={onPageChange}\r\n            color='primary'\r\n            size='large'\r\n            showFirstButton\r\n            showLastButton\r\n            sx={{\r\n              '& .MuiPagination-ul': {\r\n                flexWrap: 'wrap',\r\n                justifyContent: 'center',\r\n              },\r\n            }}\r\n          />\r\n        </Box>\r\n      )}\r\n\r\n      {/* Quick Jump Options for Large Datasets */}\r\n      {totalPages > 10 && (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2, mb: 2 }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              gap: 1,\r\n              flexWrap: 'wrap',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <Typography\r\n              variant='caption'\r\n              color='text.secondary'\r\n              sx={{ mr: 1, alignSelf: 'center' }}\r\n            >\r\n              Quick jump:\r\n            </Typography>\r\n            {[\r\n              1,\r\n              Math.floor(totalPages * 0.25),\r\n              Math.floor(totalPages * 0.5),\r\n              Math.floor(totalPages * 0.75),\r\n              totalPages,\r\n            ]\r\n              .filter(\r\n                (pageNum, index, arr) =>\r\n                  pageNum > 0 &&\r\n                  pageNum <= totalPages &&\r\n                  arr.indexOf(pageNum) === index\r\n              )\r\n              .map((pageNum) => (\r\n                <Button\r\n                  key={pageNum}\r\n                  size='small'\r\n                  variant={page === pageNum ? 'contained' : 'outlined'}\r\n                  onClick={() => onPageChange(null, pageNum)}\r\n                  sx={{ minWidth: 'auto', px: 1 }}\r\n                >\r\n                  {pageNum}\r\n                </Button>\r\n              ))}\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default React.memo(ExerciseList);\r\n","import { Box, Chip, Typography } from '@mui/material';\r\nimport React from 'react';\r\n\r\nfunction ExerciseListInfo(props) {\r\n  const { totalExercises, page, pageSize, totalUnfilteredCount } = props;\r\n  const totalPages = Math.ceil(totalExercises / pageSize);\r\n  const startIndex = (page - 1) * pageSize;\r\n  const endIndex = Math.min(startIndex + pageSize, totalExercises);\r\n\r\n  const isFiltered =\r\n    totalUnfilteredCount && totalExercises !== totalUnfilteredCount;\r\n\r\n  return (\r\n    <Box\r\n      sx={{ display: 'flex', alignItems: 'center', gap: 2, flexWrap: 'wrap' }}\r\n    >\r\n      <Typography variant='body1' color='text.secondary'>\r\n        {isFiltered ? (\r\n          <>\r\n            Showing {startIndex + 1}-{endIndex} of {totalExercises} filtered\r\n            exercises\r\n            <Typography\r\n              component='span'\r\n              variant='caption'\r\n              sx={{ ml: 1, opacity: 0.7 }}\r\n            >\r\n              (out of {totalUnfilteredCount} total)\r\n            </Typography>\r\n          </>\r\n        ) : (\r\n          `Showing ${startIndex + 1}-${endIndex} of ${totalExercises} exercises`\r\n        )}\r\n      </Typography>\r\n\r\n      <Chip\r\n        label={`Page ${page} of ${totalPages}`}\r\n        variant='outlined'\r\n        size='small'\r\n        color='primary'\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default ExerciseListInfo;\r\n","/**\r\n * Exercise App Component (Refactored with Context)\r\n * Main container for the exercises feature using ExercisesContext for state management\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Drawer,\r\n  useMediaQuery,\r\n  useTheme,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from '@mui/material';\r\n\r\nimport { useExercises } from '../context';\r\nimport ExerciseDetail from './ExerciseDetail';\r\nimport SearchFilters from './SearchFilters';\r\nimport ExerciseList from './ExerciseList';\r\nimport ExerciseListInfo from './ExerciseListInfo';\r\n\r\n// Main App Component\r\nconst ExerciseApp = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n  // Get all state and functions from context\r\n  const {\r\n    // Filter state\r\n    filters,\r\n    filteredExercises,\r\n\r\n    // Filter actions\r\n    handleFilterChange,\r\n    handleSearch,\r\n    clearFilters,\r\n    handleClearSpecificFilter,\r\n\r\n    // Exercise detail state\r\n    selectedExercise,\r\n    detailsOpen,\r\n    activeStep,\r\n\r\n    // Exercise detail actions\r\n    openExerciseDetails,\r\n    closeExerciseDetails,\r\n    handleNext,\r\n    handleBack,\r\n\r\n    // Mobile UI state\r\n    mobileFiltersOpen,\r\n    openMobileFilters,\r\n    closeMobileFilters,\r\n\r\n    // Data\r\n    totalExercises,\r\n  } = useExercises();\r\n\r\n  // Pagination state (moved from ExerciseList)\r\n  const [page, setPage] = useState(1);\r\n  const [exercisesPerPage, setExercisesPerPage] = useState(12);\r\n\r\n  // Calculate pagination values\r\n  const totalFilteredExercises = filteredExercises.length;\r\n  const totalPages = Math.ceil(totalFilteredExercises / exercisesPerPage);\r\n  const startIndex = (page - 1) * exercisesPerPage;\r\n  const endIndex = Math.min(\r\n    startIndex + exercisesPerPage,\r\n    totalFilteredExercises\r\n  );\r\n\r\n  // Get exercises for current page\r\n  const paginatedExercises = useMemo(() => {\r\n    return filteredExercises.slice(startIndex, endIndex);\r\n  }, [filteredExercises, startIndex, endIndex]);\r\n\r\n  // Handle pagination changes\r\n  const handlePageChange = (event, newPage) => {\r\n    setPage(newPage);\r\n    // Scroll to top of exercise list\r\n    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n  };\r\n\r\n  const handleExercisesPerPageChange = (event) => {\r\n    setExercisesPerPage(event.target.value);\r\n    setPage(1); // Reset to first page when changing page size\r\n  };\r\n\r\n  // Reset page when exercises change (due to filters)\r\n  React.useEffect(() => {\r\n    setPage(1);\r\n  }, [filteredExercises.length]);\r\n\r\n  const exercisesPerPageOptions = [6, 12, 24, 48, 96];\r\n  return (\r\n    <Box sx={{ display: 'flex', width: '100%', height: '100vh' }}>\r\n      {/* Left Sidebar - Search Filters */}\r\n      <Box\r\n        sx={{\r\n          width: { xs: '100%', md: '320px' },\r\n          minWidth: { md: '320px' },\r\n          borderRight: { md: 1 },\r\n          borderColor: { md: 'divider' },\r\n          display: { xs: 'none', md: 'block' },\r\n          overflow: 'auto',\r\n        }}\r\n      >\r\n        <Box sx={{ p: 2 }}>\r\n          <SearchFilters\r\n            filters={filters}\r\n            handleSearch={handleSearch}\r\n            handleFilterChange={handleFilterChange}\r\n            clearFilters={clearFilters}\r\n            onClearSpecificFilter={handleClearSpecificFilter}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Mobile Drawer for Filters */}\r\n      <Drawer\r\n        variant='temporary'\r\n        open={mobileFiltersOpen}\r\n        onClose={closeMobileFilters}\r\n        ModalProps={{\r\n          keepMounted: true, // Better open performance on mobile\r\n        }}\r\n        sx={{\r\n          display: { xs: 'block', md: 'none' },\r\n          '& .MuiDrawer-paper': {\r\n            width: '280px',\r\n            boxSizing: 'border-box',\r\n          },\r\n        }}\r\n      >\r\n        <Box sx={{ p: 2 }}>\r\n          <SearchFilters\r\n            filters={filters}\r\n            handleSearch={handleSearch}\r\n            handleFilterChange={handleFilterChange}\r\n            clearFilters={clearFilters}\r\n            onClearSpecificFilter={handleClearSpecificFilter}\r\n          />\r\n        </Box>\r\n      </Drawer>\r\n\r\n      {/* Main Content Area - Exercise List */}\r\n      <Box\r\n        sx={{\r\n          flexGrow: 1,\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          width: { xs: '100%', md: 'calc(100% - 320px)' },\r\n        }}\r\n      >\r\n        {/* Header with Exercise Info */}\r\n        <Box\r\n          sx={{\r\n            p: 2,\r\n            borderBottom: 1,\r\n            borderColor: 'divider',\r\n            backgroundColor: 'background.paper',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n            flexWrap: 'wrap',\r\n            gap: 2,\r\n          }}\r\n        >\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 3,\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            <Typography component='h1' variant='h5' sx={{ fontWeight: 600 }}>\r\n              Exercise Library\r\n            </Typography>\r\n\r\n            {/* Exercise List Info */}\r\n            {totalFilteredExercises > 0 && (\r\n              <ExerciseListInfo\r\n                totalExercises={totalFilteredExercises}\r\n                page={page}\r\n                pageSize={exercisesPerPage}\r\n                totalUnfilteredCount={totalExercises}\r\n              />\r\n            )}\r\n          </Box>\r\n\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 2,\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            {/* Exercises Per Page Selector */}\r\n            {totalFilteredExercises > 0 && (\r\n              <FormControl size='small' sx={{ minWidth: 120 }}>\r\n                <InputLabel>Per page</InputLabel>\r\n                <Select\r\n                  value={exercisesPerPage}\r\n                  onChange={handleExercisesPerPageChange}\r\n                  label='Per page'\r\n                >\r\n                  {exercisesPerPageOptions.map((option) => (\r\n                    <MenuItem key={option} value={option}>\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            )}\r\n\r\n            {/* Mobile Filter Toggle Button */}\r\n            {isMobile && (\r\n              <Box\r\n                component='button'\r\n                onClick={openMobileFilters}\r\n                sx={{\r\n                  display: { xs: 'flex', md: 'none' },\r\n                  alignItems: 'center',\r\n                  gap: 1,\r\n                  px: 2,\r\n                  py: 1,\r\n                  border: 1,\r\n                  borderColor: 'divider',\r\n                  borderRadius: 1,\r\n                  cursor: 'pointer',\r\n                }}\r\n              >\r\n                <Typography variant='body2'>Filters</Typography>\r\n              </Box>\r\n            )}\r\n          </Box>\r\n        </Box>\r\n\r\n        {/* Exercise List Container */}\r\n        <Box\r\n          sx={{\r\n            flexGrow: 1,\r\n            p: 2,\r\n          }}\r\n        >\r\n          <ExerciseList\r\n            exercises={paginatedExercises}\r\n            totalExercises={totalFilteredExercises}\r\n            totalPages={totalPages}\r\n            page={page}\r\n            exercisesPerPage={exercisesPerPage}\r\n            onPageChange={handlePageChange}\r\n            openExerciseDetails={openExerciseDetails}\r\n            clearFilters={clearFilters}\r\n          />\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Exercise Detail Modal */}\r\n      <ExerciseDetail\r\n        selectedExercise={selectedExercise}\r\n        open={detailsOpen}\r\n        onClose={closeExerciseDetails}\r\n        activeStep={activeStep}\r\n        handleNext={handleNext}\r\n        handleBack={handleBack}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default React.memo(ExerciseApp);\r\n","/**\r\n * Pagination utilities\r\n * Provides functions for handling pagination logic\r\n */\r\n\r\nimport { PAGINATION_CONFIG } from '../constants/ui.constants';\r\n\r\n/**\r\n * Calculates pagination information\r\n * @param {number} totalItems - Total number of items\r\n * @param {number} currentPage - Current page number (1-based)\r\n * @param {number} pageSize - Number of items per page\r\n * @returns {Object} Pagination information object\r\n */\r\nexport const calculatePagination = (totalItems, currentPage, pageSize) => {\r\n  const totalPages = Math.ceil(totalItems / pageSize);\r\n  const startIndex = (currentPage - 1) * pageSize;\r\n  const endIndex = Math.min(startIndex + pageSize, totalItems);\r\n\r\n  return {\r\n    totalPages,\r\n    startIndex,\r\n    endIndex,\r\n    currentPage,\r\n    pageSize,\r\n    totalItems,\r\n    hasNextPage: currentPage < totalPages,\r\n    hasPrevPage: currentPage > 1,\r\n  };\r\n};\r\n\r\n/**\r\n * Gets paginated items from an array\r\n * @param {Array} items - Array of items to paginate\r\n * @param {number} currentPage - Current page number (1-based)\r\n * @param {number} pageSize - Number of items per page\r\n * @returns {Array} Paginated items array\r\n */\r\nexport const getPaginatedItems = (items, currentPage, pageSize) => {\r\n  if (!items || !Array.isArray(items)) {\r\n    return [];\r\n  }\r\n\r\n  const startIndex = (currentPage - 1) * pageSize;\r\n  const endIndex = startIndex + pageSize;\r\n\r\n  return items.slice(startIndex, endIndex);\r\n};\r\n\r\n/**\r\n * Validates pagination parameters\r\n * @param {number} currentPage - Current page number\r\n * @param {number} pageSize - Number of items per page\r\n * @param {number} totalItems - Total number of items\r\n * @returns {Object} Validation result with corrected values\r\n */\r\nexport const validatePaginationParams = (currentPage, pageSize, totalItems) => {\r\n  // Ensure pageSize is valid\r\n  const validPageSize = PAGINATION_CONFIG.AVAILABLE_PAGE_SIZES.includes(\r\n    pageSize\r\n  )\r\n    ? pageSize\r\n    : PAGINATION_CONFIG.DEFAULT_PAGE_SIZE;\r\n\r\n  // Calculate max page\r\n  const maxPage = Math.max(1, Math.ceil(totalItems / validPageSize));\r\n\r\n  // Ensure currentPage is within valid range\r\n  const validCurrentPage = Math.max(1, Math.min(currentPage, maxPage));\r\n\r\n  return {\r\n    currentPage: validCurrentPage,\r\n    pageSize: validPageSize,\r\n    isValid: currentPage === validCurrentPage && pageSize === validPageSize,\r\n  };\r\n};\r\n\r\n/**\r\n * Generates pagination display text\r\n * @param {Object} paginationInfo - Pagination information object\r\n * @param {boolean} isFiltered - Whether the items are filtered\r\n * @param {number} totalUnfilteredItems - Total unfiltered items count\r\n * @returns {string} Pagination display text\r\n */\r\nexport const getPaginationDisplayText = (\r\n  paginationInfo,\r\n  isFiltered = false,\r\n  totalUnfilteredItems = 0\r\n) => {\r\n  const { startIndex, endIndex, totalItems } = paginationInfo;\r\n\r\n  if (isFiltered && totalUnfilteredItems > 0) {\r\n    return `Showing ${\r\n      startIndex + 1\r\n    }-${endIndex} of ${totalItems} filtered exercises (out of ${totalUnfilteredItems} total)`;\r\n  }\r\n\r\n  return `Showing ${startIndex + 1}-${endIndex} of ${totalItems} exercises`;\r\n};\r\n\r\n/**\r\n * Generates page navigation options\r\n * @param {number} currentPage - Current page number\r\n * @param {number} totalPages - Total number of pages\r\n * @param {number} maxVisible - Maximum number of visible page options\r\n * @returns {Array} Array of page numbers to display\r\n */\r\nexport const getPageNavigation = (currentPage, totalPages, maxVisible = 5) => {\r\n  if (totalPages <= maxVisible) {\r\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\r\n  }\r\n\r\n  const half = Math.floor(maxVisible / 2);\r\n  let start = Math.max(1, currentPage - half);\r\n  let end = Math.min(totalPages, start + maxVisible - 1);\r\n\r\n  // Adjust start if we're near the end\r\n  if (end - start + 1 < maxVisible) {\r\n    start = Math.max(1, end - maxVisible + 1);\r\n  }\r\n\r\n  return Array.from({ length: end - start + 1 }, (_, i) => start + i);\r\n};\r\n\r\n/**\r\n * Calculates optimal page size based on viewport and content\r\n * @param {number} viewportHeight - Viewport height in pixels\r\n * @param {number} itemHeight - Estimated item height in pixels\r\n * @param {number} headerHeight - Header height in pixels\r\n * @returns {number} Recommended page size\r\n */\r\nexport const calculateOptimalPageSize = (\r\n  viewportHeight = 800,\r\n  itemHeight = 300,\r\n  headerHeight = 200\r\n) => {\r\n  const availableHeight = viewportHeight - headerHeight;\r\n  const itemsPerRow = 3; // Based on responsive grid\r\n  const rowHeight = itemHeight + 32; // Including margins\r\n\r\n  const visibleRows = Math.floor(availableHeight / rowHeight);\r\n  const optimalPageSize = Math.max(itemsPerRow, visibleRows * itemsPerRow);\r\n\r\n  // Find closest available page size\r\n  return PAGINATION_CONFIG.AVAILABLE_PAGE_SIZES.reduce((closest, size) => {\r\n    return Math.abs(size - optimalPageSize) <\r\n      Math.abs(closest - optimalPageSize)\r\n      ? size\r\n      : closest;\r\n  });\r\n};\r\n","/**\r\n * Custom hook for managing exercise filters\r\n */\r\n\r\nimport { useState, useMemo, useCallback } from 'react';\r\nimport {\r\n  applyAllFilters,\r\n  countActiveFilters,\r\n  getActiveFilterDetails,\r\n} from '../utils/filterUtils';\r\nimport { FILTER_CONFIG } from '../constants/ui.constants';\r\n\r\n/**\r\n * Initial filter state\r\n */\r\nconst INITIAL_FILTERS = {\r\n  searchQuery: '',\r\n  muscle: FILTER_CONFIG.DEFAULT_VALUE,\r\n  equipment: FILTER_CONFIG.DEFAULT_VALUE,\r\n  category: FILTER_CONFIG.DEFAULT_VALUE,\r\n  force: FILTER_CONFIG.DEFAULT_VALUE,\r\n  difficulty: FILTER_CONFIG.DEFAULT_VALUE,\r\n};\r\n\r\n/**\r\n * Hook for managing exercise filters\r\n * @param {Array} exercises - Array of all exercises\r\n * @returns {Object} Filter state and handlers\r\n */\r\nexport const useExerciseFilters = (exercises = []) => {\r\n  const [filters, setFilters] = useState(INITIAL_FILTERS);\r\n\r\n  /**\r\n   * Updates a specific filter\r\n   */\r\n  const updateFilter = useCallback((name, value) => {\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  }, []);\r\n\r\n  /**\r\n   * Handles search query changes\r\n   */\r\n  const handleSearch = useCallback(\r\n    (event) => {\r\n      updateFilter('searchQuery', event.target.value);\r\n    },\r\n    [updateFilter]\r\n  );\r\n\r\n  /**\r\n   * Handles filter dropdown changes\r\n   */\r\n  const handleFilterChange = useCallback(\r\n    (event) => {\r\n      const { name, value } = event.target;\r\n      updateFilter(name, value);\r\n    },\r\n    [updateFilter]\r\n  );\r\n\r\n  /**\r\n   * Clears all filters\r\n   */\r\n  const clearAllFilters = useCallback(() => {\r\n    setFilters(INITIAL_FILTERS);\r\n  }, []);\r\n\r\n  /**\r\n   * Clears a specific filter\r\n   */\r\n  const clearSpecificFilter = useCallback(\r\n    (filterKey) => {\r\n      const value =\r\n        filterKey === 'searchQuery' ? '' : FILTER_CONFIG.DEFAULT_VALUE;\r\n      updateFilter(filterKey, value);\r\n    },\r\n    [updateFilter]\r\n  );\r\n\r\n  /**\r\n   * Memoized filtered exercises\r\n   */\r\n  const filteredExercises = useMemo(() => {\r\n    return applyAllFilters(exercises, filters);\r\n  }, [exercises, filters]);\r\n\r\n  /**\r\n   * Memoized active filters count\r\n   */\r\n  const activeFiltersCount = useMemo(() => {\r\n    return countActiveFilters(filters);\r\n  }, [filters]);\r\n\r\n  /**\r\n   * Memoized active filter details\r\n   */\r\n  const activeFilterDetails = useMemo(() => {\r\n    return getActiveFilterDetails(filters);\r\n  }, [filters]);\r\n\r\n  /**\r\n   * Whether any filters are active\r\n   */\r\n  const hasActiveFilters = useMemo(() => {\r\n    return activeFiltersCount > 0;\r\n  }, [activeFiltersCount]);\r\n\r\n  /**\r\n   * Whether results are filtered (different from total)\r\n   */\r\n  const isFiltered = useMemo(() => {\r\n    return hasActiveFilters && filteredExercises.length !== exercises.length;\r\n  }, [hasActiveFilters, filteredExercises.length, exercises.length]);\r\n\r\n  return {\r\n    // Filter state\r\n    filters,\r\n    filteredExercises,\r\n    activeFiltersCount,\r\n    activeFilterDetails,\r\n    hasActiveFilters,\r\n    isFiltered,\r\n\r\n    // Filter handlers\r\n    handleSearch,\r\n    handleFilterChange,\r\n    clearAllFilters,\r\n    clearSpecificFilter,\r\n    updateFilter,\r\n\r\n    // Helper functions\r\n    resetFilters: () => setFilters(INITIAL_FILTERS),\r\n    setFilters,\r\n  };\r\n};\r\n","/**\r\n * Custom hook for managing pagination\r\n */\r\n\r\nimport { useState, useMemo, useCallback } from 'react';\r\nimport {\r\n  calculatePagination,\r\n  getPaginatedItems,\r\n  validatePaginationParams,\r\n  getPaginationDisplayText,\r\n} from '../utils/paginationUtils';\r\nimport { PAGINATION_CONFIG } from '../constants/ui.constants';\r\n\r\n/**\r\n * Hook for managing pagination state and logic\r\n * @param {Array} items - Array of items to paginate\r\n * @param {Object} options - Pagination options\r\n * @returns {Object} Pagination state and handlers\r\n */\r\nexport const usePagination = (items = [], options = {}) => {\r\n  const {\r\n    initialPage = PAGINATION_CONFIG.INITIAL_PAGE,\r\n    initialPageSize = PAGINATION_CONFIG.DEFAULT_PAGE_SIZE,\r\n    totalUnfilteredCount = 0,\r\n  } = options;\r\n\r\n  const [currentPage, setCurrentPage] = useState(initialPage);\r\n  const [pageSize, setPageSize] = useState(initialPageSize);\r\n\r\n  /**\r\n   * Validates and corrects pagination parameters\r\n   */\r\n  const validatedParams = useMemo(() => {\r\n    return validatePaginationParams(currentPage, pageSize, items.length);\r\n  }, [currentPage, pageSize, items.length]);\r\n\r\n  /**\r\n   * Calculates pagination information\r\n   */\r\n  const paginationInfo = useMemo(() => {\r\n    return calculatePagination(\r\n      items.length,\r\n      validatedParams.currentPage,\r\n      validatedParams.pageSize\r\n    );\r\n  }, [items.length, validatedParams.currentPage, validatedParams.pageSize]);\r\n\r\n  /**\r\n   * Gets current page items\r\n   */\r\n  const currentPageItems = useMemo(() => {\r\n    return getPaginatedItems(\r\n      items,\r\n      validatedParams.currentPage,\r\n      validatedParams.pageSize\r\n    );\r\n  }, [items, validatedParams.currentPage, validatedParams.pageSize]);\r\n\r\n  /**\r\n   * Whether items are filtered\r\n   */\r\n  const isFiltered = useMemo(() => {\r\n    return totalUnfilteredCount > 0 && items.length !== totalUnfilteredCount;\r\n  }, [totalUnfilteredCount, items.length]);\r\n\r\n  /**\r\n   * Pagination display text\r\n   */\r\n  const displayText = useMemo(() => {\r\n    return getPaginationDisplayText(\r\n      paginationInfo,\r\n      isFiltered,\r\n      totalUnfilteredCount\r\n    );\r\n  }, [paginationInfo, isFiltered, totalUnfilteredCount]);\r\n\r\n  /**\r\n   * Goes to specific page\r\n   */\r\n  const goToPage = useCallback(\r\n    (page) => {\r\n      const maxPage = Math.max(1, Math.ceil(items.length / pageSize));\r\n      const targetPage = Math.max(1, Math.min(page, maxPage));\r\n      setCurrentPage(targetPage);\r\n    },\r\n    [items.length, pageSize]\r\n  );\r\n\r\n  /**\r\n   * Goes to next page\r\n   */\r\n  const goToNextPage = useCallback(() => {\r\n    if (paginationInfo.hasNextPage) {\r\n      setCurrentPage((prev) => prev + 1);\r\n    }\r\n  }, [paginationInfo.hasNextPage]);\r\n\r\n  /**\r\n   * Goes to previous page\r\n   */\r\n  const goToPrevPage = useCallback(() => {\r\n    if (paginationInfo.hasPrevPage) {\r\n      setCurrentPage((prev) => prev - 1);\r\n    }\r\n  }, [paginationInfo.hasPrevPage]);\r\n\r\n  /**\r\n   * Goes to first page\r\n   */\r\n  const goToFirstPage = useCallback(() => {\r\n    setCurrentPage(1);\r\n  }, []);\r\n\r\n  /**\r\n   * Goes to last page\r\n   */\r\n  const goToLastPage = useCallback(() => {\r\n    const maxPage = Math.max(1, Math.ceil(items.length / pageSize));\r\n    setCurrentPage(maxPage);\r\n  }, [items.length, pageSize]);\r\n\r\n  /**\r\n   * Changes page size\r\n   */\r\n  const changePageSize = useCallback(\r\n    (newPageSize) => {\r\n      if (!PAGINATION_CONFIG.AVAILABLE_PAGE_SIZES.includes(newPageSize)) {\r\n        console.warn(`Invalid page size: ${newPageSize}. Using default.`);\r\n        newPageSize = PAGINATION_CONFIG.DEFAULT_PAGE_SIZE;\r\n      }\r\n\r\n      // Calculate what the current page should be with new page size\r\n      const currentItemIndex = (currentPage - 1) * pageSize;\r\n      const newPage = Math.floor(currentItemIndex / newPageSize) + 1;\r\n\r\n      setPageSize(newPageSize);\r\n      setCurrentPage(newPage);\r\n    },\r\n    [currentPage, pageSize]\r\n  );\r\n\r\n  /**\r\n   * Resets pagination to initial state\r\n   */\r\n  const resetPagination = useCallback(() => {\r\n    setCurrentPage(initialPage);\r\n    setPageSize(initialPageSize);\r\n  }, [initialPage, initialPageSize]);\r\n\r\n  /**\r\n   * Auto-adjusts page if current page becomes invalid\r\n   */\r\n  const adjustPageIfNeeded = useCallback(() => {\r\n    const maxPage = Math.max(1, Math.ceil(items.length / pageSize));\r\n    if (currentPage > maxPage) {\r\n      setCurrentPage(maxPage);\r\n    }\r\n  }, [currentPage, items.length, pageSize]);\r\n\r\n  // Auto-adjust page when items change\r\n  useMemo(() => {\r\n    adjustPageIfNeeded();\r\n  }, [adjustPageIfNeeded]);\r\n\r\n  return {\r\n    // Current state\r\n    currentPage: validatedParams.currentPage,\r\n    pageSize: validatedParams.pageSize,\r\n    currentPageItems,\r\n\r\n    // Pagination info\r\n    ...paginationInfo,\r\n    isFiltered,\r\n    displayText,\r\n    totalUnfilteredCount,\r\n\r\n    // Navigation handlers\r\n    goToPage,\r\n    goToNextPage,\r\n    goToPrevPage,\r\n    goToFirstPage,\r\n    goToLastPage,\r\n    changePageSize,\r\n\r\n    // Utility functions\r\n    resetPagination,\r\n    adjustPageIfNeeded,\r\n\r\n    // Available options\r\n    availablePageSizes: PAGINATION_CONFIG.AVAILABLE_PAGE_SIZES,\r\n  };\r\n};\r\n","import React from 'react';\r\nimport { ExercisesProvider } from './context';\r\nimport ExerciseApp from './components/ExerciseApp';\r\n\r\n// Main Exercise App component with context provider\r\nconst ExercisesWithProvider = () => {\r\n  return (\r\n    <ExercisesProvider>\r\n      <ExerciseApp />\r\n    </ExercisesProvider>\r\n  );\r\n};\r\n\r\nexport default ExercisesWithProvider;\r\n\r\n// Core components\r\nexport { default as ExerciseList } from './components/ExerciseList';\r\nexport { default as ExerciseListInfo } from './components/ExerciseListInfo';\r\nexport { default as Exercise } from './components/Exercise';\r\nexport { default as ExerciseDetail } from './components/ExerciseDetail';\r\nexport { default as SearchFilters } from './components/SearchFilters';\r\n\r\n// Exercise sub-components\r\nexport * from './components/Exercise';\r\n\r\n// Utilities\r\nexport * from './utils';\r\n\r\n// Custom hooks\r\nexport * from './hooks';\r\n\r\n// Constants\r\nexport * from './constants';\r\n\r\n// Context\r\nexport * from './context';\r\n"],"names":["ExercisesContext","createContext","undefined","INITIAL_FILTERS","searchQuery","muscle","equipment","category","force","difficulty","ExercisesProvider","_ref","children","filters","setFilters","useState","selectedExercise","setSelectedExercise","detailsOpen","setDetailsOpen","activeStep","setActiveStep","mobileFiltersOpen","setMobileFiltersOpen","favorites","setFavorites","Set","bookmarks","setBookmarks","filteredExercises","useMemo","filtered","exercisesData","filter","exercise","primaryMuscles","includes","level","query","toLowerCase","_exercise$name","_exercise$equipment","_exercise$category","name","some","handleFilterChange","useCallback","event","value","target","prev","_objectSpread","handleSearch","clearFilters","handleClearSpecificFilter","filterKey","openExerciseDetails","closeExerciseDetails","handleNext","prevActiveStep","handleBack","openMobileFilters","closeMobileFilters","toggleFavorite","exerciseId","id","newFavorites","has","delete","add","toggleBookmark","newBookmarks","addToWorkout","console","log","shareExercise","shareType","arguments","length","scheduleExercise","reportExercise","editExercise","isFavorite","isBookmarked","contextValue","totalExercises","filteredCount","_jsx","Provider","useExercises","context","useContext","Error","withExercisesProvider","Component","WrappedComponent","props","displayName","concat","validateImageArray","images","Array","isArray","img","trim","ExerciseImage","src","alt","height","imageError","setImageError","imageLoading","setImageLoading","Skeleton","variant","width","sx","borderRadius","_jsxs","Box","position","top","left","bgcolor","zIndex","component","loading","display","objectFit","opacity","transition","onLoad","handleImageLoad","onError","handleImageError","ExerciseImageSlider","_ref2","propActiveStep","onNext","propOnNext","onBack","propOnBack","imageHeight","showNavigation","showImageCounter","internalActiveStep","setInternalActiveStep","totalImages","currentImage","currentImageSrc","process","imagePath","startsWith","cleanPath","getImageSrc","isFirstImage","isLastImage","canNavigate","maxWidth","flexGrow","MobileStepper","steps","backgroundColor","borderTop","borderColor","nextButton","Button","size","onClick","disabled","minWidth","textTransform","KeyboardArrowRight","backButton","KeyboardArrowLeft","right","color","px","py","fontSize","fontWeight","React","ExerciseDetailContent","_exercise$description","showExpandableDescription","maxDescriptionLength","showMetadata","descriptionExpanded","setDescriptionExpanded","hasDescription","description","shouldTruncate","truncatedDescription","substring","displayDescription","exerciseMetadata","label","bodyPart","item","Typography","gutterBottom","mb","gap","flexWrap","slice","map","index","Chip","Divider","alignItems","InfoIcon","IconButton","ml","ExpandLessIcon","ExpandMoreIcon","lineHeight","whiteSpace","mt","cursor","textDecoration","fontStyle","Card","CardContent","pb","gridTemplateColumns","xs","sm","md","flexDirection","letterSpacing","notes","p","border","safety","PAGINATION_CONFIG","DEFAULT_PAGE_SIZE","AVAILABLE_PAGE_SIZES","INITIAL_PAGE","CARD_CONFIG","IMAGE_HEIGHT","HOVER_TRANSFORM","HOVER_BOX_SHADOW","TRANSITION_DURATION","CHIP_COLORS","PRIMARY_MUSCLE","EQUIPMENT","LEVEL","CATEGORY","FORCE","MECHANIC","TOOLTIP_CONFIG","MAX_WIDTH","FONT_SIZE","DESCRIPTION_MAX_LENGTH","SEARCH_CONFIG","DEBOUNCE_DELAY","MIN_SEARCH_LENGTH","PLACEHOLDER_TEXT","FILTER_CONFIG","DEFAULT_VALUE","ACTIVE_FILTER_THRESHOLD","DetailedTooltip","styled","className","_objectWithoutProperties","_excluded","Tooltip","classes","popper","theme","tooltipClasses","tooltip","typography","pxToRem","padding","spacing","MuscleGroupsChip","_ref3","_exercise$primaryMusc","chipColor","muscleGroups","secondaryMuscles","formatMuscleArray","muscleData","split","m","Boolean","primary","secondary","formatMuscleGroups","displayLabel","tooltipContent","join","title","arrow","placement","AttributeChip","_ref4","attribute","getChipLabel","attr","val","toString","charAt","toUpperCase","String","chipElement","ExerciseDetailChips","_ref5","_ref6","_exercise$force","_exercise$mechanic","showAll","visibleChips","safeChipColors","chipConfig","key","mechanic","displayChips","chip","_ref7","InstructionStep","step","isCompleted","onToggleComplete","showCheckboxes","formattedInstruction","instruction","formatted","replace","match","formatInstruction","ListItem","ListItemIcon","CheckIcon","justifyContent","flexShrink","ListItemText","ExerciseInstructions","collapsible","defaultExpanded","onStepComplete","expanded","setExpanded","completedSteps","setCompletedSteps","instructions","validateInstructions","handleToggleComplete","stepIndex","newCompletedSteps","completedCount","totalSteps","completionPercentage","Math","round","headerContent","icon","PlayIcon","instructionsContent","List","overflow","Collapse","in","timeout","unmountOnExit","ExerciseDetailActions","onAddToWorkout","onToggleFavorite","onShare","onSchedule","onBookmark","onEdit","onReport","canEdit","showSecondaryActions","anchorEl","setAnchorEl","shareAnchorEl","setShareAnchorEl","handleMenuClose","handleShareMenuClose","handleShare","primaryActions","startIcon","AddIcon","handleAddToWorkout","handleToggleFavorite","FavoriteFilledIcon","FavoriteIcon","currentTarget","ShareIcon","Menu","open","onClose","anchorOrigin","vertical","horizontal","transformOrigin","MenuItem","secondaryMenu","_Fragment","MoreVertIcon","handleSchedule","ScheduleIcon","handleBookmark","BookmarkIcon","BookmarkBorderIcon","handleEdit","EditIcon","handleReport","ReportIcon","stats","timesUsed","avgRating","lastUsed","Date","toLocaleDateString","ExerciseDetail","Drawer","anchor","boxSizing","AppBar","elevation","appBar","borderBottom","Toolbar","minHeight","edge","CloseIcon","flex","showTooltips","maxChipsToShow","layout","newState","muscleTypes","categoryTypes","equipmentTypes","forceTypes","difficultyLevels","filterBySearchQuery","exercises","_exercise$secondaryMu","filterByMuscle","filterByEquipment","_exercise$equipment2","filterByCategory","_exercise$category2","filterByForce","filterByDifficulty","_exercise$level","applyAllFilters","getFilterLabel","filterType","options","option","find","opt","countActiveFilters","count","getActiveFilterDetails","activeFilters","push","type","SearchFilters","onClearSpecificFilter","activeFiltersCount","activeFilterDetails","FilterDropdown","FormControl","fullWidth","InputLabel","Select","labelId","onChange","onDelete","Stack","TextField","placeholder","InputProps","endAdornment","SearchIcon","REQUIRED_EXERCISE_FIELDS","OPTIONAL_EXERCISE_FIELDS","DIFFICULTY_MAPPING","beginner","order","intermediate","expert","CATEGORY_DESCRIPTIONS","strength","stretching","plyometrics","strongman","powerlifting","cardio","EQUIPMENT_CATEGORIES","FREE_WEIGHTS","MACHINES","BODYWEIGHT","ACCESSORIES","SPECIALTY","validateExercise","errors","forEach","field","isValid","formatExerciseName","word","truncateDescription","maxLength","truncated","lastSpaceIndex","lastIndexOf","getDifficultyOrder","mapping","getEquipmentCategory","equipmentLower","equipmentList","Object","entries","muscles","maxDisplay","displayed","remaining","getPrimaryImage","getPrepopulatedImage","image","exerciseFolderName","baseImagePath","imageName","sanitizeExercise","sortExercises","sortBy","sortOrder","sort","a","b","_a$primaryMuscles","_b$primaryMuscles","aValue","bValue","localeCompare","setLoading","error","setError","imageUrl","altText","bottom","CircularProgress","CardMedia","HtmlTooltip","MuscleChip","primaryMuscle","ExerciseChips","ExerciseContent","descriptionLength","showChips","formattedName","WebkitLineClamp","WebkitBoxOrient","ExerciseActions","onViewDetails","showFavorite","showShare","pt","handleViewDetails","ViewIcon","stopPropagation","FavoriteBorderIcon","Exercise","rawExercise","onOpenDetails","gridProps","cardProps","defaultCardProps","transform","boxShadow","_createElement","Grid","ExerciseList","totalPages","page","onPageChange","container","Paper","textAlign","Pagination","showFirstButton","showLastButton","mr","alignSelf","floor","pageNum","arr","indexOf","pageSize","totalUnfilteredCount","ceil","startIndex","endIndex","min","isFiltered","ExerciseApp","useTheme","isMobile","useMediaQuery","breakpoints","down","setPage","exercisesPerPage","setExercisesPerPage","totalFilteredExercises","paginatedExercises","borderRight","ModalProps","keepMounted","ExerciseListInfo","handlePageChange","newPage","window","scrollTo","behavior","calculatePagination","totalItems","currentPage","hasNextPage","hasPrevPage","getPaginatedItems","items","validatePaginationParams","validPageSize","maxPage","max","validCurrentPage","getPaginationDisplayText","paginationInfo","totalUnfilteredItems","getPageNavigation","maxVisible","from","_","i","half","start","end","calculateOptimalPageSize","availableHeight","rowHeight","visibleRows","optimalPageSize","reduce","closest","abs","useExerciseFilters","updateFilter","clearAllFilters","clearSpecificFilter","hasActiveFilters","resetFilters","usePagination","initialPage","initialPageSize","setCurrentPage","setPageSize","validatedParams","currentPageItems","displayText","goToPage","targetPage","goToNextPage","goToPrevPage","goToFirstPage","goToLastPage","changePageSize","newPageSize","warn","currentItemIndex","resetPagination","adjustPageIfNeeded","availablePageSizes","ExercisesWithProvider"],"sourceRoot":""}
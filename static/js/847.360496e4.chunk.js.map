{"version":3,"file":"static/js/847.360496e4.chunk.js","mappings":"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","sources":["features/WorkoutPlanManagement/workoutPlan.constants.js","features/WorkoutPlanManagement/workoutPlan.utils.js","features/WorkoutPlanManagement/components/WorkoutPlanCard.jsx","features/WorkoutPlanManagement/components/WorkoutPlanForm.jsx","features/WorkoutPlanManagement/components/WorkoutPlanFilters.jsx","features/WorkoutPlanManagement/components/WorkoutPlanStats.jsx","features/WorkoutPlanManagement/WorkoutPlanManagement.jsx"],"sourcesContent":["// Workout Plan Constants\r\n\r\nexport const WORKOUT_TYPES = {\r\n  strength: 'Strength Training',\r\n  cardio: 'Cardiovascular',\r\n  flexibility: 'Flexibility',\r\n  balance: 'Balance',\r\n  hiit: 'HIIT',\r\n  functional: 'Functional Training',\r\n  sports: 'Sports Specific',\r\n  rehabilitation: 'Rehabilitation',\r\n};\r\n\r\nexport const DIFFICULTY_LEVELS = {\r\n  beginner: 'Beginner',\r\n  intermediate: 'Intermediate',\r\n  advanced: 'Advanced',\r\n  expert: 'Expert',\r\n};\r\n\r\nexport const PLAN_STATUS = {\r\n  draft: 'Draft',\r\n  active: 'Active',\r\n  completed: 'Completed',\r\n  archived: 'Archived',\r\n};\r\n\r\nexport const EXERCISE_CATEGORIES = {\r\n  compound: 'Compound',\r\n  isolation: 'Isolation',\r\n  cardio: 'Cardiovascular',\r\n  stretching: 'Stretching',\r\n  core: 'Core',\r\n  plyometric: 'Plyometric',\r\n};\r\n\r\nexport const MUSCLE_GROUPS = {\r\n  chest: 'Chest',\r\n  back: 'Back',\r\n  shoulders: 'Shoulders',\r\n  arms: 'Arms',\r\n  core: 'Core',\r\n  legs: 'Legs',\r\n  glutes: 'Glutes',\r\n  fullBody: 'Full Body',\r\n};\r\n\r\n// Mock Workout Plans Data\r\nexport const MOCK_WORKOUT_PLANS = [\r\n  {\r\n    id: 'WP001',\r\n    name: 'Beginner Full Body Strength',\r\n    description:\r\n      'A comprehensive full-body workout designed for beginners to build foundational strength',\r\n    type: 'strength',\r\n    difficulty: 'beginner',\r\n    duration: 45,\r\n    status: 'active',\r\n    trainerId: '1',\r\n    trainerName: 'John Smith',\r\n    memberId: 'MEM001',\r\n    memberName: 'John Doe',\r\n    targetMuscleGroups: ['fullBody'],\r\n    calories: 250,\r\n    exercises: [\r\n      {\r\n        id: 'EX001',\r\n        name: 'Push-ups',\r\n        category: 'compound',\r\n        sets: 3,\r\n        reps: 10,\r\n        rest: 60,\r\n        weight: null,\r\n        notes: 'Modify on knees if needed',\r\n        muscleGroups: ['chest', 'arms', 'core'],\r\n      },\r\n      {\r\n        id: 'EX002',\r\n        name: 'Bodyweight Squats',\r\n        category: 'compound',\r\n        sets: 3,\r\n        reps: 15,\r\n        rest: 60,\r\n        weight: null,\r\n        notes: 'Focus on proper form',\r\n        muscleGroups: ['legs', 'glutes'],\r\n      },\r\n      {\r\n        id: 'EX003',\r\n        name: 'Plank',\r\n        category: 'core',\r\n        sets: 3,\r\n        duration: 30,\r\n        rest: 30,\r\n        weight: null,\r\n        notes: 'Keep body straight',\r\n        muscleGroups: ['core'],\r\n      },\r\n      {\r\n        id: 'EX004',\r\n        name: 'Walking Lunges',\r\n        category: 'compound',\r\n        sets: 2,\r\n        reps: 10,\r\n        rest: 45,\r\n        weight: null,\r\n        notes: 'Each leg',\r\n        muscleGroups: ['legs', 'glutes'],\r\n      },\r\n    ],\r\n    createdDate: '2024-01-15',\r\n    lastModified: '2024-01-20',\r\n    tags: ['beginner', 'full-body', 'strength'],\r\n  },\r\n  {\r\n    id: 'WP002',\r\n    name: 'HIIT Cardio Blast',\r\n    description:\r\n      'High-intensity interval training for fat burning and cardiovascular improvement',\r\n    type: 'hiit',\r\n    difficulty: 'intermediate',\r\n    duration: 30,\r\n    status: 'active',\r\n    trainerId: '3',\r\n    trainerName: 'Mike Rodriguez',\r\n    memberId: 'MEM002',\r\n    memberName: 'Jane Smith',\r\n    targetMuscleGroups: ['fullBody'],\r\n    calories: 350,\r\n    exercises: [\r\n      {\r\n        id: 'EX005',\r\n        name: 'Burpees',\r\n        category: 'plyometric',\r\n        sets: 4,\r\n        reps: 8,\r\n        rest: 20,\r\n        weight: null,\r\n        notes: 'Full body explosive movement',\r\n        muscleGroups: ['fullBody'],\r\n      },\r\n      {\r\n        id: 'EX006',\r\n        name: 'Mountain Climbers',\r\n        category: 'cardio',\r\n        sets: 4,\r\n        duration: 30,\r\n        rest: 20,\r\n        weight: null,\r\n        notes: 'Keep core tight',\r\n        muscleGroups: ['core', 'arms'],\r\n      },\r\n      {\r\n        id: 'EX007',\r\n        name: 'Jump Squats',\r\n        category: 'plyometric',\r\n        sets: 4,\r\n        reps: 12,\r\n        rest: 20,\r\n        weight: null,\r\n        notes: 'Land softly',\r\n        muscleGroups: ['legs', 'glutes'],\r\n      },\r\n      {\r\n        id: 'EX008',\r\n        name: 'High Knees',\r\n        category: 'cardio',\r\n        sets: 4,\r\n        duration: 20,\r\n        rest: 10,\r\n        weight: null,\r\n        notes: 'Drive knees up high',\r\n        muscleGroups: ['legs', 'core'],\r\n      },\r\n    ],\r\n    createdDate: '2024-01-18',\r\n    lastModified: '2024-01-25',\r\n    tags: ['hiit', 'cardio', 'fat-burn'],\r\n  },\r\n  {\r\n    id: 'WP003',\r\n    name: 'Upper Body Strength Builder',\r\n    description: 'Focused upper body workout for building muscle and strength',\r\n    type: 'strength',\r\n    difficulty: 'intermediate',\r\n    duration: 55,\r\n    status: 'active',\r\n    trainerId: '2',\r\n    trainerName: 'Sarah Johnson',\r\n    memberId: 'MEM003',\r\n    memberName: 'Mike Wilson',\r\n    targetMuscleGroups: ['chest', 'back', 'shoulders', 'arms'],\r\n    calories: 280,\r\n    exercises: [\r\n      {\r\n        id: 'EX009',\r\n        name: 'Bench Press',\r\n        category: 'compound',\r\n        sets: 4,\r\n        reps: 8,\r\n        rest: 90,\r\n        weight: 135,\r\n        notes: 'Progressive overload',\r\n        muscleGroups: ['chest', 'arms'],\r\n      },\r\n      {\r\n        id: 'EX010',\r\n        name: 'Pull-ups',\r\n        category: 'compound',\r\n        sets: 3,\r\n        reps: 6,\r\n        rest: 90,\r\n        weight: null,\r\n        notes: 'Use assistance if needed',\r\n        muscleGroups: ['back', 'arms'],\r\n      },\r\n    ],\r\n    createdDate: '2024-01-20',\r\n    lastModified: '2024-01-25',\r\n    tags: ['upper-body', 'strength', 'muscle-building'],\r\n  },\r\n];\r\n","// Workout Plan Management Utility Functions\r\n\r\n/**\r\n * Filter workout plans by type\r\n * @param {Array} plans - Array of workout plan objects\r\n * @param {string} type - Type to filter by\r\n * @returns {Array} - Filtered workout plans\r\n */\r\nexport const filterPlansByType = (plans, type) => {\r\n  if (!type || type === 'all') return plans;\r\n  return plans.filter((plan) => plan.type === type);\r\n};\r\n\r\n/**\r\n * Filter workout plans by difficulty\r\n * @param {Array} plans - Array of workout plan objects\r\n * @param {string} difficulty - Difficulty to filter by\r\n * @returns {Array} - Filtered workout plans\r\n */\r\nexport const filterPlansByDifficulty = (plans, difficulty) => {\r\n  if (!difficulty || difficulty === 'all') return plans;\r\n  return plans.filter((plan) => plan.difficulty === difficulty);\r\n};\r\n\r\n/**\r\n * Filter workout plans by status\r\n * @param {Array} plans - Array of workout plan objects\r\n * @param {string} status - Status to filter by\r\n * @returns {Array} - Filtered workout plans\r\n */\r\nexport const filterPlansByStatus = (plans, status) => {\r\n  if (!status || status === 'all') return plans;\r\n  return plans.filter((plan) => plan.status === status);\r\n};\r\n\r\n/**\r\n * Search workout plans by name, description, or tags\r\n * @param {Array} plans - Array of workout plan objects\r\n * @param {string} searchTerm - Search term\r\n * @returns {Array} - Filtered workout plans\r\n */\r\nexport const searchWorkoutPlans = (plans, searchTerm) => {\r\n  if (!searchTerm) return plans;\r\n\r\n  const term = searchTerm.toLowerCase();\r\n\r\n  return plans.filter(\r\n    (plan) =>\r\n      plan.name.toLowerCase().includes(term) ||\r\n      plan.description.toLowerCase().includes(term) ||\r\n      plan.trainerName.toLowerCase().includes(term) ||\r\n      plan.memberName.toLowerCase().includes(term) ||\r\n      (plan.tags && plan.tags.some((tag) => tag.toLowerCase().includes(term)))\r\n  );\r\n};\r\n\r\n/**\r\n * Sort workout plans by specified field\r\n * @param {Array} plans - Array of workout plan objects\r\n * @param {string} field - Field to sort by\r\n * @param {string} direction - Sort direction ('asc' or 'desc')\r\n * @returns {Array} - Sorted workout plans\r\n */\r\nexport const sortWorkoutPlans = (plans, field, direction = 'asc') => {\r\n  return [...plans].sort((a, b) => {\r\n    let aVal = a[field];\r\n    let bVal = b[field];\r\n\r\n    // Handle dates\r\n    if (field.includes('Date')) {\r\n      aVal = new Date(aVal);\r\n      bVal = new Date(bVal);\r\n    }\r\n\r\n    // Handle strings\r\n    if (typeof aVal === 'string') {\r\n      aVal = aVal.toLowerCase();\r\n      bVal = bVal.toLowerCase();\r\n    }\r\n\r\n    if (direction === 'asc') {\r\n      return aVal > bVal ? 1 : -1;\r\n    } else {\r\n      return aVal < bVal ? 1 : -1;\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Calculate total exercises in a workout plan\r\n * @param {Object} plan - Workout plan object\r\n * @returns {number} - Total number of exercises\r\n */\r\nexport const getTotalExercises = (plan) => {\r\n  return plan.exercises ? plan.exercises.length : 0;\r\n};\r\n\r\n/**\r\n * Calculate estimated calories burned\r\n * @param {Object} plan - Workout plan object\r\n * @returns {number} - Estimated calories\r\n */\r\nexport const getEstimatedCalories = (plan) => {\r\n  if (plan.calories) return plan.calories;\r\n\r\n  // Basic estimation based on type and duration\r\n  const baseRates = {\r\n    strength: 4, // calories per minute\r\n    cardio: 8,\r\n    hiit: 10,\r\n    flexibility: 2,\r\n    balance: 3,\r\n    functional: 6,\r\n    sports: 7,\r\n    rehabilitation: 2,\r\n  };\r\n\r\n  const rate = baseRates[plan.type] || 5;\r\n  return Math.round(plan.duration * rate);\r\n};\r\n\r\n/**\r\n * Get difficulty color for Material-UI components\r\n * @param {string} difficulty - Difficulty level\r\n * @returns {string} - Material-UI color variant\r\n */\r\nexport const getDifficultyColor = (difficulty) => {\r\n  switch (difficulty) {\r\n    case 'beginner':\r\n      return 'success';\r\n    case 'intermediate':\r\n      return 'warning';\r\n    case 'advanced':\r\n      return 'error';\r\n    case 'expert':\r\n      return 'error';\r\n    default:\r\n      return 'default';\r\n  }\r\n};\r\n\r\n/**\r\n * Get status color for Material-UI components\r\n * @param {string} status - Plan status\r\n * @returns {string} - Material-UI color variant\r\n */\r\nexport const getStatusColor = (status) => {\r\n  switch (status) {\r\n    case 'active':\r\n      return 'success';\r\n    case 'draft':\r\n      return 'default';\r\n    case 'completed':\r\n      return 'info';\r\n    case 'archived':\r\n      return 'default';\r\n    default:\r\n      return 'default';\r\n  }\r\n};\r\n\r\n/**\r\n * Generate workout plan statistics\r\n * @param {Array} plans - Array of workout plan objects\r\n * @returns {Object} - Statistics object\r\n */\r\nexport const getWorkoutPlanStats = (plans) => {\r\n  return {\r\n    total: plans.length,\r\n    active: plans.filter((p) => p.status === 'active').length,\r\n    draft: plans.filter((p) => p.status === 'draft').length,\r\n    completed: plans.filter((p) => p.status === 'completed').length,\r\n    archived: plans.filter((p) => p.status === 'archived').length,\r\n    byType: {\r\n      strength: plans.filter((p) => p.type === 'strength').length,\r\n      cardio: plans.filter((p) => p.type === 'cardio').length,\r\n      hiit: plans.filter((p) => p.type === 'hiit').length,\r\n      flexibility: plans.filter((p) => p.type === 'flexibility').length,\r\n    },\r\n    byDifficulty: {\r\n      beginner: plans.filter((p) => p.difficulty === 'beginner').length,\r\n      intermediate: plans.filter((p) => p.difficulty === 'intermediate').length,\r\n      advanced: plans.filter((p) => p.difficulty === 'advanced').length,\r\n    },\r\n    averageDuration:\r\n      plans.length > 0\r\n        ? Math.round(\r\n            plans.reduce((sum, p) => sum + p.duration, 0) / plans.length\r\n          )\r\n        : 0,\r\n    totalCalories: plans.reduce((sum, p) => sum + getEstimatedCalories(p), 0),\r\n  };\r\n};\r\n\r\n/**\r\n * Validate workout plan data\r\n * @param {Object} planData - Workout plan data to validate\r\n * @returns {Object} - Validation result { isValid: boolean, errors: Array }\r\n */\r\nexport const validateWorkoutPlan = (planData) => {\r\n  const errors = [];\r\n\r\n  if (!planData.name || planData.name.trim().length === 0) {\r\n    errors.push('Plan name is required');\r\n  }\r\n\r\n  if (!planData.type) {\r\n    errors.push('Workout type is required');\r\n  }\r\n\r\n  if (!planData.difficulty) {\r\n    errors.push('Difficulty level is required');\r\n  }\r\n\r\n  if (!planData.duration || planData.duration <= 0) {\r\n    errors.push('Duration must be greater than 0');\r\n  }\r\n\r\n  if (planData.duration && planData.duration > 180) {\r\n    errors.push('Duration cannot exceed 180 minutes');\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n};\r\n\r\n/**\r\n * Generate unique workout plan ID\r\n * @returns {string} - Unique ID\r\n */\r\nexport const generatePlanId = () => {\r\n  return `WP${Date.now().toString(36).toUpperCase()}${Math.random()\r\n    .toString(36)\r\n    .substr(2, 2)\r\n    .toUpperCase()}`;\r\n};\r\n\r\n/**\r\n * Format workout plan for export\r\n * @param {Object} plan - Workout plan object\r\n * @returns {Object} - Formatted plan data\r\n */\r\nexport const formatPlanForExport = (plan) => {\r\n  return {\r\n    name: plan.name,\r\n    description: plan.description,\r\n    type: plan.type,\r\n    difficulty: plan.difficulty,\r\n    duration: plan.duration,\r\n    exercises: plan.exercises.map((exercise) => ({\r\n      name: exercise.name,\r\n      sets: exercise.sets,\r\n      reps: exercise.reps,\r\n      duration: exercise.duration,\r\n      rest: exercise.rest,\r\n      notes: exercise.notes,\r\n    })),\r\n    estimatedCalories: getEstimatedCalories(plan),\r\n  };\r\n};\r\n","import React from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Typography,\r\n  Chip,\r\n  Box,\r\n  IconButton,\r\n} from '@mui/material';\r\nimport {\r\n  Edit,\r\n  Delete,\r\n  FitnessCenter,\r\n  Person,\r\n  Schedule,\r\n  LocalFireDepartment,\r\n  Assignment,\r\n} from '@mui/icons-material';\r\nimport {\r\n  WORKOUT_TYPES,\r\n  DIFFICULTY_LEVELS,\r\n  PLAN_STATUS,\r\n} from '../workoutPlan.constants';\r\nimport {\r\n  getDifficultyColor,\r\n  getStatusColor,\r\n  getEstimatedCalories,\r\n} from '../workoutPlan.utils';\r\n\r\nconst WorkoutPlanCard = ({\r\n  plan,\r\n  onEdit,\r\n  onDelete,\r\n  onView,\r\n  canManage = false,\r\n}) => {\r\n  const handleEdit = (e) => {\r\n    e.stopPropagation();\r\n    if (onEdit) onEdit(plan);\r\n  };\r\n\r\n  const handleDelete = (e) => {\r\n    e.stopPropagation();\r\n    if (onDelete) onDelete(plan.id);\r\n  };\r\n\r\n  const handleView = () => {\r\n    if (onView) onView(plan);\r\n  };\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        height: '100%',\r\n        cursor: onView ? 'pointer' : 'default',\r\n        transition: 'all 0.2s ease-in-out',\r\n        '&:hover': {\r\n          transform: onView ? 'translateY(-4px)' : 'none',\r\n          boxShadow: onView ? 4 : 1,\r\n        },\r\n      }}\r\n      onClick={handleView}\r\n    >\r\n      <CardHeader\r\n        title={plan.name}\r\n        titleTypographyProps={{\r\n          variant: 'h6',\r\n          sx: {\r\n            fontSize: '1.1rem',\r\n            fontWeight: 600,\r\n            lineHeight: 1.3,\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            display: '-webkit-box',\r\n            WebkitLineClamp: 2,\r\n            WebkitBoxOrient: 'vertical',\r\n          },\r\n        }}\r\n        subheader={\r\n          <Box sx={{ mt: 1 }}>\r\n            <Chip\r\n              label={WORKOUT_TYPES[plan.type]}\r\n              color='primary'\r\n              size='small'\r\n              sx={{ mr: 1, mb: 0.5 }}\r\n            />\r\n            <Chip\r\n              label={DIFFICULTY_LEVELS[plan.difficulty]}\r\n              color={getDifficultyColor(plan.difficulty)}\r\n              size='small'\r\n              sx={{ mr: 1, mb: 0.5 }}\r\n            />\r\n            <Chip\r\n              label={PLAN_STATUS[plan.status]}\r\n              color={getStatusColor(plan.status)}\r\n              size='small'\r\n              variant='outlined'\r\n              sx={{ mb: 0.5 }}\r\n            />\r\n          </Box>\r\n        }\r\n        action={\r\n          canManage && (\r\n            <Box>\r\n              <IconButton size='small' onClick={handleEdit} sx={{ mr: 0.5 }}>\r\n                <Edit />\r\n              </IconButton>\r\n              <IconButton size='small' onClick={handleDelete} color='error'>\r\n                <Delete />\r\n              </IconButton>\r\n            </Box>\r\n          )\r\n        }\r\n      />\r\n      <CardContent sx={{ pt: 0 }}>\r\n        <Typography\r\n          variant='body2'\r\n          color='text.secondary'\r\n          sx={{\r\n            mb: 2,\r\n            overflow: 'hidden',\r\n            textOverflow: 'ellipsis',\r\n            display: '-webkit-box',\r\n            WebkitLineClamp: 2,\r\n            WebkitBoxOrient: 'vertical',\r\n            minHeight: '2.5em',\r\n          }}\r\n        >\r\n          {plan.description}\r\n        </Typography>\r\n\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <Schedule sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }} />\r\n            <Typography variant='body2' color='text.secondary'>\r\n              {plan.duration} minutes\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <FitnessCenter\r\n              sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }}\r\n            />\r\n            <Typography variant='body2' color='text.secondary'>\r\n              {plan.exercises.length} exercises\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <LocalFireDepartment\r\n              sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }}\r\n            />\r\n            <Typography variant='body2' color='text.secondary'>\r\n              ~{getEstimatedCalories(plan)} calories\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <Person sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }} />\r\n            <Typography\r\n              variant='body2'\r\n              color='text.secondary'\r\n              sx={{\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                whiteSpace: 'nowrap',\r\n                flex: 1,\r\n              }}\r\n            >\r\n              {plan.memberName || 'Unassigned'}\r\n            </Typography>\r\n          </Box>\r\n\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            <Assignment sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }} />\r\n            <Typography\r\n              variant='body2'\r\n              color='text.secondary'\r\n              sx={{\r\n                overflow: 'hidden',\r\n                textOverflow: 'ellipsis',\r\n                whiteSpace: 'nowrap',\r\n                flex: 1,\r\n              }}\r\n            >\r\n              by {plan.trainerName}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n\r\n        <Box\r\n          sx={{ mt: 2, pt: 1, borderTop: '1px solid', borderColor: 'divider' }}\r\n        >\r\n          <Typography variant='caption' color='text.secondary'>\r\n            Created: {new Date(plan.createdDate).toLocaleDateString()}\r\n          </Typography>\r\n          {plan.lastModified !== plan.createdDate && (\r\n            <Typography variant='caption' color='text.secondary' sx={{ ml: 1 }}>\r\n              • Modified: {new Date(plan.lastModified).toLocaleDateString()}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default WorkoutPlanCard;\r\n","import React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  FormHelperText,\r\n} from '@mui/material';\r\nimport {\r\n  WORKOUT_TYPES,\r\n  DIFFICULTY_LEVELS,\r\n  PLAN_STATUS,\r\n} from '../workoutPlan.constants';\r\nimport { validateWorkoutPlan, generatePlanId } from '../workoutPlan.utils';\r\n\r\nconst WorkoutPlanForm = ({\r\n  open,\r\n  onClose,\r\n  onSave,\r\n  plan = null,\r\n  trainerId = '1',\r\n  trainerName = 'Current Trainer',\r\n}) => {\r\n  const [formData, setFormData] = useState(() => {\r\n    if (plan) {\r\n      return {\r\n        name: plan.name,\r\n        description: plan.description,\r\n        type: plan.type,\r\n        difficulty: plan.difficulty,\r\n        duration: plan.duration,\r\n        status: plan.status || 'draft',\r\n        memberId: plan.memberId || '',\r\n        memberName: plan.memberName || '',\r\n        tags: plan.tags ? plan.tags.join(', ') : '',\r\n      };\r\n    }\r\n    return {\r\n      name: '',\r\n      description: '',\r\n      type: 'strength',\r\n      difficulty: 'beginner',\r\n      duration: 30,\r\n      status: 'draft',\r\n      memberId: '',\r\n      memberName: '',\r\n      tags: '',\r\n    };\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleInputChange = (field) => (event) => {\r\n    const value = event.target.value;\r\n    setFormData((prev) => ({ ...prev, [field]: value }));\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    setIsSubmitting(true);\r\n\r\n    // Validate form data\r\n    const validation = validateWorkoutPlan(formData);\r\n    if (!validation.isValid) {\r\n      const fieldErrors = {};\r\n      validation.errors.forEach((error) => {\r\n        if (error.includes('name')) fieldErrors.name = error;\r\n        if (error.includes('type')) fieldErrors.type = error;\r\n        if (error.includes('difficulty')) fieldErrors.difficulty = error;\r\n        if (error.includes('Duration')) fieldErrors.duration = error;\r\n      });\r\n      setErrors(fieldErrors);\r\n      setIsSubmitting(false);\r\n      return;\r\n    }\r\n\r\n    // Prepare plan data\r\n    const planData = {\r\n      ...formData,\r\n      id: plan?.id || generatePlanId(),\r\n      trainerId,\r\n      trainerName,\r\n      duration: parseInt(formData.duration),\r\n      exercises: plan?.exercises || [],\r\n      tags: formData.tags\r\n        ? formData.tags\r\n            .split(',')\r\n            .map((tag) => tag.trim())\r\n            .filter(Boolean)\r\n        : [],\r\n      createdDate: plan?.createdDate || new Date().toISOString().split('T')[0],\r\n      lastModified: new Date().toISOString().split('T')[0],\r\n    };\r\n\r\n    try {\r\n      await onSave(planData);\r\n      handleClose();\r\n    } catch (error) {\r\n      console.error('Error saving workout plan:', error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    if (!isSubmitting) {\r\n      setFormData({\r\n        name: '',\r\n        description: '',\r\n        type: 'strength',\r\n        difficulty: 'beginner',\r\n        duration: 30,\r\n        status: 'draft',\r\n        memberId: '',\r\n        memberName: '',\r\n        tags: '',\r\n      });\r\n      setErrors({});\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      maxWidth='md'\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: { minHeight: '70vh' },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        {plan ? 'Edit Workout Plan' : 'Create New Workout Plan'}\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <Box sx={{ pt: 1 }}>\r\n          <Grid container spacing={3}>\r\n            {/* Basic Information */}\r\n            <Grid size={{ xs: 12 }}>\r\n              <Typography variant='h6' gutterBottom color='primary'>\r\n                Basic Information\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12 }}>\r\n              <TextField\r\n                fullWidth\r\n                label='Plan Name *'\r\n                value={formData.name}\r\n                onChange={handleInputChange('name')}\r\n                error={!!errors.name}\r\n                helperText={errors.name}\r\n                placeholder='e.g., Beginner Full Body Workout'\r\n              />\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12 }}>\r\n              <TextField\r\n                fullWidth\r\n                label='Description'\r\n                multiline\r\n                rows={3}\r\n                value={formData.description}\r\n                onChange={handleInputChange('description')}\r\n                placeholder='Describe the workout plan, its goals, and target audience...'\r\n              />\r\n            </Grid>\r\n\r\n            {/* Plan Details */}\r\n            <Grid size={{ xs: 12 }}>\r\n              <Typography\r\n                variant='h6'\r\n                gutterBottom\r\n                color='primary'\r\n                sx={{ mt: 2 }}\r\n              >\r\n                Plan Details\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 4 }}>\r\n              <FormControl fullWidth error={!!errors.type}>\r\n                <InputLabel>Workout Type *</InputLabel>\r\n                <Select\r\n                  value={formData.type}\r\n                  label='Workout Type *'\r\n                  onChange={handleInputChange('type')}\r\n                >\r\n                  {Object.entries(WORKOUT_TYPES).map(([key, value]) => (\r\n                    <MenuItem key={key} value={key}>\r\n                      {value}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.type && <FormHelperText>{errors.type}</FormHelperText>}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 4 }}>\r\n              <FormControl fullWidth error={!!errors.difficulty}>\r\n                <InputLabel>Difficulty Level *</InputLabel>\r\n                <Select\r\n                  value={formData.difficulty}\r\n                  label='Difficulty Level *'\r\n                  onChange={handleInputChange('difficulty')}\r\n                >\r\n                  {Object.entries(DIFFICULTY_LEVELS).map(([key, value]) => (\r\n                    <MenuItem key={key} value={key}>\r\n                      {value}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n                {errors.difficulty && (\r\n                  <FormHelperText>{errors.difficulty}</FormHelperText>\r\n                )}\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 4 }}>\r\n              <TextField\r\n                fullWidth\r\n                label='Duration (minutes) *'\r\n                type='number'\r\n                value={formData.duration}\r\n                onChange={handleInputChange('duration')}\r\n                error={!!errors.duration}\r\n                helperText={errors.duration}\r\n                inputProps={{ min: 5, max: 180 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 6 }}>\r\n              <FormControl fullWidth>\r\n                <InputLabel>Status</InputLabel>\r\n                <Select\r\n                  value={formData.status}\r\n                  label='Status'\r\n                  onChange={handleInputChange('status')}\r\n                >\r\n                  {Object.entries(PLAN_STATUS).map(([key, value]) => (\r\n                    <MenuItem key={key} value={key}>\r\n                      {value}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 6 }}>\r\n              <TextField\r\n                fullWidth\r\n                label='Tags'\r\n                value={formData.tags}\r\n                onChange={handleInputChange('tags')}\r\n                placeholder='strength, beginner, full-body'\r\n                helperText='Separate tags with commas'\r\n              />\r\n            </Grid>\r\n\r\n            {/* Member Assignment */}\r\n            <Grid size={{ xs: 12 }}>\r\n              <Typography\r\n                variant='h6'\r\n                gutterBottom\r\n                color='primary'\r\n                sx={{ mt: 2 }}\r\n              >\r\n                Member Assignment\r\n              </Typography>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 6 }}>\r\n              <TextField\r\n                fullWidth\r\n                label='Member Name'\r\n                value={formData.memberName}\r\n                onChange={handleInputChange('memberName')}\r\n                placeholder='Assign to member (optional)'\r\n              />\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, sm: 6 }}>\r\n              <TextField\r\n                fullWidth\r\n                label='Member ID'\r\n                value={formData.memberId}\r\n                onChange={handleInputChange('memberId')}\r\n                placeholder='Member ID (optional)'\r\n              />\r\n            </Grid>\r\n\r\n            {/* Exercise Preview */}\r\n            <Grid size={{ xs: 12 }}>\r\n              <Typography\r\n                variant='h6'\r\n                gutterBottom\r\n                color='primary'\r\n                sx={{ mt: 2 }}\r\n              >\r\n                Exercises\r\n              </Typography>\r\n              <Box\r\n                sx={{\r\n                  p: 2,\r\n                  border: '1px dashed',\r\n                  borderColor: 'divider',\r\n                  borderRadius: 1,\r\n                  textAlign: 'center',\r\n                  minHeight: 80,\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  bgcolor: 'grey.50',\r\n                }}\r\n              >\r\n                <Typography variant='body2' color='text.secondary'>\r\n                  {plan?.exercises?.length > 0\r\n                    ? `${plan.exercises.length} exercises configured`\r\n                    : 'Exercise management will be available after creating the plan'}\r\n                </Typography>\r\n              </Box>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </DialogContent>\r\n\r\n      <DialogActions sx={{ p: 2.5, gap: 1 }}>\r\n        <Button\r\n          onClick={handleClose}\r\n          disabled={isSubmitting}\r\n          variant='outlined'\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleSubmit}\r\n          variant='contained'\r\n          disabled={isSubmitting}\r\n        >\r\n          {isSubmitting ? 'Saving...' : plan ? 'Update Plan' : 'Create Plan'}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default WorkoutPlanForm;\r\n","import React from 'react';\r\nimport {\r\n  Box,\r\n  TextField,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport { Search, Clear } from '@mui/icons-material';\r\nimport {\r\n  WORKOUT_TYPES,\r\n  DIFFICULTY_LEVELS,\r\n  PLAN_STATUS,\r\n} from '../workoutPlan.constants';\r\n\r\nconst WorkoutPlanFilters = ({\r\n  searchTerm,\r\n  onSearchChange,\r\n  typeFilter,\r\n  onTypeFilterChange,\r\n  difficultyFilter,\r\n  onDifficultyFilterChange,\r\n  statusFilter,\r\n  onStatusFilterChange,\r\n  onClearFilters,\r\n}) => {\r\n  const hasActiveFilters =\r\n    searchTerm ||\r\n    typeFilter !== 'all' ||\r\n    difficultyFilter !== 'all' ||\r\n    statusFilter !== 'all';\r\n\r\n  return (\r\n    <Box sx={{ mb: 3 }}>\r\n      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>\r\n        <TextField\r\n          size='small'\r\n          placeholder='Search plans...'\r\n          value={searchTerm}\r\n          onChange={(e) => onSearchChange(e.target.value)}\r\n          sx={{ minWidth: 250, flexGrow: 1 }}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position='start'>\r\n                <Search />\r\n              </InputAdornment>\r\n            ),\r\n            endAdornment: searchTerm && (\r\n              <InputAdornment position='end'>\r\n                <Clear\r\n                  sx={{ cursor: 'pointer' }}\r\n                  onClick={() => onSearchChange('')}\r\n                />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <FormControl size='small' sx={{ minWidth: 160 }}>\r\n          <InputLabel>Workout Type</InputLabel>\r\n          <Select\r\n            value={typeFilter}\r\n            label='Workout Type'\r\n            onChange={(e) => onTypeFilterChange(e.target.value)}\r\n          >\r\n            <MenuItem value='all'>All Types</MenuItem>\r\n            {Object.entries(WORKOUT_TYPES).map(([key, value]) => (\r\n              <MenuItem key={key} value={key}>\r\n                {value}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl size='small' sx={{ minWidth: 140 }}>\r\n          <InputLabel>Difficulty</InputLabel>\r\n          <Select\r\n            value={difficultyFilter}\r\n            label='Difficulty'\r\n            onChange={(e) => onDifficultyFilterChange(e.target.value)}\r\n          >\r\n            <MenuItem value='all'>All Levels</MenuItem>\r\n            {Object.entries(DIFFICULTY_LEVELS).map(([key, value]) => (\r\n              <MenuItem key={key} value={key}>\r\n                {value}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <FormControl size='small' sx={{ minWidth: 120 }}>\r\n          <InputLabel>Status</InputLabel>\r\n          <Select\r\n            value={statusFilter}\r\n            label='Status'\r\n            onChange={(e) => onStatusFilterChange(e.target.value)}\r\n          >\r\n            <MenuItem value='all'>All Status</MenuItem>\r\n            {Object.entries(PLAN_STATUS).map(([key, value]) => (\r\n              <MenuItem key={key} value={key}>\r\n                {value}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n\r\n      {hasActiveFilters && (\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n          <Chip\r\n            label='Clear all filters'\r\n            variant='outlined'\r\n            size='small'\r\n            onClick={onClearFilters}\r\n            onDelete={onClearFilters}\r\n            deleteIcon={<Clear />}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WorkoutPlanFilters;\r\n","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid, Box } from '@mui/material';\r\nimport {\r\n  FitnessCenter,\r\n  Assignment,\r\n  TrendingUp,\r\n  LocalFireDepartment,\r\n} from '@mui/icons-material';\r\nimport { getWorkoutPlanStats } from '../workoutPlan.utils';\r\n\r\nconst WorkoutPlanStats = ({ plans }) => {\r\n  const stats = getWorkoutPlanStats(plans);\r\n\r\n  const statCards = [\r\n    {\r\n      title: 'Total Plans',\r\n      value: stats.total,\r\n      icon: <Assignment color='primary' />,\r\n      color: 'primary.main',\r\n    },\r\n    {\r\n      title: 'Active Plans',\r\n      value: stats.active,\r\n      icon: <TrendingUp color='success' />,\r\n      color: 'success.main',\r\n    },\r\n    {\r\n      title: 'Avg Duration',\r\n      value: `${stats.averageDuration}min`,\r\n      icon: <FitnessCenter color='info' />,\r\n      color: 'info.main',\r\n    },\r\n    {\r\n      title: 'Total Calories',\r\n      value: stats.totalCalories.toLocaleString(),\r\n      icon: <LocalFireDepartment color='warning' />,\r\n      color: 'warning.main',\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Grid container spacing={3} sx={{ mb: 3 }}>\r\n      {statCards.map((stat, index) => (\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }} key={index}>\r\n          <Card>\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <Box sx={{ mb: 1 }}>{stat.icon}</Box>\r\n              <Typography\r\n                variant='h4'\r\n                component='div'\r\n                color={stat.color}\r\n                sx={{ fontWeight: 'bold', mb: 0.5 }}\r\n              >\r\n                {stat.value}\r\n              </Typography>\r\n              <Typography variant='body2' color='text.secondary'>\r\n                {stat.title}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WorkoutPlanStats;\r\n","import React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Grid,\r\n  Snackbar,\r\n  Alert,\r\n  Fab,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from '@mui/material';\r\nimport { Add } from '@mui/icons-material';\r\nimport { useUser } from '../../context/UserContext';\r\nimport {\r\n  WorkoutPlanCard,\r\n  WorkoutPlanForm,\r\n  WorkoutPlanFilters,\r\n  WorkoutPlanStats,\r\n} from './components';\r\nimport { MOCK_WORKOUT_PLANS } from './workoutPlan.constants';\r\nimport {\r\n  filterPlansByType,\r\n  filterPlansByDifficulty,\r\n  filterPlansByStatus,\r\n  searchWorkoutPlans,\r\n  sortWorkoutPlans,\r\n} from './workoutPlan.utils';\r\n\r\nconst WorkoutPlanManagement = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));\r\n  const { user, permissions } = useUser();\r\n\r\n  // State management\r\n  const [workoutPlans, setWorkoutPlans] = useState(MOCK_WORKOUT_PLANS);\r\n  const [selectedPlan, setSelectedPlan] = useState(null);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success',\r\n  });\r\n\r\n  // Filter state\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [typeFilter, setTypeFilter] = useState('all');\r\n  const [difficultyFilter, setDifficultyFilter] = useState('all');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  // Future sorting functionality\r\n  // const [sortField, setSortField] = useState('lastModified');\r\n  // const [sortDirection, setSortDirection] = useState('desc');\r\n  const sortField = 'lastModified';\r\n  const sortDirection = 'desc';\r\n\r\n  // Computed filtered and sorted plans\r\n  const filteredAndSortedPlans = useMemo(() => {\r\n    let filtered = workoutPlans;\r\n\r\n    // Apply search\r\n    if (searchTerm) {\r\n      filtered = searchWorkoutPlans(filtered, searchTerm);\r\n    }\r\n\r\n    // Apply filters\r\n    filtered = filterPlansByType(filtered, typeFilter);\r\n    filtered = filterPlansByDifficulty(filtered, difficultyFilter);\r\n    filtered = filterPlansByStatus(filtered, statusFilter);\r\n\r\n    // Apply sorting\r\n    filtered = sortWorkoutPlans(filtered, sortField, sortDirection);\r\n\r\n    return filtered;\r\n  }, [\r\n    workoutPlans,\r\n    searchTerm,\r\n    typeFilter,\r\n    difficultyFilter,\r\n    statusFilter,\r\n    sortField,\r\n    sortDirection,\r\n  ]);\r\n\r\n  // Check if user can manage plans\r\n  const canManagePlans =\r\n    permissions?.canManageTrainers ||\r\n    user?.role === 'admin' ||\r\n    user?.role === 'trainer';\r\n\r\n  // Event handlers\r\n  const handleCreatePlan = () => {\r\n    setSelectedPlan(null);\r\n    setShowForm(true);\r\n  };\r\n\r\n  const handleEditPlan = (plan) => {\r\n    setSelectedPlan(plan);\r\n    setShowForm(true);\r\n  };\r\n\r\n  const handleViewPlan = (plan) => {\r\n    // For now, just edit the plan. In future, this could open a detailed view\r\n    if (canManagePlans) {\r\n      handleEditPlan(plan);\r\n    }\r\n  };\r\n\r\n  const handleSavePlan = async (planData) => {\r\n    try {\r\n      if (selectedPlan) {\r\n        // Update existing plan\r\n        setWorkoutPlans((prev) =>\r\n          prev.map((plan) => (plan.id === selectedPlan.id ? planData : plan))\r\n        );\r\n        showSnackbar('Workout plan updated successfully', 'success');\r\n      } else {\r\n        // Add new plan\r\n        setWorkoutPlans((prev) => [...prev, planData]);\r\n        showSnackbar('Workout plan created successfully', 'success');\r\n      }\r\n    } catch (error) {\r\n      showSnackbar('Error saving workout plan', 'error');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleDeletePlan = (planId) => {\r\n    if (window.confirm('Are you sure you want to delete this workout plan?')) {\r\n      setWorkoutPlans((prev) => prev.filter((plan) => plan.id !== planId));\r\n      showSnackbar('Workout plan deleted successfully', 'success');\r\n    }\r\n  };\r\n\r\n  const handleClearFilters = () => {\r\n    setSearchTerm('');\r\n    setTypeFilter('all');\r\n    setDifficultyFilter('all');\r\n    setStatusFilter('all');\r\n  };\r\n\r\n  const showSnackbar = (message, severity = 'success') => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar((prev) => ({ ...prev, open: false }));\r\n  };\r\n\r\n  // Permission check\r\n  if (\r\n    !permissions?.canViewTrainers &&\r\n    user?.role !== 'admin' &&\r\n    user?.role !== 'trainer'\r\n  ) {\r\n    return (\r\n      <Box sx={{ p: 3, textAlign: 'center' }}>\r\n        <Typography variant='h5' color='error' gutterBottom>\r\n          Access Denied\r\n        </Typography>\r\n        <Typography variant='body1'>\r\n          You don't have permission to view workout plans.\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Box sx={{ p: 3 }}>\r\n      {/* Header */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 3,\r\n          flexDirection: isMobile ? 'column' : 'row',\r\n          gap: isMobile ? 2 : 0,\r\n        }}\r\n      >\r\n        <Typography variant='h4' component='h1'>\r\n          Workout Plans\r\n        </Typography>\r\n        {canManagePlans && !isMobile && (\r\n          <Button\r\n            variant='contained'\r\n            startIcon={<Add />}\r\n            onClick={handleCreatePlan}\r\n            size='large'\r\n          >\r\n            Create Plan\r\n          </Button>\r\n        )}\r\n      </Box>\r\n\r\n      {/* Statistics */}\r\n      <WorkoutPlanStats plans={workoutPlans} />\r\n\r\n      {/* Filters */}\r\n      <WorkoutPlanFilters\r\n        searchTerm={searchTerm}\r\n        onSearchChange={setSearchTerm}\r\n        typeFilter={typeFilter}\r\n        onTypeFilterChange={setTypeFilter}\r\n        difficultyFilter={difficultyFilter}\r\n        onDifficultyFilterChange={setDifficultyFilter}\r\n        statusFilter={statusFilter}\r\n        onStatusFilterChange={setStatusFilter}\r\n        onClearFilters={handleClearFilters}\r\n      />\r\n\r\n      {/* Results Summary */}\r\n      <Box sx={{ mb: 2 }}>\r\n        <Typography variant='body2' color='text.secondary'>\r\n          Showing {filteredAndSortedPlans.length} of {workoutPlans.length}{' '}\r\n          workout plans\r\n        </Typography>\r\n      </Box>\r\n\r\n      {/* Workout Plans Grid */}\r\n      {filteredAndSortedPlans.length === 0 ? (\r\n        <Box\r\n          sx={{\r\n            textAlign: 'center',\r\n            py: 8,\r\n            px: 2,\r\n          }}\r\n        >\r\n          <Typography variant='h6' color='text.secondary' gutterBottom>\r\n            {searchTerm ||\r\n            typeFilter !== 'all' ||\r\n            difficultyFilter !== 'all' ||\r\n            statusFilter !== 'all'\r\n              ? 'No workout plans match your filters'\r\n              : 'No workout plans found'}\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary' sx={{ mb: 3 }}>\r\n            {canManagePlans &&\r\n              workoutPlans.length === 0 &&\r\n              'Create your first workout plan to get started'}\r\n          </Typography>\r\n          {canManagePlans && workoutPlans.length === 0 && (\r\n            <Button\r\n              variant='contained'\r\n              startIcon={<Add />}\r\n              onClick={handleCreatePlan}\r\n              size='large'\r\n            >\r\n              Create Your First Plan\r\n            </Button>\r\n          )}\r\n        </Box>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {filteredAndSortedPlans.map((plan) => (\r\n            <Grid size={{ xs: 12, sm: 6, lg: 4 }} key={plan.id}>\r\n              <WorkoutPlanCard\r\n                plan={plan}\r\n                onEdit={canManagePlans ? handleEditPlan : undefined}\r\n                onDelete={canManagePlans ? handleDeletePlan : undefined}\r\n                onView={handleViewPlan}\r\n                canManage={canManagePlans}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n\r\n      {/* Mobile FAB */}\r\n      {canManagePlans && isMobile && (\r\n        <Fab\r\n          color='primary'\r\n          aria-label='create workout plan'\r\n          sx={{\r\n            position: 'fixed',\r\n            bottom: 16,\r\n            right: 16,\r\n          }}\r\n          onClick={handleCreatePlan}\r\n        >\r\n          <Add />\r\n        </Fab>\r\n      )}\r\n\r\n      {/* Workout Plan Form Dialog */}\r\n      <WorkoutPlanForm\r\n        open={showForm}\r\n        onClose={() => setShowForm(false)}\r\n        onSave={handleSavePlan}\r\n        plan={selectedPlan}\r\n        trainerId={user?.id || '1'}\r\n        trainerName={user?.name || 'Current Trainer'}\r\n      />\r\n\r\n      {/* Snackbar for notifications */}\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity}>\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default WorkoutPlanManagement;\r\n"],"names":["WORKOUT_TYPES","strength","cardio","flexibility","balance","hiit","functional","sports","rehabilitation","DIFFICULTY_LEVELS","beginner","intermediate","advanced","expert","PLAN_STATUS","draft","active","completed","archived","MOCK_WORKOUT_PLANS","id","name","description","type","difficulty","duration","status","trainerId","trainerName","memberId","memberName","targetMuscleGroups","calories","exercises","category","sets","reps","rest","weight","notes","muscleGroups","createdDate","lastModified","tags","getEstimatedCalories","plan","rate","Math","round","getDifficultyColor","getStatusColor","_ref","onEdit","onDelete","onView","canManage","_jsxs","Card","sx","height","cursor","transition","transform","boxShadow","onClick","handleView","children","_jsx","CardHeader","title","titleTypographyProps","variant","fontSize","fontWeight","lineHeight","overflow","textOverflow","display","WebkitLineClamp","WebkitBoxOrient","subheader","Box","mt","Chip","label","color","size","mr","mb","action","IconButton","e","stopPropagation","Edit","Delete","CardContent","pt","Typography","minHeight","flexDirection","gap","alignItems","Schedule","FitnessCenter","length","LocalFireDepartment","Person","whiteSpace","flex","Assignment","borderTop","borderColor","Date","toLocaleDateString","ml","_plan$exercises","open","onClose","onSave","formData","setFormData","useState","join","errors","setErrors","isSubmitting","setIsSubmitting","handleInputChange","field","event","value","target","prev","_objectSpread","handleClose","Dialog","maxWidth","fullWidth","PaperProps","DialogTitle","DialogContent","Grid","container","spacing","xs","gutterBottom","TextField","onChange","error","helperText","placeholder","multiline","rows","sm","FormControl","InputLabel","Select","Object","entries","map","_ref2","key","MenuItem","FormHelperText","_ref3","inputProps","min","max","_ref4","p","border","borderRadius","textAlign","justifyContent","bgcolor","concat","DialogActions","Button","disabled","async","validation","planData","trim","push","isValid","validateWorkoutPlan","fieldErrors","forEach","includes","now","toString","toUpperCase","random","substr","parseInt","split","tag","filter","Boolean","toISOString","console","searchTerm","onSearchChange","typeFilter","onTypeFilterChange","difficultyFilter","onDifficultyFilterChange","statusFilter","onStatusFilterChange","onClearFilters","hasActiveFilters","flexWrap","minWidth","flexGrow","InputProps","startAdornment","InputAdornment","position","Search","endAdornment","Clear","deleteIcon","plans","stats","total","byType","byDifficulty","averageDuration","reduce","sum","totalCalories","getWorkoutPlanStats","statCards","icon","TrendingUp","toLocaleString","stat","index","md","py","component","WorkoutPlanManagement","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","user","permissions","useUser","workoutPlans","setWorkoutPlans","selectedPlan","setSelectedPlan","showForm","setShowForm","snackbar","setSnackbar","message","severity","setSearchTerm","setTypeFilter","setDifficultyFilter","setStatusFilter","sortField","sortDirection","filteredAndSortedPlans","useMemo","filtered","filterPlansByType","searchWorkoutPlans","term","toLowerCase","some","filterPlansByDifficulty","filterPlansByStatus","direction","arguments","undefined","sort","a","b","aVal","bVal","sortWorkoutPlans","canManagePlans","canManageTrainers","role","handleCreatePlan","handleEditPlan","handleViewPlan","handleDeletePlan","planId","window","confirm","showSnackbar","handleCloseSnackbar","canViewTrainers","startIcon","Add","WorkoutPlanStats","WorkoutPlanFilters","handleClearFilters","px","lg","WorkoutPlanCard","Fab","bottom","right","WorkoutPlanForm","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}
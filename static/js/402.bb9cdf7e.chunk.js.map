{"version":3,"file":"static/js/402.bb9cdf7e.chunk.js","mappings":"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","sources":["features/DietPlanManagement/constants/index.js","features/DietPlanManagement/utils/dietPlanUtils.js","features/DietPlanManagement/components/ProgressModal.jsx","features/DietPlanManagement/context/DietPlanContext.jsx","features/DietPlanManagement/components/DietPlanDashboard.jsx","features/DietPlanManagement/components/MealPlanDetails.jsx","features/DietPlanManagement/components/DietPlanCard.jsx","features/DietPlanManagement/components/DietPlanList.jsx","features/DietPlanManagement/components/AssignmentList.jsx","features/DietPlanManagement/components/AnalyticsView.jsx","features/DietPlanManagement/components/CreatePlanModal.jsx","features/DietPlanManagement/components/AssignPlanModal.jsx","features/DietPlanManagement/components/DietPlanApp.jsx","features/DietPlanManagement/DietPlanManagementApp.jsx"],"sourcesContent":["/**\r\n * Diet Plan Management Constants\r\n * Centralized constants for the diet plan management feature\r\n */\r\n\r\n// Diet Plan Types\r\nexport const DIET_PLAN_TYPES = [\r\n  'weight-loss',\r\n  'muscle-gain',\r\n  'maintenance',\r\n  'cutting',\r\n  'bulking',\r\n  'therapeutic',\r\n];\r\n\r\nexport const DIET_PLAN_TYPE_LABELS = {\r\n  'weight-loss': 'Weight Loss',\r\n  'muscle-gain': 'Muscle Gain',\r\n  maintenance: 'Maintenance',\r\n  cutting: 'Cutting',\r\n  bulking: 'Bulking',\r\n  therapeutic: 'Therapeutic',\r\n};\r\n\r\n// Diet Goals\r\nexport const DIET_GOALS = [\r\n  'weight-loss',\r\n  'muscle-gain',\r\n  'maintenance',\r\n  'strength-building',\r\n  'endurance',\r\n  'flexibility',\r\n  'general-health',\r\n];\r\n\r\nexport const DIET_GOAL_LABELS = {\r\n  'weight-loss': 'Weight Loss',\r\n  'muscle-gain': 'Muscle Gain',\r\n  maintenance: 'Maintenance',\r\n  'strength-building': 'Strength Building',\r\n  endurance: 'Endurance',\r\n  flexibility: 'Flexibility',\r\n  'general-health': 'General Health',\r\n};\r\n\r\n// Meal Types\r\nexport const MEAL_TYPES = [\r\n  'breakfast',\r\n  'lunch',\r\n  'dinner',\r\n  'snack',\r\n  'pre-workout',\r\n  'post-workout',\r\n];\r\n\r\nexport const MEAL_TYPE_LABELS = {\r\n  breakfast: 'Breakfast',\r\n  lunch: 'Lunch',\r\n  dinner: 'Dinner',\r\n  snack: 'Snack',\r\n  'pre-workout': 'Pre-Workout',\r\n  'post-workout': 'Post-Workout',\r\n};\r\n\r\n// Assignment Status\r\nexport const ASSIGNMENT_STATUS = [\r\n  'active',\r\n  'paused',\r\n  'completed',\r\n  'cancelled',\r\n  'pending',\r\n];\r\n\r\nexport const ASSIGNMENT_STATUS_LABELS = {\r\n  active: 'Active',\r\n  paused: 'Paused',\r\n  completed: 'Completed',\r\n  cancelled: 'Cancelled',\r\n  pending: 'Pending',\r\n};\r\n\r\n// Status Colors\r\nexport const STATUS_COLORS = {\r\n  active: 'success',\r\n  paused: 'warning',\r\n  completed: 'info',\r\n  cancelled: 'error',\r\n  pending: 'default',\r\n};\r\n\r\n// Diet Plan Status Colors\r\nexport const DIET_PLAN_STATUS_COLORS = {\r\n  active: 'success',\r\n  inactive: 'default',\r\n};\r\n\r\n// Diet Plan Type Colors\r\nexport const DIET_PLAN_TYPE_COLORS = {\r\n  'weight-loss': 'error',\r\n  'muscle-gain': 'success',\r\n  maintenance: 'info',\r\n  cutting: 'warning',\r\n  bulking: 'secondary',\r\n  therapeutic: 'primary',\r\n};\r\n\r\n// Activity Levels\r\nexport const ACTIVITY_LEVELS = [\r\n  'sedentary',\r\n  'low',\r\n  'moderate',\r\n  'high',\r\n  'very-high',\r\n];\r\n\r\nexport const ACTIVITY_LEVEL_LABELS = {\r\n  sedentary: 'Sedentary',\r\n  low: 'Low Active',\r\n  moderate: 'Moderately Active',\r\n  high: 'Very Active',\r\n  'very-high': 'Extremely Active',\r\n};\r\n\r\n// Activity Level Multipliers for calorie calculation\r\nexport const ACTIVITY_MULTIPLIERS = {\r\n  sedentary: 1.2,\r\n  low: 1.375,\r\n  moderate: 1.55,\r\n  high: 1.725,\r\n  'very-high': 1.9,\r\n};\r\n\r\n// Dietary Restrictions\r\nexport const DIETARY_RESTRICTIONS = [\r\n  'none',\r\n  'vegetarian',\r\n  'vegan',\r\n  'gluten-free',\r\n  'dairy-free',\r\n  'keto',\r\n  'paleo',\r\n  'low-carb',\r\n  'low-fat',\r\n  'diabetic',\r\n];\r\n\r\nexport const DIETARY_RESTRICTION_LABELS = {\r\n  none: 'No Restrictions',\r\n  vegetarian: 'Vegetarian',\r\n  vegan: 'Vegan',\r\n  'gluten-free': 'Gluten-Free',\r\n  'dairy-free': 'Dairy-Free',\r\n  keto: 'Ketogenic',\r\n  paleo: 'Paleo',\r\n  'low-carb': 'Low Carb',\r\n  'low-fat': 'Low Fat',\r\n  diabetic: 'Diabetic',\r\n};\r\n\r\n// Chart Colors\r\nexport const CHART_COLORS = {\r\n  PRIMARY: '#1976d2',\r\n  SECONDARY: '#dc004e',\r\n  SUCCESS: '#2e7d32',\r\n  WARNING: '#ed6c02',\r\n  ERROR: '#d32f2f',\r\n  INFO: '#0288d1',\r\n  PROTEIN: '#ff6b6b',\r\n  CARBS: '#4ecdc4',\r\n  FATS: '#ffe66d',\r\n};\r\n\r\n// Macro Nutrition Colors\r\nexport const MACRO_COLORS = {\r\n  protein: CHART_COLORS.PROTEIN,\r\n  carbs: CHART_COLORS.CARBS,\r\n  fats: CHART_COLORS.FATS,\r\n};\r\n\r\n// Default Macro Ratios\r\nexport const DEFAULT_MACRO_RATIOS = {\r\n  'weight-loss': { protein: 30, carbs: 40, fats: 30 },\r\n  'muscle-gain': { protein: 35, carbs: 40, fats: 25 },\r\n  maintenance: { protein: 25, carbs: 45, fats: 30 },\r\n  cutting: { protein: 40, carbs: 30, fats: 30 },\r\n  bulking: { protein: 30, carbs: 50, fats: 20 },\r\n};\r\n\r\n// Pagination\r\nexport const PAGINATION_OPTIONS = [10, 25, 50, 100];\r\nexport const DEFAULT_PAGE_SIZE = 25;\r\n\r\n// Form Validation\r\nexport const VALIDATION_RULES = {\r\n  PLAN_NAME_MIN_LENGTH: 3,\r\n  PLAN_NAME_MAX_LENGTH: 100,\r\n  DESCRIPTION_MAX_LENGTH: 500,\r\n  MIN_CALORIES: 800,\r\n  MAX_CALORIES: 5000,\r\n  MIN_DURATION: 7,\r\n  MAX_DURATION: 365,\r\n  MIN_PROTEIN: 10,\r\n  MAX_PROTEIN: 50,\r\n  MIN_CARBS: 20,\r\n  MAX_CARBS: 70,\r\n  MIN_FATS: 15,\r\n  MAX_FATS: 50,\r\n};\r\n\r\n// UI Constants\r\nexport const DRAWER_WIDTH = 320;\r\nexport const MOBILE_BREAKPOINT = 'md';\r\nexport const CARD_ELEVATION = 2;\r\nexport const MODAL_MAX_WIDTH = 'md';\r\n\r\n// Date Formats\r\nexport const DATE_FORMATS = {\r\n  DISPLAY: 'MMM dd, yyyy',\r\n  INPUT: 'yyyy-MM-dd',\r\n  FULL: 'MMM dd, yyyy HH:mm',\r\n};\r\n\r\n// Export all constants\r\nconst dietPlanConstants = {\r\n  DIET_PLAN_TYPES,\r\n  DIET_PLAN_TYPE_LABELS,\r\n  DIET_GOALS,\r\n  DIET_GOAL_LABELS,\r\n  MEAL_TYPES,\r\n  MEAL_TYPE_LABELS,\r\n  ASSIGNMENT_STATUS,\r\n  ASSIGNMENT_STATUS_LABELS,\r\n  STATUS_COLORS,\r\n  DIET_PLAN_STATUS_COLORS,\r\n  DIET_PLAN_TYPE_COLORS,\r\n  ACTIVITY_LEVELS,\r\n  ACTIVITY_LEVEL_LABELS,\r\n  ACTIVITY_MULTIPLIERS,\r\n  DIETARY_RESTRICTIONS,\r\n  DIETARY_RESTRICTION_LABELS,\r\n  CHART_COLORS,\r\n  MACRO_COLORS,\r\n  DEFAULT_MACRO_RATIOS,\r\n  PAGINATION_OPTIONS,\r\n  DEFAULT_PAGE_SIZE,\r\n  VALIDATION_RULES,\r\n  DRAWER_WIDTH,\r\n  MOBILE_BREAKPOINT,\r\n  CARD_ELEVATION,\r\n  MODAL_MAX_WIDTH,\r\n  DATE_FORMATS,\r\n};\r\n\r\nexport default dietPlanConstants;\r\n","/**\r\n * Diet Plan Utility Functions\r\n * Helper functions for diet plan calculations and formatting\r\n */\r\n\r\nimport { ACTIVITY_MULTIPLIERS, MACRO_COLORS } from '../constants';\r\n\r\n/**\r\n * Calculate Basal Metabolic Rate (BMR) using Mifflin-St Jeor Equation\r\n * @param {number} weight - Weight in kg\r\n * @param {number} height - Height in cm\r\n * @param {number} age - Age in years\r\n * @param {string} gender - Gender ('male' or 'female')\r\n * @returns {number} BMR in calories\r\n */\r\nexport const calculateBMR = (weight, height, age, gender) => {\r\n  if (!weight || !height || !age || !gender) return 0;\r\n\r\n  const baseMetabolism = 10 * weight + 6.25 * height - 5 * age;\r\n\r\n  if (gender.toLowerCase() === 'male') {\r\n    return Math.round(baseMetabolism + 5);\r\n  } else {\r\n    return Math.round(baseMetabolism - 161);\r\n  }\r\n};\r\n\r\n/**\r\n * Calculate Total Daily Energy Expenditure (TDEE)\r\n * @param {number} bmr - Basal Metabolic Rate\r\n * @param {string} activityLevel - Activity level key\r\n * @returns {number} TDEE in calories\r\n */\r\nexport const calculateTDEE = (bmr, activityLevel) => {\r\n  if (!bmr || !activityLevel) return 0;\r\n\r\n  const multiplier = ACTIVITY_MULTIPLIERS[activityLevel] || 1.2;\r\n  return Math.round(bmr * multiplier);\r\n};\r\n\r\n/**\r\n * Calculate daily macro targets based on calories and ratios\r\n * @param {number} calories - Target daily calories\r\n * @param {Object} macroRatios - Object with protein, carbs, fats percentages\r\n * @returns {Object} Macro targets in grams\r\n */\r\nexport const calculateMacroTargets = (calories, macroRatios) => {\r\n  if (!calories || !macroRatios) return { protein: 0, carbs: 0, fats: 0 };\r\n\r\n  const { protein, carbs, fats } = macroRatios;\r\n\r\n  return {\r\n    protein: Math.round((calories * (protein / 100)) / 4), // 4 calories per gram\r\n    carbs: Math.round((calories * (carbs / 100)) / 4), // 4 calories per gram\r\n    fats: Math.round((calories * (fats / 100)) / 9), // 9 calories per gram\r\n  };\r\n};\r\n\r\n/**\r\n * Calculate total calories from macro grams\r\n * @param {number} protein - Protein in grams\r\n * @param {number} carbs - Carbohydrates in grams\r\n * @param {number} fats - Fats in grams\r\n * @returns {number} Total calories\r\n */\r\nexport const calculateCaloriesFromMacros = (protein, carbs, fats) => {\r\n  return protein * 4 + carbs * 4 + fats * 9;\r\n};\r\n\r\n/**\r\n * Calculate adherence percentage\r\n * @param {number} completedDays - Number of completed days\r\n * @param {number} totalDays - Total planned days\r\n * @returns {number} Adherence percentage\r\n */\r\nexport const calculateAdherence = (completedDays, totalDays) => {\r\n  if (!totalDays || totalDays === 0) return 0;\r\n  return Math.round((completedDays / totalDays) * 100);\r\n};\r\n\r\n/**\r\n * Calculate progress percentage\r\n * @param {Date} startDate - Plan start date\r\n * @param {Date} endDate - Plan end date\r\n * @param {Date} currentDate - Current date (optional, defaults to now)\r\n * @returns {number} Progress percentage\r\n */\r\nexport const calculateProgress = (\r\n  startDate,\r\n  endDate,\r\n  currentDate = new Date()\r\n) => {\r\n  if (!startDate || !endDate) return 0;\r\n\r\n  const start = new Date(startDate);\r\n  const end = new Date(endDate);\r\n  const current = new Date(currentDate);\r\n\r\n  if (current < start) return 0;\r\n  if (current > end) return 100;\r\n\r\n  const totalDuration = end - start;\r\n  const elapsed = current - start;\r\n\r\n  return Math.round((elapsed / totalDuration) * 100);\r\n};\r\n\r\n/**\r\n * Format calories with unit\r\n * @param {number} calories - Calorie value\r\n * @returns {string} Formatted calories\r\n */\r\nexport const formatCalories = (calories) => {\r\n  if (!calories || calories === 0) return '0 cal';\r\n  return `${calories.toLocaleString()} cal`;\r\n};\r\n\r\n/**\r\n * Format weight with unit\r\n * @param {number} weight - Weight value\r\n * @param {string} unit - Unit ('kg' or 'lbs')\r\n * @returns {string} Formatted weight\r\n */\r\nexport const formatWeight = (weight, unit = 'kg') => {\r\n  if (weight === null || weight === undefined) return '0 kg';\r\n  return `${weight.toFixed(1)} ${unit}`;\r\n};\r\n\r\n/**\r\n * Format measurement change with unit\r\n * @param {number} change - Change value\r\n * @param {string} unit - Unit (default 'cm')\r\n * @returns {string} Formatted change with direction indicator\r\n */\r\nexport const formatMeasurementChange = (change, unit = 'cm') => {\r\n  if (change === null || change === undefined || change === 0) return '0 cm';\r\n\r\n  const sign = change > 0 ? '+' : '';\r\n  return `${sign}${change.toFixed(1)} ${unit}`;\r\n};\r\n\r\n/**\r\n * Format percentage\r\n * @param {number} value - Percentage value\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted percentage\r\n */\r\nexport const formatPercentage = (value, decimals = 0) => {\r\n  if (value === null || value === undefined) return '0%';\r\n  return `${value.toFixed(decimals)}%`;\r\n};\r\n\r\n/**\r\n * Format date for display\r\n * @param {string|Date} date - Date to format\r\n * @param {string} format - Format type ('short', 'long', 'input')\r\n * @returns {string} Formatted date\r\n */\r\nexport const formatDate = (date, format = 'short') => {\r\n  if (!date) return '';\r\n\r\n  const dateObj = new Date(date);\r\n\r\n  if (isNaN(dateObj.getTime())) return '';\r\n\r\n  switch (format) {\r\n    case 'short':\r\n      return dateObj.toLocaleDateString('en-US', {\r\n        month: 'short',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n      });\r\n    case 'long':\r\n      return dateObj.toLocaleDateString('en-US', {\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n      });\r\n    case 'input':\r\n      return dateObj.toISOString().split('T')[0]; // YYYY-MM-DD format for input fields\r\n    case 'time':\r\n      return dateObj.toLocaleTimeString('en-US', {\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n      });\r\n    case 'full':\r\n      return dateObj.toLocaleDateString('en-US', {\r\n        month: 'short',\r\n        day: 'numeric',\r\n        year: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n      });\r\n    default:\r\n      return dateObj.toLocaleDateString();\r\n  }\r\n};\r\n\r\n/**\r\n * Get status color based on adherence percentage\r\n * @param {number} adherence - Adherence percentage\r\n * @returns {string} MUI color name\r\n */\r\nexport const getAdherenceColor = (adherence) => {\r\n  if (adherence >= 90) return 'success';\r\n  if (adherence >= 70) return 'warning';\r\n  return 'error';\r\n};\r\n\r\n/**\r\n * Get macro color for charts\r\n * @param {string} macroType - Macro type (protein, carbs, fats)\r\n * @returns {string} Color hex code\r\n */\r\nexport const getMacroColor = (macroType) => {\r\n  return MACRO_COLORS[macroType.toLowerCase()] || '#cccccc';\r\n};\r\n\r\n/**\r\n * Calculate days remaining in diet plan\r\n * @param {Date} endDate - Plan end date\r\n * @param {Date} currentDate - Current date (optional, defaults to now)\r\n * @returns {number} Days remaining\r\n */\r\nexport const getDaysRemaining = (endDate, currentDate = new Date()) => {\r\n  if (!endDate) return 0;\r\n\r\n  const end = new Date(endDate);\r\n  const current = new Date(currentDate);\r\n\r\n  if (current > end) return 0;\r\n\r\n  const diffTime = end - current;\r\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  return Math.max(0, diffDays);\r\n};\r\n\r\n/**\r\n * Validate macro ratios (should sum to 100%)\r\n * @param {Object} macroRatios - Object with protein, carbs, fats percentages\r\n * @returns {boolean} True if valid\r\n */\r\nexport const validateMacroRatios = (macroRatios) => {\r\n  if (!macroRatios) return false;\r\n\r\n  const { protein, carbs, fats } = macroRatios;\r\n  const total = (protein || 0) + (carbs || 0) + (fats || 0);\r\n\r\n  return Math.abs(total - 100) < 0.1; // Allow small floating point discrepancies\r\n};\r\n\r\n/**\r\n * Generate meal time suggestions based on meal type\r\n * @param {string} mealType - Meal type\r\n * @returns {string} Suggested time\r\n */\r\nexport const getMealTimesSuggestion = (mealType) => {\r\n  const suggestions = {\r\n    breakfast: '07:00',\r\n    'mid-morning': '10:00',\r\n    lunch: '12:30',\r\n    'afternoon-snack': '15:30',\r\n    'pre-workout': '16:00',\r\n    'post-workout': '17:30',\r\n    dinner: '19:00',\r\n    'evening-snack': '21:00',\r\n  };\r\n\r\n  return suggestions[mealType] || '12:00';\r\n};\r\n\r\n/**\r\n * Sort assignments by priority (active first, then by date)\r\n * @param {Array} assignments - Array of diet plan assignments\r\n * @returns {Array} Sorted assignments\r\n */\r\nexport const sortAssignmentsByPriority = (assignments) => {\r\n  if (!Array.isArray(assignments)) return [];\r\n\r\n  return [...assignments].sort((a, b) => {\r\n    // Status priority: active > pending > paused > completed > cancelled\r\n    const statusPriority = {\r\n      active: 1,\r\n      pending: 2,\r\n      paused: 3,\r\n      completed: 4,\r\n      cancelled: 5,\r\n    };\r\n\r\n    const aPriority = statusPriority[a.status] || 99;\r\n    const bPriority = statusPriority[b.status] || 99;\r\n\r\n    if (aPriority !== bPriority) {\r\n      return aPriority - bPriority;\r\n    }\r\n\r\n    // If same status, sort by assigned date (most recent first)\r\n    return new Date(b.assignedDate) - new Date(a.assignedDate);\r\n  });\r\n};\r\n\r\n/**\r\n * Filter assignments by search term\r\n * @param {Array} assignments - Array of assignments\r\n * @param {string} searchTerm - Search term\r\n * @returns {Array} Filtered assignments\r\n */\r\nexport const filterAssignments = (assignments, searchTerm) => {\r\n  if (!searchTerm || !Array.isArray(assignments)) return assignments;\r\n\r\n  const term = searchTerm.toLowerCase();\r\n\r\n  return assignments.filter((assignment) => {\r\n    return (\r\n      assignment.memberName?.toLowerCase().includes(term) ||\r\n      assignment.memberEmail?.toLowerCase().includes(term) ||\r\n      assignment.status?.toLowerCase().includes(term) ||\r\n      assignment.notes?.toLowerCase().includes(term)\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Generate chart data for macro distribution\r\n * @param {Object} macros - Macro values in grams\r\n * @returns {Array} Chart data array\r\n */\r\nexport const generateMacroChartData = (macros) => {\r\n  if (!macros) return [];\r\n\r\n  return [\r\n    {\r\n      id: 'protein',\r\n      label: 'Protein',\r\n      value: macros.protein || 0,\r\n      color: getMacroColor('protein'),\r\n    },\r\n    {\r\n      id: 'carbs',\r\n      label: 'Carbohydrates',\r\n      value: macros.carbs || 0,\r\n      color: getMacroColor('carbs'),\r\n    },\r\n    {\r\n      id: 'fats',\r\n      label: 'Fats',\r\n      value: macros.fats || 0,\r\n      color: getMacroColor('fats'),\r\n    },\r\n  ];\r\n};\r\n\r\n/**\r\n * Calculate recommended water intake based on weight and activity\r\n * @param {number} weight - Weight in kg\r\n * @param {string} activityLevel - Activity level\r\n * @returns {number} Recommended water intake in ml\r\n */\r\nexport const calculateWaterIntake = (weight, activityLevel) => {\r\n  if (!weight) return 2000; // Default 2L\r\n\r\n  // Base: 35ml per kg of body weight\r\n  let baseIntake = weight * 35;\r\n\r\n  // Activity multiplier\r\n  const activityMultiplier = {\r\n    sedentary: 1.0,\r\n    low: 1.1,\r\n    moderate: 1.2,\r\n    high: 1.3,\r\n    'very-high': 1.4,\r\n  };\r\n\r\n  const multiplier = activityMultiplier[activityLevel] || 1.0;\r\n\r\n  return Math.round(baseIntake * multiplier);\r\n};\r\n\r\nconst dietPlanUtils = {\r\n  calculateBMR,\r\n  calculateTDEE,\r\n  calculateMacroTargets,\r\n  calculateCaloriesFromMacros,\r\n  calculateAdherence,\r\n  calculateProgress,\r\n  formatCalories,\r\n  formatWeight,\r\n  formatMeasurementChange,\r\n  formatPercentage,\r\n  formatDate,\r\n  getAdherenceColor,\r\n  getMacroColor,\r\n  getDaysRemaining,\r\n  validateMacroRatios,\r\n  getMealTimesSuggestion,\r\n  sortAssignmentsByPriority,\r\n  filterAssignments,\r\n  generateMacroChartData,\r\n  calculateWaterIntake,\r\n};\r\n\r\nexport default dietPlanUtils;\r\n","/**\r\n * Progress Modal Component\r\n * Modal for viewing and updating diet plan assignment progress\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  Avatar,\r\n  Chip,\r\n  LinearProgress,\r\n  Tab,\r\n  Tabs,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  Close as CloseIcon,\r\n  Person as PersonIcon,\r\n  Restaurant as RestaurantIcon,\r\n  Assessment as AssessmentIcon,\r\n  Edit as EditIcon,\r\n} from '@mui/icons-material';\r\nimport { LineChart } from '@mui/x-charts/LineChart';\r\nimport { useDietPlan } from '../context';\r\nimport {\r\n  formatPercentage,\r\n  getAdherenceColor,\r\n  calculateProgress,\r\n  getDaysRemaining,\r\n  formatDate,\r\n  calculateBMR,\r\n  calculateTDEE,\r\n} from '../utils/dietPlanUtils';\r\nimport {\r\n  ASSIGNMENT_STATUS_LABELS,\r\n  STATUS_COLORS,\r\n  DIET_PLAN_TYPE_LABELS,\r\n} from '../constants';\r\n\r\nconst TabPanel = ({ children, value, index, ...other }) => (\r\n  <div\r\n    role='tabpanel'\r\n    hidden={value !== index}\r\n    id={`progress-tabpanel-${index}`}\r\n    aria-labelledby={`progress-tab-${index}`}\r\n    {...other}\r\n  >\r\n    {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\r\n  </div>\r\n);\r\n\r\nconst MealTrackingTable = ({ meals, progress }) => {\r\n  const [orderBy, setOrderBy] = useState('name');\r\n  const [order, setOrder] = useState('asc');\r\n\r\n  const mealProgress = useMemo(() => progress?.mealTracking || {}, [progress]);\r\n\r\n  const handleRequestSort = (property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const sortedMeals = useMemo(() => {\r\n    const comparator = (a, b, orderBy) => {\r\n      let aValue, bValue;\r\n      const aMealProgress = mealProgress[a.id] || {};\r\n      const bMealProgress = mealProgress[b.id] || {};\r\n\r\n      switch (orderBy) {\r\n        case 'name':\r\n          aValue = a.name.toLowerCase();\r\n          bValue = b.name.toLowerCase();\r\n          break;\r\n        case 'type':\r\n          aValue = a.type;\r\n          bValue = b.type;\r\n          break;\r\n        case 'calories':\r\n          aValue = a.calories;\r\n          bValue = b.calories;\r\n          break;\r\n        case 'protein':\r\n          aValue = a.foods.reduce((sum, food) => sum + food.protein, 0);\r\n          bValue = b.foods.reduce((sum, food) => sum + food.protein, 0);\r\n          break;\r\n        case 'carbs':\r\n          aValue = a.foods.reduce((sum, food) => sum + food.carbs, 0);\r\n          bValue = b.foods.reduce((sum, food) => sum + food.carbs, 0);\r\n          break;\r\n        case 'fats':\r\n          aValue = a.foods.reduce((sum, food) => sum + food.fats, 0);\r\n          bValue = b.foods.reduce((sum, food) => sum + food.fats, 0);\r\n          break;\r\n        case 'adherence':\r\n          aValue = aMealProgress.adherence || 0;\r\n          bValue = bMealProgress.adherence || 0;\r\n          break;\r\n        default:\r\n          aValue = a[orderBy];\r\n          bValue = b[orderBy];\r\n      }\r\n\r\n      if (order === 'desc') {\r\n        return bValue < aValue ? -1 : bValue > aValue ? 1 : 0;\r\n      }\r\n      return aValue < bValue ? -1 : aValue > bValue ? 1 : 0;\r\n    };\r\n\r\n    return [...meals].sort((a, b) => comparator(a, b, orderBy));\r\n  }, [meals, mealProgress, order, orderBy]);\r\n\r\n  return (\r\n    <TableContainer component={Paper} variant='outlined'>\r\n      <Table size='small'>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>\r\n              <TableSortLabel\r\n                active={orderBy === 'name'}\r\n                direction={orderBy === 'name' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('name')}\r\n              >\r\n                Meal\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell>\r\n              <TableSortLabel\r\n                active={orderBy === 'type'}\r\n                direction={orderBy === 'type' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('type')}\r\n              >\r\n                Type\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'calories'}\r\n                direction={orderBy === 'calories' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('calories')}\r\n              >\r\n                Calories\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'protein'}\r\n                direction={orderBy === 'protein' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('protein')}\r\n              >\r\n                Protein\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'carbs'}\r\n                direction={orderBy === 'carbs' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('carbs')}\r\n              >\r\n                Carbs\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'fats'}\r\n                direction={orderBy === 'fats' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('fats')}\r\n              >\r\n                Fats\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'adherence'}\r\n                direction={orderBy === 'adherence' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('adherence')}\r\n              >\r\n                Adherence\r\n              </TableSortLabel>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {sortedMeals.map((meal, index) => {\r\n            const adherence =\r\n              mealProgress[meal.name] || Math.floor(Math.random() * 30) + 70; // Mock adherence\r\n            return (\r\n              <TableRow key={index}>\r\n                <TableCell>\r\n                  <Typography variant='body2' fontWeight='medium'>\r\n                    {meal.name}\r\n                  </Typography>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <Chip label={meal.type} size='small' variant='outlined' />\r\n                </TableCell>\r\n                <TableCell align='center'>{meal.calories || 0}</TableCell>\r\n                <TableCell align='center'>\r\n                  {meal.macros?.protein || 0}g\r\n                </TableCell>\r\n                <TableCell align='center'>{meal.macros?.carbs || 0}g</TableCell>\r\n                <TableCell align='center'>{meal.macros?.fats || 0}g</TableCell>\r\n                <TableCell align='center'>\r\n                  <Typography\r\n                    variant='body2'\r\n                    color={getAdherenceColor(adherence) + '.main'}\r\n                    fontWeight='bold'\r\n                  >\r\n                    {formatPercentage(adherence)}\r\n                  </Typography>\r\n                </TableCell>\r\n              </TableRow>\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst ProgressModal = ({ open, onClose, assignment }) => {\r\n  const { dietPlans, members, updateAssignmentProgress } = useDietPlan();\r\n  const [tabValue, setTabValue] = useState(0);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [editableProgress, setEditableProgress] = useState({});\r\n\r\n  const plan = useMemo(() => {\r\n    return dietPlans.find((p) => p.id === assignment?.dietPlanId);\r\n  }, [dietPlans, assignment]);\r\n\r\n  const member = useMemo(() => {\r\n    return members.find((m) => m.id === assignment?.memberId);\r\n  }, [members, assignment]);\r\n\r\n  const progress = useMemo(() => {\r\n    if (!assignment) return null;\r\n\r\n    const timeProgress = calculateProgress(\r\n      assignment.startDate,\r\n      assignment.endDate\r\n    );\r\n    const daysRemaining = getDaysRemaining(assignment.endDate);\r\n\r\n    return {\r\n      timeProgress,\r\n      daysRemaining,\r\n      adherence: assignment.progress?.adherence || 0,\r\n      weightChange: assignment.progress?.weightChange || 0,\r\n      currentWeight: assignment.progress?.currentWeight || member?.weight || 70,\r\n      ...assignment.progress,\r\n    };\r\n  }, [assignment, member]);\r\n\r\n  // Mock progress data for charts\r\n  const progressChartData = useMemo(() => {\r\n    if (!assignment) return { dates: [], adherence: [], weight: [] };\r\n\r\n    const dates = [];\r\n    const adherence = [];\r\n    const weight = [];\r\n\r\n    // Generate weekly data points\r\n    const startDate = new Date(assignment.startDate);\r\n    const now = new Date();\r\n    const weeksElapsed = Math.min(\r\n      8,\r\n      Math.floor((now - startDate) / (7 * 24 * 60 * 60 * 1000))\r\n    );\r\n\r\n    for (let i = 0; i <= weeksElapsed; i++) {\r\n      const date = new Date(startDate);\r\n      date.setDate(date.getDate() + i * 7);\r\n      dates.push(\r\n        date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\r\n      );\r\n\r\n      // Mock data with some variation\r\n      adherence.push(\r\n        Math.max(\r\n          0,\r\n          (assignment.progress?.adherence || 80) + (Math.random() - 0.5) * 20\r\n        )\r\n      );\r\n      weight.push(\r\n        Math.max(40, (member?.weight || 70) + (Math.random() - 0.5) * 5)\r\n      );\r\n    }\r\n\r\n    return { dates, adherence, weight };\r\n  }, [assignment, member]);\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setTabValue(newValue);\r\n  };\r\n\r\n  const handleEditToggle = () => {\r\n    if (isEditing) {\r\n      // Save changes\r\n      updateAssignmentProgress(assignment.id, editableProgress);\r\n    } else {\r\n      // Enter edit mode\r\n      setEditableProgress(assignment.progress || {});\r\n    }\r\n    setIsEditing(!isEditing);\r\n  };\r\n\r\n  const handleProgressChange = (field, value) => {\r\n    setEditableProgress((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setTabValue(0);\r\n    setIsEditing(false);\r\n    setEditableProgress({});\r\n    onClose();\r\n  };\r\n\r\n  if (!assignment || !plan || !member) {\r\n    return null;\r\n  }\r\n\r\n  const totalCalories = plan.meals.reduce(\r\n    (sum, meal) => sum + meal.calories,\r\n    0\r\n  );\r\n  const bmr = calculateBMR(\r\n    member.weight,\r\n    member.height,\r\n    member.age,\r\n    member.gender\r\n  );\r\n  const tdee = calculateTDEE(bmr, member.activityLevel);\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      maxWidth='lg'\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: { height: '90vh' },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <AssessmentIcon />\r\n            <Typography variant='h6' component='span'>\r\n              Progress Tracking - {assignment.memberName}\r\n            </Typography>\r\n          </Box>\r\n          <Box sx={{ display: 'flex', gap: 1 }}>\r\n            <Button\r\n              variant={isEditing ? 'contained' : 'outlined'}\r\n              startIcon={<EditIcon />}\r\n              onClick={handleEditToggle}\r\n              size='small'\r\n            >\r\n              {isEditing ? 'Save' : 'Edit'}\r\n            </Button>\r\n            <IconButton onClick={handleClose}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </Box>\r\n        </Box>\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers sx={{ p: 0 }}>\r\n        {/* Header Summary */}\r\n        <Box sx={{ p: 3, bgcolor: 'background.default' }}>\r\n          <Grid container spacing={3}>\r\n            <Grid size={{ xs: 12, md: 4 }}>\r\n              <Card>\r\n                <CardContent sx={{ textAlign: 'center' }}>\r\n                  <Avatar\r\n                    sx={{\r\n                      mx: 'auto',\r\n                      mb: 2,\r\n                      width: 64,\r\n                      height: 64,\r\n                      bgcolor: 'primary.main',\r\n                    }}\r\n                  >\r\n                    {assignment.memberName.charAt(0)}\r\n                  </Avatar>\r\n                  <Typography variant='h6' fontWeight='medium'>\r\n                    {assignment.memberName}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant='body2'\r\n                    color='text.secondary'\r\n                    gutterBottom\r\n                  >\r\n                    {member.email}\r\n                  </Typography>\r\n                  <Chip\r\n                    label={ASSIGNMENT_STATUS_LABELS[assignment.status]}\r\n                    color={STATUS_COLORS[assignment.status]}\r\n                    size='small'\r\n                  />\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, md: 4 }}>\r\n              <Card>\r\n                <CardContent>\r\n                  <Typography variant='h6' fontWeight='medium' gutterBottom>\r\n                    {plan.name}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant='body2'\r\n                    color='text.secondary'\r\n                    gutterBottom\r\n                  >\r\n                    {DIET_PLAN_TYPE_LABELS[plan.type]}\r\n                  </Typography>\r\n                  <Typography variant='body2' sx={{ mb: 2 }}>\r\n                    {formatDate(assignment.startDate)} -{' '}\r\n                    {formatDate(assignment.endDate)}\r\n                  </Typography>\r\n                  <Box sx={{ mb: 1 }}>\r\n                    <Typography variant='caption' color='text.secondary'>\r\n                      Time Progress: {formatPercentage(progress.timeProgress)}\r\n                    </Typography>\r\n                    <LinearProgress\r\n                      variant='determinate'\r\n                      value={progress.timeProgress}\r\n                    />\r\n                  </Box>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    {progress.daysRemaining} days remaining\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n\r\n            <Grid size={{ xs: 12, md: 4 }}>\r\n              <Card>\r\n                <CardContent sx={{ textAlign: 'center' }}>\r\n                  <Typography\r\n                    variant='h4'\r\n                    color={getAdherenceColor(progress.adherence) + '.main'}\r\n                    fontWeight='bold'\r\n                  >\r\n                    {formatPercentage(progress.adherence)}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant='body2'\r\n                    color='text.secondary'\r\n                    gutterBottom\r\n                  >\r\n                    Overall Adherence\r\n                  </Typography>\r\n                  <Typography variant='body2' sx={{ mb: 1 }}>\r\n                    Weight Change:{' '}\r\n                    <strong>\r\n                      {progress.weightChange > 0 ? '+' : ''}\r\n                      {progress.weightChange} kg\r\n                    </strong>\r\n                  </Typography>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    Current: {progress.currentWeight} kg\r\n                  </Typography>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n\r\n        {/* Tabs */}\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs\r\n            value={tabValue}\r\n            onChange={handleTabChange}\r\n            aria-label='progress tabs'\r\n          >\r\n            <Tab label='Overview' />\r\n            <Tab label='Nutrition Details' />\r\n            <Tab label='Progress Charts' />\r\n            <Tab label='Notes & Updates' />\r\n          </Tabs>\r\n        </Box>\r\n\r\n        <Box sx={{ p: 3 }}>\r\n          {/* Overview Tab */}\r\n          <TabPanel value={tabValue} index={0}>\r\n            <Grid container spacing={3}>\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <Card variant='outlined'>\r\n                  <CardContent>\r\n                    <Typography\r\n                      variant='h6'\r\n                      gutterBottom\r\n                      sx={{ display: 'flex', alignItems: 'center', gap: 1 }}\r\n                    >\r\n                      <PersonIcon />\r\n                      Member Information\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Age:</strong> {member.age} years\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Height:</strong> {member.height} cm\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Weight:</strong> {progress.currentWeight} kg\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Activity Level:</strong> {member.activityLevel}\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>BMR:</strong> {Math.round(bmr)} cal/day\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>TDEE:</strong> {Math.round(tdee)} cal/day\r\n                    </Typography>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n\r\n              <Grid size={{ xs: 12, sm: 6 }}>\r\n                <Card variant='outlined'>\r\n                  <CardContent>\r\n                    <Typography\r\n                      variant='h6'\r\n                      gutterBottom\r\n                      sx={{ display: 'flex', alignItems: 'center', gap: 1 }}\r\n                    >\r\n                      <RestaurantIcon />\r\n                      Diet Plan Overview\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Daily Calories:</strong> {totalCalories} kcal\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Meals:</strong> {plan.meals.length} per day\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Duration:</strong> {plan.duration} days\r\n                    </Typography>\r\n                    <Typography variant='body2'>\r\n                      <strong>Goals:</strong>{' '}\r\n                      {plan.tags?.join(', ') || 'Not specified'}\r\n                    </Typography>\r\n                    <Box sx={{ mt: 2 }}>\r\n                      <Typography variant='caption' color='text.secondary'>\r\n                        Calorie Deficit/Surplus:{' '}\r\n                        {totalCalories - Math.round(tdee)} kcal/day\r\n                      </Typography>\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </TabPanel>\r\n\r\n          {/* Nutrition Details Tab */}\r\n          <TabPanel value={tabValue} index={1}>\r\n            <Typography variant='h6' gutterBottom>\r\n              Meal Tracking & Adherence\r\n            </Typography>\r\n            <MealTrackingTable\r\n              meals={plan.meals}\r\n              progress={assignment.progress}\r\n            />\r\n          </TabPanel>\r\n\r\n          {/* Progress Charts Tab */}\r\n          <TabPanel value={tabValue} index={2}>\r\n            <Grid container spacing={3}>\r\n              <Grid size={{ xs: 12, md: 6 }}>\r\n                <Card variant='outlined'>\r\n                  <CardContent>\r\n                    <Typography variant='h6' gutterBottom>\r\n                      Adherence Over Time\r\n                    </Typography>\r\n                    <Box sx={{ height: 250 }}>\r\n                      {progressChartData.dates.length > 1 ? (\r\n                        <LineChart\r\n                          xAxis={[\r\n                            {\r\n                              data: progressChartData.dates,\r\n                              scaleType: 'point',\r\n                            },\r\n                          ]}\r\n                          series={[\r\n                            {\r\n                              data: progressChartData.adherence,\r\n                              label: 'Adherence %',\r\n                              color: '#1976d2',\r\n                            },\r\n                          ]}\r\n                          height={240}\r\n                          margin={{ top: 20, bottom: 40, left: 60, right: 20 }}\r\n                        />\r\n                      ) : (\r\n                        <Box\r\n                          sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            height: '100%',\r\n                          }}\r\n                        >\r\n                          <Typography color='text.secondary'>\r\n                            Not enough data points\r\n                          </Typography>\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n\r\n              <Grid size={{ xs: 12, md: 6 }}>\r\n                <Card variant='outlined'>\r\n                  <CardContent>\r\n                    <Typography variant='h6' gutterBottom>\r\n                      Weight Progress\r\n                    </Typography>\r\n                    <Box sx={{ height: 250 }}>\r\n                      {progressChartData.dates.length > 1 ? (\r\n                        <LineChart\r\n                          xAxis={[\r\n                            {\r\n                              data: progressChartData.dates,\r\n                              scaleType: 'point',\r\n                            },\r\n                          ]}\r\n                          series={[\r\n                            {\r\n                              data: progressChartData.weight,\r\n                              label: 'Weight (kg)',\r\n                              color: '#2e7d32',\r\n                            },\r\n                          ]}\r\n                          height={240}\r\n                          margin={{ top: 20, bottom: 40, left: 60, right: 20 }}\r\n                        />\r\n                      ) : (\r\n                        <Box\r\n                          sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            height: '100%',\r\n                          }}\r\n                        >\r\n                          <Typography color='text.secondary'>\r\n                            Not enough data points\r\n                          </Typography>\r\n                        </Box>\r\n                      )}\r\n                    </Box>\r\n                  </CardContent>\r\n                </Card>\r\n              </Grid>\r\n            </Grid>\r\n          </TabPanel>\r\n\r\n          {/* Notes & Updates Tab */}\r\n          <TabPanel value={tabValue} index={3}>\r\n            <Grid container spacing={2}>\r\n              {isEditing ? (\r\n                <>\r\n                  <Grid size={{ xs: 12, sm: 4 }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='Current Weight (kg)'\r\n                      type='number'\r\n                      value={\r\n                        editableProgress.currentWeight || progress.currentWeight\r\n                      }\r\n                      onChange={(e) =>\r\n                        handleProgressChange(\r\n                          'currentWeight',\r\n                          parseFloat(e.target.value)\r\n                        )\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid size={{ xs: 12, sm: 4 }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='Adherence (%)'\r\n                      type='number'\r\n                      inputProps={{ min: 0, max: 100 }}\r\n                      value={editableProgress.adherence || progress.adherence}\r\n                      onChange={(e) =>\r\n                        handleProgressChange(\r\n                          'adherence',\r\n                          parseFloat(e.target.value)\r\n                        )\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid size={{ xs: 12, sm: 4 }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='Weight Change (kg)'\r\n                      type='number'\r\n                      value={\r\n                        editableProgress.weightChange || progress.weightChange\r\n                      }\r\n                      onChange={(e) =>\r\n                        handleProgressChange(\r\n                          'weightChange',\r\n                          parseFloat(e.target.value)\r\n                        )\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid size={{ xs: 12 }}>\r\n                    <TextField\r\n                      fullWidth\r\n                      label='Progress Notes'\r\n                      multiline\r\n                      rows={4}\r\n                      value={editableProgress.notes || assignment.notes || ''}\r\n                      onChange={(e) =>\r\n                        handleProgressChange('notes', e.target.value)\r\n                      }\r\n                      placeholder='Add progress notes, observations, or adjustments made...'\r\n                    />\r\n                  </Grid>\r\n                </>\r\n              ) : (\r\n                <Grid size={{ xs: 12 }}>\r\n                  <Typography variant='body2' sx={{ mb: 2 }}>\r\n                    <strong>Last Updated:</strong>{' '}\r\n                    {assignment.progress?.lastUpdated\r\n                      ? new Date(\r\n                          assignment.progress.lastUpdated\r\n                        ).toLocaleDateString()\r\n                      : 'Not updated yet'}\r\n                  </Typography>\r\n                  <Typography variant='body2'>\r\n                    <strong>Notes:</strong>\r\n                  </Typography>\r\n                  <Typography\r\n                    variant='body2'\r\n                    color='text.secondary'\r\n                    sx={{ mt: 1, whiteSpace: 'pre-wrap' }}\r\n                  >\r\n                    {assignment.progress?.notes ||\r\n                      assignment.notes ||\r\n                      'No notes available'}\r\n                  </Typography>\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </TabPanel>\r\n        </Box>\r\n      </DialogContent>\r\n\r\n      <DialogActions sx={{ p: 2 }}>\r\n        <Button onClick={handleClose} variant='outlined'>\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ProgressModal;\r\n","/**\r\n * Diet Plan Management Context\r\n * Centralized state management for the Diet Plan Management feature\r\n */\r\n\r\nimport React, {\r\n  createContext,\r\n  useContext,\r\n  useState,\r\n  useCallback,\r\n  useMemo,\r\n} from 'react';\r\nimport dietPlansData from '../constants/dietPlans.json';\r\nimport assignmentsData from '../constants/dietPlanAssignments.json';\r\nimport membersData from '../constants/members.json';\r\nimport {\r\n  sortAssignmentsByPriority,\r\n  filterAssignments,\r\n} from '../utils/dietPlanUtils';\r\nimport ProgressModal from '../components/ProgressModal';\r\n\r\n// Create the context\r\nconst DietPlanContext = createContext(undefined);\r\n\r\n// Initial state\r\nconst INITIAL_FILTERS = {\r\n  searchTerm: '',\r\n  planType: 'all',\r\n  status: 'all',\r\n  assignedTrainer: 'all',\r\n  difficulty: 'all',\r\n};\r\n\r\n/**\r\n * Diet Plan Provider Component\r\n */\r\nexport const DietPlanProvider = ({ children }) => {\r\n  // State\r\n  const [dietPlans, setDietPlans] = useState(dietPlansData);\r\n  const [assignments, setAssignments] = useState(assignmentsData);\r\n  const [members] = useState(membersData);\r\n  const [filters, setFilters] = useState(INITIAL_FILTERS);\r\n  const [selectedPlan, setSelectedPlan] = useState(null);\r\n  const [selectedAssignment, setSelectedAssignment] = useState(null);\r\n  const [isCreatePlanOpen, setIsCreatePlanOpen] = useState(false);\r\n  const [isAssignPlanOpen, setIsAssignPlanOpen] = useState(false);\r\n  const [isProgressModalOpen, setIsProgressModalOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Computed values\r\n  const filteredAssignments = useMemo(() => {\r\n    let filtered = [...assignments];\r\n\r\n    // Apply search filter\r\n    if (filters.searchTerm) {\r\n      filtered = filterAssignments(filtered, filters.searchTerm);\r\n    }\r\n\r\n    // Apply status filter\r\n    if (filters.status !== 'all') {\r\n      filtered = filtered.filter(\r\n        (assignment) => assignment.status === filters.status\r\n      );\r\n    }\r\n\r\n    // Apply trainer filter\r\n    if (filters.assignedTrainer !== 'all') {\r\n      filtered = filtered.filter(\r\n        (assignment) => assignment.assignedBy === filters.assignedTrainer\r\n      );\r\n    }\r\n\r\n    // Apply plan type filter (requires joining with diet plans)\r\n    if (filters.planType !== 'all') {\r\n      const planIds = dietPlans\r\n        .filter((plan) => plan.type === filters.planType)\r\n        .map((plan) => plan.id);\r\n      filtered = filtered.filter((assignment) =>\r\n        planIds.includes(assignment.dietPlanId)\r\n      );\r\n    }\r\n\r\n    // Apply difficulty filter (requires joining with diet plans)\r\n    if (filters.difficulty !== 'all') {\r\n      const planIds = dietPlans\r\n        .filter((plan) => plan.difficulty === filters.difficulty)\r\n        .map((plan) => plan.id);\r\n      filtered = filtered.filter((assignment) =>\r\n        planIds.includes(assignment.dietPlanId)\r\n      );\r\n    }\r\n\r\n    // Sort by priority\r\n    return sortAssignmentsByPriority(filtered);\r\n  }, [assignments, dietPlans, filters]);\r\n\r\n  const activeAssignments = useMemo(() => {\r\n    return assignments.filter((assignment) => assignment.status === 'active');\r\n  }, [assignments]);\r\n\r\n  const completedAssignments = useMemo(() => {\r\n    return assignments.filter(\r\n      (assignment) => assignment.status === 'completed'\r\n    );\r\n  }, [assignments]);\r\n\r\n  // Filter actions\r\n  const updateFilter = useCallback((filterName, value) => {\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      [filterName]: value,\r\n    }));\r\n  }, []);\r\n\r\n  const updateSearchTerm = useCallback((searchTerm) => {\r\n    setFilters((prev) => ({\r\n      ...prev,\r\n      searchTerm,\r\n    }));\r\n  }, []);\r\n\r\n  const clearAllFilters = useCallback(() => {\r\n    setFilters(INITIAL_FILTERS);\r\n  }, []);\r\n\r\n  // Diet Plan actions\r\n  const createDietPlan = useCallback(\r\n    async (planData) => {\r\n      setLoading(true);\r\n      try {\r\n        // Simulate API call\r\n        const newPlan = {\r\n          ...planData,\r\n          id: `dp${String(dietPlans.length + 1).padStart(3, '0')}`,\r\n          createdAt: new Date().toISOString(),\r\n          isActive: true,\r\n        };\r\n\r\n        setDietPlans((prev) => [newPlan, ...prev]);\r\n        setIsCreatePlanOpen(false);\r\n        return newPlan;\r\n      } catch (error) {\r\n        console.error('Error creating diet plan:', error);\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [dietPlans.length]\r\n  );\r\n\r\n  const updateDietPlan = useCallback(async (planId, updates) => {\r\n    setLoading(true);\r\n    try {\r\n      setDietPlans((prev) =>\r\n        prev.map((plan) =>\r\n          plan.id === planId ? { ...plan, ...updates } : plan\r\n        )\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating diet plan:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const deleteDietPlan = useCallback(async (planId) => {\r\n    setLoading(true);\r\n    try {\r\n      setDietPlans((prev) => prev.filter((plan) => plan.id !== planId));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error deleting diet plan:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Assignment actions\r\n  const assignDietPlan = useCallback(\r\n    async (assignmentData) => {\r\n      setLoading(true);\r\n      try {\r\n        const newAssignment = {\r\n          ...assignmentData,\r\n          id: `assignment${String(assignments.length + 1).padStart(3, '0')}`,\r\n          assignedDate: new Date().toISOString(),\r\n          status: 'active',\r\n          progress: {\r\n            completedDays: 0,\r\n            totalDays: assignmentData.duration || 30,\r\n            adherence: 0,\r\n            weightChange: 0,\r\n            measurements: {},\r\n          },\r\n          lastUpdated: new Date().toISOString(),\r\n        };\r\n\r\n        setAssignments((prev) => [newAssignment, ...prev]);\r\n        setIsAssignPlanOpen(false);\r\n        return newAssignment;\r\n      } catch (error) {\r\n        console.error('Error assigning diet plan:', error);\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [assignments.length]\r\n  );\r\n\r\n  const updateAssignment = useCallback(async (assignmentId, updates) => {\r\n    setLoading(true);\r\n    try {\r\n      setAssignments((prev) =>\r\n        prev.map((assignment) =>\r\n          assignment.id === assignmentId\r\n            ? {\r\n                ...assignment,\r\n                ...updates,\r\n                lastUpdated: new Date().toISOString(),\r\n              }\r\n            : assignment\r\n        )\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating assignment:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const updateProgress = useCallback(async (assignmentId, progressData) => {\r\n    setLoading(true);\r\n    try {\r\n      setAssignments((prev) =>\r\n        prev.map((assignment) =>\r\n          assignment.id === assignmentId\r\n            ? {\r\n                ...assignment,\r\n                progress: { ...assignment.progress, ...progressData },\r\n                lastUpdated: new Date().toISOString(),\r\n              }\r\n            : assignment\r\n        )\r\n      );\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error updating progress:', error);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const cancelAssignment = useCallback(\r\n    async (assignmentId) => {\r\n      setLoading(true);\r\n      try {\r\n        await updateAssignment(assignmentId, { status: 'cancelled' });\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error cancelling assignment:', error);\r\n        throw error;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [updateAssignment]\r\n  );\r\n\r\n  // Modal actions\r\n  const openCreatePlan = useCallback(() => {\r\n    setIsCreatePlanOpen(true);\r\n  }, []);\r\n\r\n  const closeCreatePlan = useCallback(() => {\r\n    setIsCreatePlanOpen(false);\r\n    setSelectedPlan(null);\r\n  }, []);\r\n\r\n  const openAssignPlan = useCallback((plan = null) => {\r\n    setSelectedPlan(plan);\r\n    setIsAssignPlanOpen(true);\r\n  }, []);\r\n\r\n  const closeAssignPlan = useCallback(() => {\r\n    setIsAssignPlanOpen(false);\r\n    setSelectedPlan(null);\r\n  }, []);\r\n\r\n  const openProgressModal = useCallback((assignment) => {\r\n    setSelectedAssignment(assignment);\r\n    setIsProgressModalOpen(true);\r\n  }, []);\r\n\r\n  const closeProgressModal = useCallback(() => {\r\n    setIsProgressModalOpen(false);\r\n    setSelectedAssignment(null);\r\n  }, []);\r\n\r\n  // Utility functions\r\n  const getDietPlanById = useCallback(\r\n    (planId) => {\r\n      return dietPlans.find((plan) => plan.id === planId) || null;\r\n    },\r\n    [dietPlans]\r\n  );\r\n\r\n  const getMemberById = useCallback(\r\n    (memberId) => {\r\n      return members.find((member) => member.id === memberId) || null;\r\n    },\r\n    [members]\r\n  );\r\n\r\n  const getAssignmentsByMember = useCallback(\r\n    (memberId) => {\r\n      return assignments.filter(\r\n        (assignment) => assignment.memberId === memberId\r\n      );\r\n    },\r\n    [assignments]\r\n  );\r\n\r\n  const getAssignmentsByPlan = useCallback(\r\n    (planId) => {\r\n      return assignments.filter(\r\n        (assignment) => assignment.dietPlanId === planId\r\n      );\r\n    },\r\n    [assignments]\r\n  );\r\n\r\n  // Context value\r\n  const contextValue = {\r\n    // State\r\n    dietPlans,\r\n    assignments,\r\n    members,\r\n    filteredAssignments,\r\n    activeAssignments,\r\n    completedAssignments,\r\n    filters,\r\n    selectedPlan,\r\n    selectedAssignment,\r\n    isCreatePlanOpen,\r\n    isAssignPlanOpen,\r\n    isProgressModalOpen,\r\n    loading,\r\n\r\n    // Filter actions\r\n    updateFilter,\r\n    updateSearchTerm,\r\n    clearAllFilters,\r\n\r\n    // Diet plan actions\r\n    createDietPlan,\r\n    updateDietPlan,\r\n    deleteDietPlan,\r\n\r\n    // Assignment actions\r\n    assignDietPlan,\r\n    updateAssignment,\r\n    updateProgress,\r\n    cancelAssignment,\r\n\r\n    // Modal actions\r\n    openCreatePlan,\r\n    closeCreatePlan,\r\n    openAssignPlan,\r\n    closeAssignPlan,\r\n    openProgressModal,\r\n    closeProgressModal,\r\n\r\n    // Utility functions\r\n    getDietPlanById,\r\n    getMemberById,\r\n    getAssignmentsByMember,\r\n    getAssignmentsByPlan,\r\n  };\r\n\r\n  return (\r\n    <DietPlanContext.Provider value={contextValue}>\r\n      {children}\r\n      <ProgressModal\r\n        open={isProgressModalOpen}\r\n        onClose={closeProgressModal}\r\n        assignment={selectedAssignment}\r\n      />\r\n    </DietPlanContext.Provider>\r\n  );\r\n};\r\n\r\n/**\r\n * Custom hook to use the Diet Plan Context\r\n */\r\nexport const useDietPlan = () => {\r\n  const context = useContext(DietPlanContext);\r\n\r\n  if (context === undefined) {\r\n    throw new Error('useDietPlan must be used within a DietPlanProvider');\r\n  }\r\n\r\n  return context;\r\n};\r\n\r\nexport default DietPlanContext;\r\n","/**\r\n * Diet Plan Dashboard\r\n * Overview dashboard showing key metrics and statistics\r\n */\r\n\r\nimport React, { useMemo } from 'react';\r\nimport {\r\n  Grid,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Box,\r\n  Chip,\r\n  LinearProgress,\r\n  Avatar,\r\n  IconButton,\r\n  Tooltip,\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp as TrendingUpIcon,\r\n  Group as GroupIcon,\r\n  Restaurant as RestaurantIcon,\r\n  Assignment as AssignmentIcon,\r\n  Visibility as VisibilityIcon,\r\n} from '@mui/icons-material';\r\nimport { PieChart } from '@mui/x-charts/PieChart';\r\nimport { LineChart } from '@mui/x-charts/LineChart';\r\nimport { useDietPlan } from '../context';\r\nimport {\r\n  formatPercentage,\r\n  getAdherenceColor,\r\n  calculateProgress,\r\n  getDaysRemaining,\r\n} from '../utils/dietPlanUtils';\r\nimport {\r\n  ASSIGNMENT_STATUS_LABELS,\r\n  STATUS_COLORS,\r\n  DIET_PLAN_TYPE_LABELS,\r\n} from '../constants';\r\n\r\nconst MetricCard = ({ title, value, icon, color = 'primary', subtitle }) => (\r\n  <Card sx={{ height: '100%' }}>\r\n    <CardContent>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Avatar sx={{ bgcolor: `${color}.main`, mr: 2 }}>{icon}</Avatar>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant='h4' component='div' fontWeight='bold'>\r\n            {value}\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary'>\r\n            {title}\r\n          </Typography>\r\n          {subtitle && (\r\n            <Typography variant='caption' color='text.secondary'>\r\n              {subtitle}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nconst DietPlanDashboard = () => {\r\n  const {\r\n    dietPlans,\r\n    assignments,\r\n    activeAssignments,\r\n    completedAssignments,\r\n    openProgressModal,\r\n  } = useDietPlan();\r\n\r\n  // Calculate metrics\r\n  const metrics = useMemo(() => {\r\n    const totalPlans = dietPlans.filter((plan) => plan.isActive).length;\r\n    const totalAssignments = assignments.length;\r\n    const totalActiveAssignments = activeAssignments.length;\r\n    const totalCompletedAssignments = completedAssignments.length;\r\n\r\n    // Calculate average adherence for active assignments\r\n    const avgAdherence =\r\n      activeAssignments.length > 0\r\n        ? activeAssignments.reduce(\r\n            (sum, assignment) => sum + (assignment.progress?.adherence || 0),\r\n            0\r\n          ) / activeAssignments.length\r\n        : 0;\r\n\r\n    // Assignment status distribution\r\n    const statusDistribution = assignments.reduce((acc, assignment) => {\r\n      acc[assignment.status] = (acc[assignment.status] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Plan type distribution\r\n    const planTypeDistribution = assignments.reduce((acc, assignment) => {\r\n      const plan = dietPlans.find((p) => p.id === assignment.dietPlanId);\r\n      if (plan) {\r\n        acc[plan.type] = (acc[plan.type] || 0) + 1;\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    return {\r\n      totalPlans,\r\n      totalAssignments,\r\n      totalActiveAssignments,\r\n      totalCompletedAssignments,\r\n      avgAdherence: Math.round(avgAdherence),\r\n      statusDistribution,\r\n      planTypeDistribution,\r\n    };\r\n  }, [dietPlans, assignments, activeAssignments, completedAssignments]);\r\n\r\n  // Prepare chart data\r\n  const statusChartData = useMemo(() => {\r\n    return Object.entries(metrics.statusDistribution).map(\r\n      ([status, count]) => ({\r\n        id: status,\r\n        label: ASSIGNMENT_STATUS_LABELS[status] || status,\r\n        value: count,\r\n      })\r\n    );\r\n  }, [metrics.statusDistribution]);\r\n\r\n  const planTypeChartData = useMemo(() => {\r\n    return Object.entries(metrics.planTypeDistribution).map(\r\n      ([type, count]) => ({\r\n        id: type,\r\n        label: DIET_PLAN_TYPE_LABELS[type] || type,\r\n        value: count,\r\n      })\r\n    );\r\n  }, [metrics.planTypeDistribution]);\r\n\r\n  // Recent assignments for quick overview\r\n  const recentAssignments = useMemo(() => {\r\n    return [...assignments]\r\n      .sort((a, b) => new Date(b.assignedDate) - new Date(a.assignedDate))\r\n      .slice(0, 5);\r\n  }, [assignments]);\r\n\r\n  // Progress tracking data (mock data for demo)\r\n  const progressData = useMemo(() => {\r\n    // Generate weekly progress data for the last 8 weeks\r\n    const weeks = [];\r\n    for (let i = 7; i >= 0; i--) {\r\n      const date = new Date();\r\n      date.setDate(date.getDate() - i * 7);\r\n      weeks.push({\r\n        week: date.toLocaleDateString('en-US', {\r\n          month: 'short',\r\n          day: 'numeric',\r\n        }),\r\n        adherence: Math.round(75 + Math.random() * 20), // Random adherence between 75-95%\r\n        completedPlans: Math.round(5 + Math.random() * 10), // Random completed plans\r\n      });\r\n    }\r\n    return weeks;\r\n  }, []);\r\n\r\n  return (\r\n    <Box>\r\n      {/* Key Metrics */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Active Plans'\r\n            value={metrics.totalPlans}\r\n            icon={<RestaurantIcon />}\r\n            color='primary'\r\n          />\r\n        </Grid>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Total Assignments'\r\n            value={metrics.totalAssignments}\r\n            icon={<AssignmentIcon />}\r\n            color='secondary'\r\n          />\r\n        </Grid>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Active Members'\r\n            value={metrics.totalActiveAssignments}\r\n            icon={<GroupIcon />}\r\n            color='success'\r\n          />\r\n        </Grid>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Average Adherence'\r\n            value={`${metrics.avgAdherence}%`}\r\n            icon={<TrendingUpIcon />}\r\n            color={getAdherenceColor(metrics.avgAdherence)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Charts Row */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        {/* Assignment Status Distribution */}\r\n        <Grid size={{ xs: 12, md: 6 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Assignment Status Distribution\r\n              </Typography>\r\n              {statusChartData.length > 0 ? (\r\n                <Box\r\n                  sx={{\r\n                    height: 300,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                  }}\r\n                >\r\n                  <PieChart\r\n                    series={[\r\n                      {\r\n                        data: statusChartData,\r\n                        highlightScope: {\r\n                          faded: 'global',\r\n                          highlighted: 'item',\r\n                        },\r\n                        faded: {\r\n                          innerRadius: 30,\r\n                          additionalRadius: -30,\r\n                          color: 'gray',\r\n                        },\r\n                      },\r\n                    ]}\r\n                    height={280}\r\n                    margin={{ top: 20, bottom: 20, left: 20, right: 20 }}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                <Box\r\n                  sx={{\r\n                    height: 300,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                  }}\r\n                >\r\n                  <Typography color='text.secondary'>\r\n                    No assignment data available\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Plan Type Distribution */}\r\n        <Grid size={{ xs: 12, md: 6 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Plan Type Distribution\r\n              </Typography>\r\n              {planTypeChartData.length > 0 ? (\r\n                <Box\r\n                  sx={{\r\n                    height: 300,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                  }}\r\n                >\r\n                  <PieChart\r\n                    series={[\r\n                      {\r\n                        data: planTypeChartData,\r\n                        highlightScope: {\r\n                          faded: 'global',\r\n                          highlighted: 'item',\r\n                        },\r\n                        faded: {\r\n                          innerRadius: 30,\r\n                          additionalRadius: -30,\r\n                          color: 'gray',\r\n                        },\r\n                      },\r\n                    ]}\r\n                    height={280}\r\n                    margin={{ top: 20, bottom: 20, left: 20, right: 20 }}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                <Box\r\n                  sx={{\r\n                    height: 300,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                  }}\r\n                >\r\n                  <Typography color='text.secondary'>\r\n                    No plan data available\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Progress Trends */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid size={{ xs: 12 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Weekly Progress Trends\r\n              </Typography>\r\n              <Box sx={{ height: 300 }}>\r\n                <LineChart\r\n                  xAxis={[\r\n                    {\r\n                      data: progressData.map((item) => item.week),\r\n                      scaleType: 'point',\r\n                    },\r\n                  ]}\r\n                  series={[\r\n                    {\r\n                      data: progressData.map((item) => item.adherence),\r\n                      label: 'Average Adherence (%)',\r\n                      color: '#1976d2',\r\n                    },\r\n                    {\r\n                      data: progressData.map((item) => item.completedPlans),\r\n                      label: 'Completed Plans',\r\n                      color: '#2e7d32',\r\n                    },\r\n                  ]}\r\n                  height={280}\r\n                  margin={{ top: 20, bottom: 40, left: 60, right: 20 }}\r\n                />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Recent Assignments */}\r\n      <Grid container spacing={3}>\r\n        <Grid size={{ xs: 12 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  alignItems: 'center',\r\n                  mb: 2,\r\n                }}\r\n              >\r\n                <Typography variant='h6'>Recent Assignments</Typography>\r\n                <Typography variant='body2' color='text.secondary'>\r\n                  Last 5 assignments\r\n                </Typography>\r\n              </Box>\r\n\r\n              {recentAssignments.length === 0 ? (\r\n                <Typography color='text.secondary'>\r\n                  No assignments found\r\n                </Typography>\r\n              ) : (\r\n                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\r\n                  {recentAssignments.map((assignment) => {\r\n                    const plan = dietPlans.find(\r\n                      (p) => p.id === assignment.dietPlanId\r\n                    );\r\n                    const progress = calculateProgress(\r\n                      assignment.startDate,\r\n                      assignment.endDate\r\n                    );\r\n                    const daysRemaining = getDaysRemaining(assignment.endDate);\r\n\r\n                    return (\r\n                      <Box\r\n                        key={assignment.id}\r\n                        sx={{\r\n                          display: 'flex',\r\n                          alignItems: 'center',\r\n                          p: 2,\r\n                          border: 1,\r\n                          borderColor: 'divider',\r\n                          borderRadius: 1,\r\n                          '&:hover': {\r\n                            bgcolor: 'action.hover',\r\n                          },\r\n                        }}\r\n                      >\r\n                        <Avatar sx={{ mr: 2, bgcolor: 'primary.main' }}>\r\n                          {assignment.memberName.charAt(0)}\r\n                        </Avatar>\r\n\r\n                        <Box sx={{ flexGrow: 1 }}>\r\n                          <Typography variant='subtitle1' fontWeight='medium'>\r\n                            {assignment.memberName}\r\n                          </Typography>\r\n                          <Typography variant='body2' color='text.secondary'>\r\n                            {plan?.name || 'Unknown Plan'}\r\n                          </Typography>\r\n\r\n                          <Box\r\n                            sx={{\r\n                              display: 'flex',\r\n                              alignItems: 'center',\r\n                              gap: 1,\r\n                              mt: 1,\r\n                            }}\r\n                          >\r\n                            <Chip\r\n                              label={\r\n                                ASSIGNMENT_STATUS_LABELS[assignment.status]\r\n                              }\r\n                              color={STATUS_COLORS[assignment.status]}\r\n                              size='small'\r\n                            />\r\n                            {assignment.status === 'active' && (\r\n                              <>\r\n                                <Chip\r\n                                  label={`${formatPercentage(\r\n                                    assignment.progress?.adherence || 0\r\n                                  )} adherence`}\r\n                                  color={getAdherenceColor(\r\n                                    assignment.progress?.adherence || 0\r\n                                  )}\r\n                                  size='small'\r\n                                  variant='outlined'\r\n                                />\r\n                                <Chip\r\n                                  label={`${daysRemaining} days left`}\r\n                                  size='small'\r\n                                  variant='outlined'\r\n                                />\r\n                              </>\r\n                            )}\r\n                          </Box>\r\n\r\n                          {assignment.status === 'active' && (\r\n                            <Box sx={{ mt: 1 }}>\r\n                              <Typography\r\n                                variant='caption'\r\n                                color='text.secondary'\r\n                              >\r\n                                Progress: {formatPercentage(progress)}\r\n                              </Typography>\r\n                              <LinearProgress\r\n                                variant='determinate'\r\n                                value={progress}\r\n                                sx={{ mt: 0.5 }}\r\n                              />\r\n                            </Box>\r\n                          )}\r\n                        </Box>\r\n\r\n                        <Tooltip title='View Progress'>\r\n                          <IconButton\r\n                            onClick={() => openProgressModal(assignment)}\r\n                            size='small'\r\n                          >\r\n                            <VisibilityIcon />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    );\r\n                  })}\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DietPlanDashboard;\r\n","/**\r\n * Meal Plan Details Component\r\n * Displays comprehensive meal details for a diet plan\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Collapse,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  ListItemIcon,\r\n  Divider,\r\n  Chip,\r\n} from '@mui/material';\r\nimport {\r\n  ExpandMore as ExpandMoreIcon,\r\n  ExpandLess as ExpandLessIcon,\r\n  FreeBreakfast as FreeBreakfastIcon,\r\n  LunchDining as LunchIcon,\r\n  DinnerDining as DinnerDiningIcon,\r\n  Coffee as SnackIcon,\r\n  Restaurant as RestaurantIcon,\r\n  LocalDrink as WaterIcon,\r\n  MedicalServices as SupplementIcon,\r\n} from '@mui/icons-material';\r\n\r\nconst MealPlanDetails = ({ plan }) => {\r\n  const [showMealDetails, setShowMealDetails] = useState(false);\r\n\r\n  const toggleMealDetails = (event) => {\r\n    event.stopPropagation();\r\n    setShowMealDetails(!showMealDetails);\r\n  };\r\n\r\n  // Helper function to get meal type icon\r\n  const getMealTypeIcon = (mealType) => {\r\n    switch (mealType?.toLowerCase()) {\r\n      case 'breakfast':\r\n        return <FreeBreakfastIcon fontSize='small' />;\r\n      case 'lunch':\r\n        return <LunchIcon fontSize='small' />;\r\n      case 'dinner':\r\n        return <DinnerDiningIcon fontSize='small' />;\r\n      case 'snack':\r\n        return <SnackIcon fontSize='small' />;\r\n      default:\r\n        return <RestaurantIcon fontSize='small' />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 1,\r\n          cursor: 'pointer',\r\n        }}\r\n        onClick={toggleMealDetails}\r\n      >\r\n        <Typography variant='subtitle2' color='text.secondary'>\r\n          Meal Plan Details ({(plan.meals || []).length} meals)\r\n        </Typography>\r\n        <IconButton size='small'>\r\n          {showMealDetails ? (\r\n            <ExpandLessIcon fontSize='small' />\r\n          ) : (\r\n            <ExpandMoreIcon fontSize='small' />\r\n          )}\r\n        </IconButton>\r\n      </Box>\r\n\r\n      <Collapse in={showMealDetails}>\r\n        <Box sx={{ maxHeight: 300, overflowY: 'auto', pr: 1 }}>\r\n          {(plan.meals || []).map((meal, mealIndex) => (\r\n            <Box key={meal.id || mealIndex} sx={{ mb: 2 }}>\r\n              {/* Meal Header */}\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: 1,\r\n                  mb: 1,\r\n                }}\r\n              >\r\n                {getMealTypeIcon(meal.type)}\r\n                <Typography\r\n                  variant='body2'\r\n                  fontWeight='medium'\r\n                  sx={{ textTransform: 'capitalize' }}\r\n                >\r\n                  {meal.name || `${meal.type || 'Meal'} ${mealIndex + 1}`}\r\n                </Typography>\r\n                <Chip\r\n                  size='small'\r\n                  label={`${meal.calories || 0} cal`}\r\n                  color='primary'\r\n                  variant='outlined'\r\n                />\r\n                {meal.time && (\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    @ {meal.time}\r\n                  </Typography>\r\n                )}\r\n              </Box>\r\n\r\n              {/* Foods in Meal */}\r\n              <List dense sx={{ py: 0 }}>\r\n                {(meal.foods || []).map((food, foodIndex) => (\r\n                  <ListItem key={foodIndex} sx={{ py: 0.5, pl: 2 }}>\r\n                    <ListItemIcon sx={{ minWidth: 32 }}>\r\n                      <Box\r\n                        sx={{\r\n                          width: 6,\r\n                          height: 6,\r\n                          borderRadius: '50%',\r\n                          backgroundColor: 'primary.main',\r\n                        }}\r\n                      />\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                      primary={\r\n                        <Box\r\n                          sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-between',\r\n                            alignItems: 'center',\r\n                          }}\r\n                        >\r\n                          <Typography\r\n                            variant='caption'\r\n                            sx={{ fontWeight: 'medium' }}\r\n                          >\r\n                            {food.name}\r\n                          </Typography>\r\n                          <Typography variant='caption' color='text.secondary'>\r\n                            {food.quantity}\r\n                          </Typography>\r\n                        </Box>\r\n                      }\r\n                      secondary={\r\n                        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n                          <Typography variant='caption' color='text.secondary'>\r\n                            {food.calories}cal\r\n                          </Typography>\r\n                          {food.protein > 0 && (\r\n                            <Typography variant='caption' color='success.main'>\r\n                              P:{food.protein}g\r\n                            </Typography>\r\n                          )}\r\n                          {food.carbs > 0 && (\r\n                            <Typography variant='caption' color='warning.main'>\r\n                              C:{food.carbs}g\r\n                            </Typography>\r\n                          )}\r\n                          {food.fats > 0 && (\r\n                            <Typography variant='caption' color='error.main'>\r\n                              F:{food.fats}g\r\n                            </Typography>\r\n                          )}\r\n                        </Box>\r\n                      }\r\n                    />\r\n                  </ListItem>\r\n                ))}\r\n              </List>\r\n            </Box>\r\n          ))}\r\n\r\n          {/* Additional Plan Details */}\r\n          {(plan.waterIntake || plan.supplements?.length > 0) && (\r\n            <Divider sx={{ my: 2 }} />\r\n          )}\r\n\r\n          {plan.waterIntake && (\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\r\n              <WaterIcon fontSize='small' color='info' />\r\n              <Typography variant='caption' color='text.secondary'>\r\n                Daily Water Intake: {plan.waterIntake}ml\r\n              </Typography>\r\n            </Box>\r\n          )}\r\n\r\n          {plan.supplements && plan.supplements.length > 0 && (\r\n            <Box>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  alignItems: 'center',\r\n                  gap: 1,\r\n                  mb: 1,\r\n                }}\r\n              >\r\n                <SupplementIcon fontSize='small' color='secondary' />\r\n                <Typography\r\n                  variant='caption'\r\n                  color='text.secondary'\r\n                  fontWeight='medium'\r\n                >\r\n                  Supplements:\r\n                </Typography>\r\n              </Box>\r\n              {plan.supplements.map((supplement, index) => (\r\n                <Box key={index} sx={{ pl: 3, mb: 0.5 }}>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    • {supplement.name} ({supplement.dosage}) -{' '}\r\n                    {supplement.timing}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n            </Box>\r\n          )}\r\n        </Box>\r\n      </Collapse>\r\n\r\n      {!showMealDetails && (plan.meals || []).length > 0 && (\r\n        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.5 }}>\r\n          {(plan.meals || []).slice(0, 2).map((meal, index) => (\r\n            <Box\r\n              key={index}\r\n              sx={{\r\n                display: 'flex',\r\n                justifyContent: 'space-between',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                {getMealTypeIcon(meal.type)}\r\n                <Typography\r\n                  variant='caption'\r\n                  sx={{ fontWeight: 'medium', textTransform: 'capitalize' }}\r\n                >\r\n                  {meal.type || 'Meal'} - {(meal.foods || []).length} items\r\n                </Typography>\r\n              </Box>\r\n              <Typography variant='caption' color='text.secondary'>\r\n                {meal.calories || 0} cal\r\n              </Typography>\r\n            </Box>\r\n          ))}\r\n          {(plan.meals || []).length > 2 && (\r\n            <Typography\r\n              variant='caption'\r\n              color='primary.main'\r\n              sx={{ fontStyle: 'italic', cursor: 'pointer' }}\r\n              onClick={toggleMealDetails}\r\n            >\r\n              +{(plan.meals || []).length - 2} more meals... (click to expand)\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MealPlanDetails;\r\n","/**\r\n * Diet Plan Card Component\r\n * Individual card component for displaying diet plan details\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Chip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Avatar,\r\n  Divider,\r\n} from '@mui/material';\r\nimport {\r\n  MoreVert as MoreVertIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Assignment as AssignmentIcon,\r\n  Restaurant as RestaurantIcon,\r\n  AccessTime as AccessTimeIcon,\r\n  LocalFireDepartment as CalorieIcon,\r\n} from '@mui/icons-material';\r\nimport {\r\n  DIET_PLAN_TYPE_LABELS,\r\n  DIET_GOAL_LABELS,\r\n  DIET_PLAN_STATUS_COLORS,\r\n  DIET_PLAN_TYPE_COLORS,\r\n} from '../constants';\r\nimport MealPlanDetails from './MealPlanDetails';\r\n\r\nconst DietPlanCard = ({ plan, onEdit, onDelete, onAssign }) => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenuClick = (event) => {\r\n    event.stopPropagation();\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    handleMenuClose();\r\n    onEdit(plan);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    handleMenuClose();\r\n    onDelete(plan);\r\n  };\r\n\r\n  const handleAssign = () => {\r\n    handleMenuClose();\r\n    onAssign(plan);\r\n  };\r\n\r\n  const totalCalories = (plan.meals || []).reduce(\r\n    (sum, meal) => sum + (meal.calories || 0),\r\n    0\r\n  );\r\n\r\n  const totalMacros = (plan.meals || []).reduce(\r\n    (acc, meal) => {\r\n      // Calculate macros from foods within each meal\r\n      const mealMacros = (meal.foods || []).reduce(\r\n        (mealAcc, food) => ({\r\n          protein: mealAcc.protein + (food.protein || 0),\r\n          carbs: mealAcc.carbs + (food.carbs || 0),\r\n          fats: mealAcc.fats + (food.fats || 0),\r\n        }),\r\n        { protein: 0, carbs: 0, fats: 0 }\r\n      );\r\n\r\n      return {\r\n        protein: acc.protein + mealMacros.protein,\r\n        carbs: acc.carbs + mealMacros.carbs,\r\n        fats: acc.fats + mealMacros.fats,\r\n      };\r\n    },\r\n    { protein: 0, carbs: 0, fats: 0 }\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      sx={{\r\n        height: '100%',\r\n        minHeight: 400,\r\n        cursor: 'pointer',\r\n        transition: 'all 0.2s ease-in-out',\r\n        '&:hover': {\r\n          transform: 'translateY(-2px)',\r\n          boxShadow: 4,\r\n        },\r\n      }}\r\n    >\r\n      <CardContent>\r\n        {/* Header with menu */}\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'flex-start',\r\n            mb: 2,\r\n          }}\r\n        >\r\n          <Box sx={{ flex: 1 }}>\r\n            <Typography variant='h6' component='h3' gutterBottom>\r\n              {plan.name || 'Untitled Plan'}\r\n            </Typography>\r\n            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 1 }}>\r\n              {plan.type && (\r\n                <Chip\r\n                  label={DIET_PLAN_TYPE_LABELS[plan.type] || plan.type}\r\n                  color={DIET_PLAN_TYPE_COLORS[plan.type] || 'default'}\r\n                  size='small'\r\n                />\r\n              )}\r\n              {plan.goals && plan.goals.length > 0 && (\r\n                <Chip\r\n                  label={DIET_GOAL_LABELS[plan.goals[0]] || plan.goals[0]}\r\n                  variant='outlined'\r\n                  size='small'\r\n                />\r\n              )}\r\n              <Chip\r\n                label={plan.isActive ? 'Active' : 'Inactive'}\r\n                color={\r\n                  DIET_PLAN_STATUS_COLORS[plan.isActive ? 'active' : 'inactive']\r\n                }\r\n                size='small'\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <IconButton onClick={handleMenuClick} size='small' sx={{ ml: 1 }}>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n\r\n          <Menu\r\n            anchorEl={anchorEl}\r\n            open={open}\r\n            onClose={handleMenuClose}\r\n            onClick={(e) => e.stopPropagation()}\r\n          >\r\n            <MenuItem onClick={handleEdit}>\r\n              <EditIcon fontSize='small' sx={{ mr: 1 }} />\r\n              Edit Plan\r\n            </MenuItem>\r\n            <MenuItem onClick={handleAssign}>\r\n              <AssignmentIcon fontSize='small' sx={{ mr: 1 }} />\r\n              Assign to Member\r\n            </MenuItem>\r\n            <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>\r\n              <DeleteIcon fontSize='small' sx={{ mr: 1 }} />\r\n              Delete Plan\r\n            </MenuItem>\r\n          </Menu>\r\n        </Box>\r\n\r\n        {/* Description */}\r\n        <Typography\r\n          variant='body2'\r\n          color='text.secondary'\r\n          sx={{\r\n            mb: 2,\r\n            display: '-webkit-box',\r\n            overflow: 'hidden',\r\n            WebkitBoxOrient: 'vertical',\r\n            WebkitLineClamp: 2,\r\n          }}\r\n        >\r\n          {plan.description || 'No description available'}\r\n        </Typography>\r\n\r\n        {/* Enhanced Nutrition Summary */}\r\n        <Box sx={{ mb: 2 }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              gap: 2,\r\n              mb: 1,\r\n              flexWrap: 'wrap',\r\n            }}\r\n          >\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n              <CalorieIcon fontSize='small' color='primary' />\r\n              <Typography variant='body2' fontWeight='medium'>\r\n                {totalCalories} / {plan.targetCalories || 0} cal\r\n              </Typography>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n              <RestaurantIcon fontSize='small' color='secondary' />\r\n              <Typography variant='body2'>\r\n                {(plan.meals || []).length} meals\r\n              </Typography>\r\n            </Box>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}>\r\n              <AccessTimeIcon fontSize='small' color='info' />\r\n              <Typography variant='body2'>{plan.duration || 0} days</Typography>\r\n            </Box>\r\n          </Box>\r\n\r\n          {/* Target vs Actual Calories Progress */}\r\n          {plan.targetCalories && (\r\n            <Box sx={{ mb: 1 }}>\r\n              <Box\r\n                sx={{\r\n                  display: 'flex',\r\n                  justifyContent: 'space-between',\r\n                  mb: 0.5,\r\n                }}\r\n              >\r\n                <Typography variant='caption' color='text.secondary'>\r\n                  Calorie Target\r\n                </Typography>\r\n                <Typography variant='caption' color='text.secondary'>\r\n                  {Math.round((totalCalories / plan.targetCalories) * 100)}%\r\n                </Typography>\r\n              </Box>\r\n              <Box\r\n                sx={{\r\n                  width: '100%',\r\n                  height: 4,\r\n                  backgroundColor: 'grey.200',\r\n                  borderRadius: 1,\r\n                }}\r\n              >\r\n                <Box\r\n                  sx={{\r\n                    width: `${Math.min(\r\n                      (totalCalories / plan.targetCalories) * 100,\r\n                      100\r\n                    )}%`,\r\n                    height: '100%',\r\n                    backgroundColor:\r\n                      totalCalories <= plan.targetCalories\r\n                        ? 'success.main'\r\n                        : 'warning.main',\r\n                    borderRadius: 1,\r\n                  }}\r\n                />\r\n              </Box>\r\n            </Box>\r\n          )}\r\n\r\n          {/* Macro breakdown */}\r\n          <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n            <Chip\r\n              label={`P: ${Math.round(totalMacros.protein)}g`}\r\n              size='small'\r\n              variant='outlined'\r\n              color='success'\r\n            />\r\n            <Chip\r\n              label={`C: ${Math.round(totalMacros.carbs)}g`}\r\n              size='small'\r\n              variant='outlined'\r\n              color='warning'\r\n            />\r\n            <Chip\r\n              label={`F: ${Math.round(totalMacros.fats)}g`}\r\n              size='small'\r\n              variant='outlined'\r\n              color='error'\r\n            />\r\n            {plan.difficulty && (\r\n              <Chip\r\n                label={plan.difficulty}\r\n                size='small'\r\n                color='info'\r\n                variant='filled'\r\n                sx={{ textTransform: 'capitalize' }}\r\n              />\r\n            )}\r\n          </Box>\r\n        </Box>\r\n\r\n        <Divider sx={{ mb: 2 }} />\r\n\r\n        {/* Comprehensive Meal Details */}\r\n        <MealPlanDetails plan={plan} />\r\n\r\n        {/* Footer */}\r\n        <Box sx={{ mt: 2, pt: 1, borderTop: 1, borderColor: 'divider' }}>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Typography variant='caption' color='text.secondary'>\r\n              Created:{' '}\r\n              {plan.createdAt\r\n                ? new Date(plan.createdAt).toLocaleDateString()\r\n                : 'Unknown'}\r\n            </Typography>\r\n            <Avatar sx={{ width: 24, height: 24, fontSize: '0.75rem' }}>\r\n              {(plan.createdBy || 'U').charAt(0).toUpperCase()}\r\n            </Avatar>\r\n          </Box>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default DietPlanCard;\r\n","/**\r\n * Diet Plan List Component\r\n * Displays and manages the list of diet plans\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  MenuItem,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterListIcon,\r\n  Restaurant as RestaurantIcon,\r\n} from '@mui/icons-material';\r\nimport { useDietPlan } from '../context';\r\nimport { DIET_PLAN_TYPE_LABELS } from '../constants';\r\nimport DietPlanCard from './DietPlanCard';\r\n\r\nconst DietPlanList = () => {\r\n  const { dietPlans, openCreatePlan, openAssignPlan, deleteDietPlan } =\r\n    useDietPlan();\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState('all');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n\r\n  // Handler functions\r\n  const handleCreatePlan = () => {\r\n    openCreatePlan();\r\n  };\r\n\r\n  const handleEditPlan = (plan) => {\r\n    // Note: Edit functionality would need to be implemented in context\r\n    console.log('Edit plan:', plan);\r\n    // For now, just open create plan modal to demonstrate functionality\r\n    openCreatePlan();\r\n  };\r\n\r\n  const handleAssignPlan = (plan) => {\r\n    openAssignPlan(plan);\r\n  };\r\n\r\n  // Filter and search logic\r\n  const filteredPlans = useMemo(() => {\r\n    return dietPlans.filter((plan) => {\r\n      const matchesSearch =\r\n        (plan.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (plan.description || '')\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase());\r\n\r\n      const matchesType = filterType === 'all' || plan.type === filterType;\r\n      const matchesStatus =\r\n        filterStatus === 'all' ||\r\n        (filterStatus === 'active' && plan.isActive) ||\r\n        (filterStatus === 'inactive' && !plan.isActive);\r\n\r\n      return matchesSearch && matchesType && matchesStatus;\r\n    });\r\n  }, [dietPlans, searchTerm, filterType, filterStatus]);\r\n\r\n  const handleDeletePlan = (plan) => {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you want to delete \"${plan.name}\"? This action cannot be undone.`\r\n      )\r\n    ) {\r\n      deleteDietPlan(plan.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 3,\r\n        }}\r\n      >\r\n        <Typography variant='h5' component='h1'>\r\n          Diet Plans ({filteredPlans.length})\r\n        </Typography>\r\n        <Button\r\n          variant='contained'\r\n          startIcon={<AddIcon />}\r\n          onClick={handleCreatePlan}\r\n          sx={{ minWidth: 140 }}\r\n        >\r\n          Create Plan\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Filters */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems='center'>\r\n          <Grid size={{ xs: 12, sm: 4 }}>\r\n            <TextField\r\n              fullWidth\r\n              placeholder='Search plans...'\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position='start'>\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 6, sm: 3 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Type</InputLabel>\r\n              <Select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                label='Type'\r\n                startAdornment={<FilterListIcon sx={{ mr: 1 }} />}\r\n              >\r\n                <MenuItem value='all'>All Types</MenuItem>\r\n                {Object.entries(DIET_PLAN_TYPE_LABELS).map(([value, label]) => (\r\n                  <MenuItem key={value} value={value}>\r\n                    {label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid size={{ xs: 6, sm: 3 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={filterStatus}\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n                label='Status'\r\n              >\r\n                <MenuItem value='all'>All Status</MenuItem>\r\n                <MenuItem value='active'>Active</MenuItem>\r\n                <MenuItem value='inactive'>Inactive</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {/* Plans Grid */}\r\n      {filteredPlans.length === 0 ? (\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            py: 8,\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <RestaurantIcon\r\n            sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }}\r\n          />\r\n          <Typography variant='h6' color='text.secondary' gutterBottom>\r\n            {searchTerm || filterType !== 'all' || filterStatus !== 'all'\r\n              ? 'No plans match your filters'\r\n              : 'No diet plans found'}\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary' sx={{ mb: 3 }}>\r\n            {searchTerm || filterType !== 'all' || filterStatus !== 'all'\r\n              ? 'Try adjusting your search criteria or filters'\r\n              : 'Create your first diet plan to get started'}\r\n          </Typography>\r\n          <Button\r\n            variant='contained'\r\n            startIcon={<AddIcon />}\r\n            onClick={handleCreatePlan}\r\n          >\r\n            Create Diet Plan\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <Grid container spacing={3}>\r\n          {filteredPlans.map((plan) => (\r\n            <Grid key={plan.id} size={{ xs: 12, md: 6, xl: 4 }}>\r\n              <DietPlanCard\r\n                plan={plan}\r\n                onEdit={handleEditPlan}\r\n                onDelete={handleDeletePlan}\r\n                onAssign={handleAssignPlan}\r\n              />\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default DietPlanList;\r\n","/**\r\n * Assignment List Component\r\n * Displays and manages diet plan assignments\r\n */\r\n\r\nimport React, { useState, useMemo, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Button,\r\n  Chip,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  TextField,\r\n  InputAdornment,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Grid,\r\n  Avatar,\r\n  LinearProgress,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n  Paper,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Search as SearchIcon,\r\n  FilterList as FilterListIcon,\r\n  MoreVert as MoreVertIcon,\r\n  Visibility as VisibilityIcon,\r\n  Edit as EditIcon,\r\n  Delete as DeleteIcon,\r\n  Assignment as AssignmentIcon,\r\n} from '@mui/icons-material';\r\nimport { useDietPlan } from '../context';\r\nimport {\r\n  formatPercentage,\r\n  getAdherenceColor,\r\n  calculateProgress,\r\n  getDaysRemaining,\r\n  formatDate,\r\n} from '../utils/dietPlanUtils';\r\nimport {\r\n  ASSIGNMENT_STATUS_LABELS,\r\n  STATUS_COLORS,\r\n  DIET_PLAN_TYPE_LABELS,\r\n} from '../constants';\r\n\r\nconst AssignmentRow = ({\r\n  assignment,\r\n  plan,\r\n  onViewProgress,\r\n  onEdit,\r\n  onDelete,\r\n}) => {\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleMenuClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleViewProgress = () => {\r\n    handleMenuClose();\r\n    onViewProgress(assignment);\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    handleMenuClose();\r\n    onEdit(assignment);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    handleMenuClose();\r\n    onDelete(assignment);\r\n  };\r\n\r\n  const progress = calculateProgress(assignment.startDate, assignment.endDate);\r\n  const daysRemaining = getDaysRemaining(assignment.endDate);\r\n  const adherence = assignment.progress?.adherence || 0;\r\n\r\n  return (\r\n    <TableRow hover>\r\n      <TableCell>\r\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n          <Avatar sx={{ bgcolor: 'primary.main' }}>\r\n            {assignment.memberName.charAt(0)}\r\n          </Avatar>\r\n          <Box>\r\n            <Typography variant='subtitle2' fontWeight='medium'>\r\n              {assignment.memberName}\r\n            </Typography>\r\n            <Typography variant='caption' color='text.secondary'>\r\n              ID: {assignment.memberId}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Box>\r\n          <Typography variant='body2' fontWeight='medium'>\r\n            {plan?.name || 'Unknown Plan'}\r\n          </Typography>\r\n          <Typography variant='caption' color='text.secondary'>\r\n            {plan ? DIET_PLAN_TYPE_LABELS[plan.type] : 'N/A'}\r\n          </Typography>\r\n        </Box>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Chip\r\n          label={ASSIGNMENT_STATUS_LABELS[assignment.status]}\r\n          color={STATUS_COLORS[assignment.status]}\r\n          size='small'\r\n        />\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <Box>\r\n          <Typography variant='body2'>\r\n            {formatDate(assignment.startDate)}\r\n          </Typography>\r\n          <Typography variant='caption' color='text.secondary'>\r\n            to {formatDate(assignment.endDate)}\r\n          </Typography>\r\n        </Box>\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        {assignment.status === 'active' && (\r\n          <Box sx={{ minWidth: 120 }}>\r\n            <Box\r\n              sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}\r\n            >\r\n              <Typography variant='caption' color='text.secondary'>\r\n                Progress\r\n              </Typography>\r\n              <Typography variant='caption'>\r\n                {formatPercentage(progress)}\r\n              </Typography>\r\n            </Box>\r\n            <LinearProgress\r\n              variant='determinate'\r\n              value={progress}\r\n              sx={{ height: 6, borderRadius: 3 }}\r\n            />\r\n            <Typography\r\n              variant='caption'\r\n              color='text.secondary'\r\n              sx={{ mt: 0.5, display: 'block' }}\r\n            >\r\n              {daysRemaining} days left\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n        {assignment.status === 'completed' && (\r\n          <Typography variant='body2' color='success.main' fontWeight='medium'>\r\n            Completed\r\n          </Typography>\r\n        )}\r\n        {assignment.status === 'paused' && (\r\n          <Typography variant='body2' color='warning.main' fontWeight='medium'>\r\n            Paused\r\n          </Typography>\r\n        )}\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        {assignment.status === 'active' && (\r\n          <Box sx={{ textAlign: 'center' }}>\r\n            <Typography\r\n              variant='h6'\r\n              color={getAdherenceColor(adherence) + '.main'}\r\n              fontWeight='bold'\r\n            >\r\n              {formatPercentage(adherence)}\r\n            </Typography>\r\n            <Typography variant='caption' color='text.secondary'>\r\n              adherence\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </TableCell>\r\n\r\n      <TableCell>\r\n        <IconButton onClick={handleMenuClick} size='small'>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n        <Menu anchorEl={anchorEl} open={open} onClose={handleMenuClose}>\r\n          <MenuItem onClick={handleViewProgress}>\r\n            <VisibilityIcon fontSize='small' sx={{ mr: 1 }} />\r\n            View Progress\r\n          </MenuItem>\r\n          <MenuItem onClick={handleEdit}>\r\n            <EditIcon fontSize='small' sx={{ mr: 1 }} />\r\n            Edit Assignment\r\n          </MenuItem>\r\n          <MenuItem onClick={handleDelete} sx={{ color: 'error.main' }}>\r\n            <DeleteIcon fontSize='small' sx={{ mr: 1 }} />\r\n            Delete Assignment\r\n          </MenuItem>\r\n        </Menu>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nconst AssignmentList = () => {\r\n  const {\r\n    assignments,\r\n    dietPlans,\r\n    openAssignPlanModal,\r\n    openProgressModal,\r\n    deleteAssignment,\r\n  } = useDietPlan();\r\n\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n  const [filterType, setFilterType] = useState('all');\r\n  const [orderBy, setOrderBy] = useState('memberName');\r\n  const [order, setOrder] = useState('asc');\r\n\r\n  const handleRequestSort = (property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const descendingComparator = useCallback(\r\n    (a, b, orderBy) => {\r\n      const plan = dietPlans.find((p) => p.id === a.dietPlanId);\r\n      const planB = dietPlans.find((p) => p.id === b.dietPlanId);\r\n\r\n      let aValue, bValue;\r\n\r\n      switch (orderBy) {\r\n        case 'memberName':\r\n          aValue = a.memberName.toLowerCase();\r\n          bValue = b.memberName.toLowerCase();\r\n          break;\r\n        case 'planName':\r\n          aValue = (plan?.name || 'Unknown Plan').toLowerCase();\r\n          bValue = (planB?.name || 'Unknown Plan').toLowerCase();\r\n          break;\r\n        case 'status':\r\n          aValue = a.status;\r\n          bValue = b.status;\r\n          break;\r\n        case 'startDate':\r\n          aValue = new Date(a.startDate);\r\n          bValue = new Date(b.startDate);\r\n          break;\r\n        case 'endDate':\r\n          aValue = new Date(a.endDate);\r\n          bValue = new Date(b.endDate);\r\n          break;\r\n        case 'adherence':\r\n          aValue = a.progress?.adherence || 0;\r\n          bValue = b.progress?.adherence || 0;\r\n          break;\r\n        default:\r\n          aValue = a[orderBy];\r\n          bValue = b[orderBy];\r\n      }\r\n\r\n      if (bValue < aValue) return -1;\r\n      if (bValue > aValue) return 1;\r\n      return 0;\r\n    },\r\n    [dietPlans]\r\n  );\r\n\r\n  const getComparator = useCallback(\r\n    (order, orderBy) => {\r\n      return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n    },\r\n    [descendingComparator]\r\n  );\r\n\r\n  const sortData = useCallback((array, comparator) => {\r\n    const stabilizedArray = array.map((el, index) => [el, index]);\r\n    stabilizedArray.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedArray.map((el) => el[0]);\r\n  }, []);\r\n\r\n  // Filter and search logic\r\n  const filteredAssignments = useMemo(() => {\r\n    const filtered = assignments.filter((assignment) => {\r\n      const plan = dietPlans.find((p) => p.id === assignment.dietPlanId);\r\n\r\n      const matchesSearch =\r\n        assignment.memberName\r\n          .toLowerCase()\r\n          .includes(searchTerm.toLowerCase()) ||\r\n        (plan?.name || '').toLowerCase().includes(searchTerm.toLowerCase());\r\n\r\n      const matchesStatus =\r\n        filterStatus === 'all' || assignment.status === filterStatus;\r\n      const matchesType = filterType === 'all' || plan?.type === filterType;\r\n\r\n      return matchesSearch && matchesStatus && matchesType;\r\n    });\r\n\r\n    return sortData(filtered, getComparator(order, orderBy));\r\n  }, [\r\n    assignments,\r\n    dietPlans,\r\n    searchTerm,\r\n    filterStatus,\r\n    filterType,\r\n    order,\r\n    orderBy,\r\n    getComparator,\r\n    sortData,\r\n  ]);\r\n\r\n  // Group assignments by status for summary\r\n  const assignmentSummary = useMemo(() => {\r\n    return assignments.reduce((acc, assignment) => {\r\n      acc[assignment.status] = (acc[assignment.status] || 0) + 1;\r\n      acc.total = (acc.total || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n  }, [assignments]);\r\n\r\n  const handleDeleteAssignment = (assignment) => {\r\n    if (\r\n      window.confirm(\r\n        `Are you sure you want to delete the assignment for ${assignment.memberName}? This action cannot be undone.`\r\n      )\r\n    ) {\r\n      deleteAssignment(assignment.id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box>\r\n      {/* Header */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 3,\r\n        }}\r\n      >\r\n        <Box>\r\n          <Typography variant='h5' component='h1'>\r\n            Diet Plan Assignments ({filteredAssignments.length})\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary'>\r\n            Manage member diet plan assignments and track progress\r\n          </Typography>\r\n        </Box>\r\n        <Button\r\n          variant='contained'\r\n          startIcon={<AddIcon />}\r\n          onClick={openAssignPlanModal}\r\n          sx={{ minWidth: 160 }}\r\n        >\r\n          Assign Plan\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Summary Cards */}\r\n      <Grid container spacing={2} sx={{ mb: 3 }}>\r\n        <Grid size={{ xs: 6, sm: 3 }}>\r\n          <Card>\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant='h4' color='primary.main' fontWeight='bold'>\r\n                {assignmentSummary.total || 0}\r\n              </Typography>\r\n              <Typography variant='body2' color='text.secondary'>\r\n                Total Assignments\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid size={{ xs: 6, sm: 3 }}>\r\n          <Card>\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant='h4' color='success.main' fontWeight='bold'>\r\n                {assignmentSummary.active || 0}\r\n              </Typography>\r\n              <Typography variant='body2' color='text.secondary'>\r\n                Active\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid size={{ xs: 6, sm: 3 }}>\r\n          <Card>\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant='h4' color='info.main' fontWeight='bold'>\r\n                {assignmentSummary.completed || 0}\r\n              </Typography>\r\n              <Typography variant='body2' color='text.secondary'>\r\n                Completed\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n        <Grid size={{ xs: 6, sm: 3 }}>\r\n          <Card>\r\n            <CardContent sx={{ textAlign: 'center', py: 2 }}>\r\n              <Typography variant='h4' color='warning.main' fontWeight='bold'>\r\n                {assignmentSummary.paused || 0}\r\n              </Typography>\r\n              <Typography variant='body2' color='text.secondary'>\r\n                Paused\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Filters */}\r\n      <Box sx={{ mb: 3 }}>\r\n        <Grid container spacing={2} alignItems='center'>\r\n          <Grid size={{ xs: 12, sm: 4 }}>\r\n            <TextField\r\n              fullWidth\r\n              placeholder='Search by member or plan name...'\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position='start'>\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 6, sm: 3 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Status</InputLabel>\r\n              <Select\r\n                value={filterStatus}\r\n                onChange={(e) => setFilterStatus(e.target.value)}\r\n                label='Status'\r\n                startAdornment={<FilterListIcon sx={{ mr: 1 }} />}\r\n              >\r\n                <MenuItem value='all'>All Status</MenuItem>\r\n                {Object.entries(ASSIGNMENT_STATUS_LABELS).map(\r\n                  ([value, label]) => (\r\n                    <MenuItem key={value} value={value}>\r\n                      {label}\r\n                    </MenuItem>\r\n                  )\r\n                )}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid size={{ xs: 6, sm: 3 }}>\r\n            <FormControl fullWidth>\r\n              <InputLabel>Plan Type</InputLabel>\r\n              <Select\r\n                value={filterType}\r\n                onChange={(e) => setFilterType(e.target.value)}\r\n                label='Plan Type'\r\n              >\r\n                <MenuItem value='all'>All Types</MenuItem>\r\n                {Object.entries(DIET_PLAN_TYPE_LABELS).map(([value, label]) => (\r\n                  <MenuItem key={value} value={value}>\r\n                    {label}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      {/* Assignments Table */}\r\n      {filteredAssignments.length === 0 ? (\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            py: 8,\r\n            textAlign: 'center',\r\n          }}\r\n        >\r\n          <AssignmentIcon\r\n            sx={{ fontSize: 64, color: 'text.secondary', mb: 2 }}\r\n          />\r\n          <Typography variant='h6' color='text.secondary' gutterBottom>\r\n            {searchTerm || filterStatus !== 'all' || filterType !== 'all'\r\n              ? 'No assignments match your filters'\r\n              : 'No assignments found'}\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary' sx={{ mb: 3 }}>\r\n            {searchTerm || filterStatus !== 'all' || filterType !== 'all'\r\n              ? 'Try adjusting your search criteria or filters'\r\n              : 'Create your first assignment to get started'}\r\n          </Typography>\r\n          <Button\r\n            variant='contained'\r\n            startIcon={<AddIcon />}\r\n            onClick={openAssignPlanModal}\r\n          >\r\n            Assign Diet Plan\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <TableContainer component={Paper}>\r\n          <Table size='small'>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={orderBy === 'memberName'}\r\n                    direction={orderBy === 'memberName' ? order : 'asc'}\r\n                    onClick={() => handleRequestSort('memberName')}\r\n                  >\r\n                    Member\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={orderBy === 'planName'}\r\n                    direction={orderBy === 'planName' ? order : 'asc'}\r\n                    onClick={() => handleRequestSort('planName')}\r\n                  >\r\n                    Diet Plan\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={orderBy === 'status'}\r\n                    direction={orderBy === 'status' ? order : 'asc'}\r\n                    onClick={() => handleRequestSort('status')}\r\n                  >\r\n                    Status\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={orderBy === 'startDate'}\r\n                    direction={orderBy === 'startDate' ? order : 'asc'}\r\n                    onClick={() => handleRequestSort('startDate')}\r\n                  >\r\n                    Duration\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell>Progress</TableCell>\r\n                <TableCell>\r\n                  <TableSortLabel\r\n                    active={orderBy === 'adherence'}\r\n                    direction={orderBy === 'adherence' ? order : 'asc'}\r\n                    onClick={() => handleRequestSort('adherence')}\r\n                  >\r\n                    Adherence\r\n                  </TableSortLabel>\r\n                </TableCell>\r\n                <TableCell width={50}>Actions</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {filteredAssignments.map((assignment) => {\r\n                const plan = dietPlans.find(\r\n                  (p) => p.id === assignment.dietPlanId\r\n                );\r\n                return (\r\n                  <AssignmentRow\r\n                    key={assignment.id}\r\n                    assignment={assignment}\r\n                    plan={plan}\r\n                    onViewProgress={openProgressModal}\r\n                    onEdit={() => {}} // TODO: Implement edit assignment\r\n                    onDelete={handleDeleteAssignment}\r\n                  />\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AssignmentList;\r\n","/**\r\n * Analytics View Component\r\n * Displays comprehensive analytics and insights for diet plan management\r\n */\r\n\r\nimport React, { useMemo, useState, useCallback } from 'react';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Typography,\r\n  Grid,\r\n  Chip,\r\n  Avatar,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  TableSortLabel,\r\n} from '@mui/material';\r\nimport {\r\n  TrendingUp as TrendingUpIcon,\r\n  TrendingDown as TrendingDownIcon,\r\n  Group as GroupIcon,\r\n  Restaurant as RestaurantIcon,\r\n  CheckCircle as CheckCircleIcon,\r\n} from '@mui/icons-material';\r\nimport { PieChart } from '@mui/x-charts/PieChart';\r\nimport { BarChart } from '@mui/x-charts/BarChart';\r\nimport { LineChart } from '@mui/x-charts/LineChart';\r\nimport { useDietPlan } from '../context';\r\nimport { formatPercentage, getAdherenceColor } from '../utils/dietPlanUtils';\r\nimport {\r\n  DIET_PLAN_TYPE_LABELS,\r\n  DIET_GOAL_LABELS,\r\n  ASSIGNMENT_STATUS_LABELS,\r\n} from '../constants';\r\n\r\nconst MetricCard = ({\r\n  title,\r\n  value,\r\n  subtitle,\r\n  trend,\r\n  trendValue,\r\n  icon,\r\n  color = 'primary',\r\n}) => (\r\n  <Card sx={{ height: '100%' }}>\r\n    <CardContent>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\r\n        <Avatar sx={{ bgcolor: `${color}.main`, mr: 2 }}>{icon}</Avatar>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant='h4' component='div' fontWeight='bold'>\r\n            {value}\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary'>\r\n            {title}\r\n          </Typography>\r\n          {subtitle && (\r\n            <Typography variant='caption' color='text.secondary'>\r\n              {subtitle}\r\n            </Typography>\r\n          )}\r\n        </Box>\r\n        {trend && (\r\n          <Box sx={{ textAlign: 'right' }}>\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'flex-end',\r\n              }}\r\n            >\r\n              {trend === 'up' ? (\r\n                <TrendingUpIcon color='success' />\r\n              ) : (\r\n                <TrendingDownIcon color='error' />\r\n              )}\r\n              <Typography\r\n                variant='caption'\r\n                color={trend === 'up' ? 'success.main' : 'error.main'}\r\n                fontWeight='medium'\r\n                sx={{ ml: 0.5 }}\r\n              >\r\n                {trendValue}\r\n              </Typography>\r\n            </Box>\r\n            <Typography variant='caption' color='text.secondary'>\r\n              vs last month\r\n            </Typography>\r\n          </Box>\r\n        )}\r\n      </Box>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nconst TopPerformersTable = ({ assignments, dietPlans }) => {\r\n  const [orderBy, setOrderBy] = useState('adherence');\r\n  const [order, setOrder] = useState('desc');\r\n\r\n  const handleRequestSort = (property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const descendingComparator = useCallback((a, b, orderBy) => {\r\n    let aValue, bValue;\r\n\r\n    switch (orderBy) {\r\n      case 'memberName':\r\n        aValue = a.memberName.toLowerCase();\r\n        bValue = b.memberName.toLowerCase();\r\n        break;\r\n      case 'planName':\r\n        aValue = a.planName.toLowerCase();\r\n        bValue = b.planName.toLowerCase();\r\n        break;\r\n      case 'planType':\r\n        aValue = a.planType.toLowerCase();\r\n        bValue = b.planType.toLowerCase();\r\n        break;\r\n      case 'adherence':\r\n        aValue = a.progress?.adherence || 0;\r\n        bValue = b.progress?.adherence || 0;\r\n        break;\r\n      case 'weightChange':\r\n        aValue = a.progress?.weightChange || 0;\r\n        bValue = b.progress?.weightChange || 0;\r\n        break;\r\n      default:\r\n        aValue = a[orderBy];\r\n        bValue = b[orderBy];\r\n    }\r\n\r\n    if (bValue < aValue) return -1;\r\n    if (bValue > aValue) return 1;\r\n    return 0;\r\n  }, []);\r\n\r\n  const getComparator = useCallback(\r\n    (order, orderBy) => {\r\n      return order === 'desc'\r\n        ? (a, b) => descendingComparator(a, b, orderBy)\r\n        : (a, b) => -descendingComparator(a, b, orderBy);\r\n    },\r\n    [descendingComparator]\r\n  );\r\n\r\n  const sortData = useCallback((array, comparator) => {\r\n    const stabilizedArray = array.map((el, index) => [el, index]);\r\n    stabilizedArray.sort((a, b) => {\r\n      const order = comparator(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedArray.map((el) => el[0]);\r\n  }, []);\r\n\r\n  const topPerformers = useMemo(() => {\r\n    const filteredData = assignments\r\n      .filter(\r\n        (assignment) =>\r\n          assignment.status === 'active' && assignment.progress?.adherence\r\n      )\r\n      .map((assignment) => {\r\n        const plan = dietPlans.find((p) => p.id === assignment.dietPlanId);\r\n        return {\r\n          ...assignment,\r\n          planName: plan?.name || 'Unknown Plan',\r\n          planType: plan?.type || 'unknown',\r\n        };\r\n      });\r\n\r\n    return sortData(filteredData, getComparator(order, orderBy)).slice(0, 10);\r\n  }, [assignments, dietPlans, order, orderBy, getComparator, sortData]);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table size='small'>\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>\r\n              <TableSortLabel\r\n                active={orderBy === 'memberName'}\r\n                direction={orderBy === 'memberName' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('memberName')}\r\n              >\r\n                Member\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell>\r\n              <TableSortLabel\r\n                active={orderBy === 'planName'}\r\n                direction={orderBy === 'planName' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('planName')}\r\n              >\r\n                Diet Plan\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell>\r\n              <TableSortLabel\r\n                active={orderBy === 'planType'}\r\n                direction={orderBy === 'planType' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('planType')}\r\n              >\r\n                Type\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'adherence'}\r\n                direction={orderBy === 'adherence' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('adherence')}\r\n              >\r\n                Adherence\r\n              </TableSortLabel>\r\n            </TableCell>\r\n            <TableCell align='center'>\r\n              <TableSortLabel\r\n                active={orderBy === 'weightChange'}\r\n                direction={orderBy === 'weightChange' ? order : 'asc'}\r\n                onClick={() => handleRequestSort('weightChange')}\r\n              >\r\n                Weight Progress\r\n              </TableSortLabel>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {topPerformers.map((assignment, index) => (\r\n            <TableRow key={assignment.id}>\r\n              <TableCell>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n                  <Typography\r\n                    variant='caption'\r\n                    color='text.secondary'\r\n                    sx={{ minWidth: 20 }}\r\n                  >\r\n                    #{index + 1}\r\n                  </Typography>\r\n                  <Avatar sx={{ width: 32, height: 32 }}>\r\n                    {assignment.memberName.charAt(0)}\r\n                  </Avatar>\r\n                  <Typography variant='body2' fontWeight='medium'>\r\n                    {assignment.memberName}\r\n                  </Typography>\r\n                </Box>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Typography variant='body2'>{assignment.planName}</Typography>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Chip\r\n                  label={\r\n                    DIET_PLAN_TYPE_LABELS[assignment.planType] ||\r\n                    assignment.planType\r\n                  }\r\n                  size='small'\r\n                  variant='outlined'\r\n                />\r\n              </TableCell>\r\n              <TableCell align='center'>\r\n                <Typography\r\n                  variant='body2'\r\n                  fontWeight='bold'\r\n                  color={\r\n                    getAdherenceColor(assignment.progress?.adherence || 0) +\r\n                    '.main'\r\n                  }\r\n                >\r\n                  {formatPercentage(assignment.progress?.adherence || 0)}\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell align='center'>\r\n                <Typography\r\n                  variant='body2'\r\n                  color={\r\n                    assignment.progress?.weightChange >= 0\r\n                      ? 'success.main'\r\n                      : 'error.main'\r\n                  }\r\n                  fontWeight='medium'\r\n                >\r\n                  {assignment.progress?.weightChange > 0 ? '+' : ''}\r\n                  {assignment.progress?.weightChange || 0} kg\r\n                </Typography>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nconst AnalyticsView = () => {\r\n  const { dietPlans, assignments } = useDietPlan();\r\n\r\n  // Calculate comprehensive metrics\r\n  const analytics = useMemo(() => {\r\n    const activeAssignments = assignments.filter((a) => a.status === 'active');\r\n    const completedAssignments = assignments.filter(\r\n      (a) => a.status === 'completed'\r\n    );\r\n\r\n    // Basic metrics\r\n    const totalMembers = new Set(assignments.map((a) => a.memberId)).size;\r\n    const avgAdherence =\r\n      activeAssignments.length > 0\r\n        ? activeAssignments.reduce(\r\n            (sum, a) => sum + (a.progress?.adherence || 0),\r\n            0\r\n          ) / activeAssignments.length\r\n        : 0;\r\n\r\n    const completionRate =\r\n      assignments.length > 0\r\n        ? (completedAssignments.length / assignments.length) * 100\r\n        : 0;\r\n\r\n    // Plan type distribution\r\n    const planTypeDistribution = assignments.reduce((acc, assignment) => {\r\n      const plan = dietPlans.find((p) => p.id === assignment.dietPlanId);\r\n      if (plan) {\r\n        const label = DIET_PLAN_TYPE_LABELS[plan.type] || plan.type;\r\n        acc[label] = (acc[label] || 0) + 1;\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    // Goal distribution\r\n    const goalDistribution = assignments.reduce((acc, assignment) => {\r\n      const plan = dietPlans.find((p) => p.id === assignment.dietPlanId);\r\n      if (plan && plan.goals) {\r\n        plan.goals.forEach((goal) => {\r\n          const label = DIET_GOAL_LABELS[goal] || goal;\r\n          acc[label] = (acc[label] || 0) + 1;\r\n        });\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    // Status distribution\r\n    const statusDistribution = assignments.reduce((acc, assignment) => {\r\n      const label =\r\n        ASSIGNMENT_STATUS_LABELS[assignment.status] || assignment.status;\r\n      acc[label] = (acc[label] || 0) + 1;\r\n      return acc;\r\n    }, {});\r\n\r\n    // Adherence distribution\r\n    const adherenceRanges = {\r\n      'Excellent (90-100%)': 0,\r\n      'Good (70-89%)': 0,\r\n      'Fair (50-69%)': 0,\r\n      'Poor (<50%)': 0,\r\n    };\r\n\r\n    activeAssignments.forEach((assignment) => {\r\n      const adherence = assignment.progress?.adherence || 0;\r\n      if (adherence >= 90) adherenceRanges['Excellent (90-100%)']++;\r\n      else if (adherence >= 70) adherenceRanges['Good (70-89%)']++;\r\n      else if (adherence >= 50) adherenceRanges['Fair (50-69%)']++;\r\n      else adherenceRanges['Poor (<50%)']++;\r\n    });\r\n\r\n    // Monthly trends (mock data for demo)\r\n    const monthlyTrends = [\r\n      { month: 'Jan', assignments: 12, completions: 8, avgAdherence: 78 },\r\n      { month: 'Feb', assignments: 15, completions: 10, avgAdherence: 82 },\r\n      { month: 'Mar', assignments: 18, completions: 12, avgAdherence: 85 },\r\n      { month: 'Apr', assignments: 22, completions: 16, avgAdherence: 88 },\r\n      { month: 'May', assignments: 25, completions: 18, avgAdherence: 86 },\r\n      { month: 'Jun', assignments: 20, completions: 14, avgAdherence: 84 },\r\n    ];\r\n\r\n    return {\r\n      totalMembers,\r\n      totalAssignments: assignments.length,\r\n      activeAssignments: activeAssignments.length,\r\n      completedAssignments: completedAssignments.length,\r\n      avgAdherence: Math.round(avgAdherence),\r\n      completionRate: Math.round(completionRate),\r\n      planTypeDistribution,\r\n      goalDistribution,\r\n      statusDistribution,\r\n      adherenceRanges,\r\n      monthlyTrends,\r\n    };\r\n  }, [dietPlans, assignments]);\r\n\r\n  // Prepare chart data\r\n  const planTypeChartData = Object.entries(analytics.planTypeDistribution).map(\r\n    ([type, count]) => ({\r\n      id: type,\r\n      label: type,\r\n      value: count,\r\n    })\r\n  );\r\n\r\n  const adherenceChartData = Object.entries(analytics.adherenceRanges).map(\r\n    ([range, count]) => ({\r\n      id: range,\r\n      label: range,\r\n      value: count,\r\n    })\r\n  );\r\n\r\n  return (\r\n    <Box>\r\n      <Typography variant='h5' component='h1' gutterBottom>\r\n        Diet Plan Analytics\r\n      </Typography>\r\n      <Typography variant='body2' color='text.secondary' sx={{ mb: 4 }}>\r\n        Comprehensive insights and performance metrics for your diet plan\r\n        management\r\n      </Typography>\r\n\r\n      {/* Key Metrics */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Total Members'\r\n            value={analytics.totalMembers}\r\n            icon={<GroupIcon />}\r\n            color='primary'\r\n            trend='up'\r\n            trendValue='+12%'\r\n          />\r\n        </Grid>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Active Assignments'\r\n            value={analytics.activeAssignments}\r\n            subtitle={`${analytics.totalAssignments} total`}\r\n            icon={<RestaurantIcon />}\r\n            color='secondary'\r\n            trend='up'\r\n            trendValue='+8%'\r\n          />\r\n        </Grid>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Completion Rate'\r\n            value={`${analytics.completionRate}%`}\r\n            icon={<CheckCircleIcon />}\r\n            color='success'\r\n            trend='up'\r\n            trendValue='+15%'\r\n          />\r\n        </Grid>\r\n        <Grid size={{ xs: 12, sm: 6, md: 3 }}>\r\n          <MetricCard\r\n            title='Avg Adherence'\r\n            value={`${analytics.avgAdherence}%`}\r\n            icon={<TrendingUpIcon />}\r\n            color={getAdherenceColor(analytics.avgAdherence)}\r\n            trend='up'\r\n            trendValue='+5%'\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Charts Row 1 */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        {/* Plan Type Distribution */}\r\n        <Grid size={{ xs: 12, md: 6 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Plan Type Distribution\r\n              </Typography>\r\n              {planTypeChartData.length > 0 ? (\r\n                <Box sx={{ height: 300 }}>\r\n                  <PieChart\r\n                    series={[\r\n                      {\r\n                        data: planTypeChartData,\r\n                        highlightScope: {\r\n                          faded: 'global',\r\n                          highlighted: 'item',\r\n                        },\r\n                        faded: {\r\n                          innerRadius: 30,\r\n                          additionalRadius: -30,\r\n                          color: 'gray',\r\n                        },\r\n                      },\r\n                    ]}\r\n                    height={280}\r\n                    margin={{ top: 20, bottom: 20, left: 20, right: 20 }}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                <Box\r\n                  sx={{\r\n                    height: 300,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                  }}\r\n                >\r\n                  <Typography color='text.secondary'>\r\n                    No data available\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n\r\n        {/* Adherence Distribution */}\r\n        <Grid size={{ xs: 12, md: 6 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Adherence Distribution\r\n              </Typography>\r\n              {adherenceChartData.some((item) => item.value > 0) ? (\r\n                <Box sx={{ height: 300 }}>\r\n                  <BarChart\r\n                    xAxis={[\r\n                      {\r\n                        scaleType: 'band',\r\n                        data: adherenceChartData.map((item) => item.label),\r\n                      },\r\n                    ]}\r\n                    series={[\r\n                      {\r\n                        data: adherenceChartData.map((item) => item.value),\r\n                        color: '#1976d2',\r\n                      },\r\n                    ]}\r\n                    height={280}\r\n                    margin={{ top: 20, bottom: 60, left: 40, right: 20 }}\r\n                  />\r\n                </Box>\r\n              ) : (\r\n                <Box\r\n                  sx={{\r\n                    height: 300,\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                  }}\r\n                >\r\n                  <Typography color='text.secondary'>\r\n                    No active assignments\r\n                  </Typography>\r\n                </Box>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Monthly Trends */}\r\n      <Grid container spacing={3} sx={{ mb: 4 }}>\r\n        <Grid size={{ xs: 12 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Monthly Trends\r\n              </Typography>\r\n              <Box sx={{ height: 300 }}>\r\n                <LineChart\r\n                  xAxis={[\r\n                    {\r\n                      data: analytics.monthlyTrends.map((item) => item.month),\r\n                      scaleType: 'point',\r\n                    },\r\n                  ]}\r\n                  series={[\r\n                    {\r\n                      data: analytics.monthlyTrends.map(\r\n                        (item) => item.assignments\r\n                      ),\r\n                      label: 'New Assignments',\r\n                      color: '#1976d2',\r\n                    },\r\n                    {\r\n                      data: analytics.monthlyTrends.map(\r\n                        (item) => item.completions\r\n                      ),\r\n                      label: 'Completions',\r\n                      color: '#2e7d32',\r\n                    },\r\n                    {\r\n                      data: analytics.monthlyTrends.map(\r\n                        (item) => item.avgAdherence\r\n                      ),\r\n                      label: 'Avg Adherence %',\r\n                      color: '#ed6c02',\r\n                    },\r\n                  ]}\r\n                  height={280}\r\n                  margin={{ top: 20, bottom: 40, left: 60, right: 20 }}\r\n                />\r\n              </Box>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Top Performers */}\r\n      <Grid container spacing={3}>\r\n        <Grid size={{ xs: 12 }}>\r\n          <Card>\r\n            <CardContent>\r\n              <Typography variant='h6' gutterBottom>\r\n                Top Performers\r\n              </Typography>\r\n              <Typography variant='body2' color='text.secondary' sx={{ mb: 2 }}>\r\n                Members with highest adherence rates in active assignments\r\n              </Typography>\r\n              <TopPerformersTable\r\n                assignments={assignments}\r\n                dietPlans={dietPlans}\r\n              />\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AnalyticsView;\r\n","/**\r\n * Create Diet Plan Modal Component\r\n * Modal for creating new diet plans\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  Chip,\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  InputAdornment,\r\n} from '@mui/material';\r\nimport {\r\n  Close as CloseIcon,\r\n  Add as AddIcon,\r\n  Delete as DeleteIcon,\r\n  Restaurant as RestaurantIcon,\r\n} from '@mui/icons-material';\r\nimport { useDietPlan } from '../context';\r\nimport {\r\n  DIET_PLAN_TYPES,\r\n  DIET_GOALS,\r\n  MEAL_TYPES,\r\n  DIET_PLAN_TYPE_LABELS,\r\n  DIET_GOAL_LABELS,\r\n} from '../constants';\r\n\r\nconst MealForm = ({ meal, index, onChange, onRemove }) => {\r\n  const handleChange = (field, value) => {\r\n    onChange(index, {\r\n      ...meal,\r\n      [field]: value,\r\n    });\r\n  };\r\n\r\n  const handleMacroChange = (macro, value) => {\r\n    onChange(index, {\r\n      ...meal,\r\n      macros: {\r\n        ...meal.macros,\r\n        [macro]: parseFloat(value) || 0,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Card variant='outlined' sx={{ mb: 2 }}>\r\n      <CardContent>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            mb: 2,\r\n          }}\r\n        >\r\n          <Typography variant='subtitle1' fontWeight='medium'>\r\n            Meal {index + 1}\r\n          </Typography>\r\n          <IconButton\r\n            onClick={() => onRemove(index)}\r\n            color='error'\r\n            size='small'\r\n          >\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </Box>\r\n\r\n        <Grid container spacing={2}>\r\n          <Grid size={{ xs: 12, sm: 6 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Meal Name'\r\n              value={meal.name}\r\n              onChange={(e) => handleChange('name', e.target.value)}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 6 }}>\r\n            <FormControl fullWidth required>\r\n              <InputLabel>Meal Type</InputLabel>\r\n              <Select\r\n                value={meal.type}\r\n                onChange={(e) => handleChange('type', e.target.value)}\r\n                label='Meal Type'\r\n              >\r\n                {MEAL_TYPES.map((type) => (\r\n                  <MenuItem key={type} value={type}>\r\n                    {type.charAt(0).toUpperCase() + type.slice(1)}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid size={{ xs: 12 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Description'\r\n              value={meal.description}\r\n              onChange={(e) => handleChange('description', e.target.value)}\r\n              multiline\r\n              rows={2}\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 3 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Calories'\r\n              type='number'\r\n              value={meal.calories}\r\n              onChange={(e) =>\r\n                handleChange('calories', parseInt(e.target.value) || 0)\r\n              }\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position='end'>kcal</InputAdornment>\r\n                ),\r\n              }}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 3 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Protein'\r\n              type='number'\r\n              value={meal.macros.protein}\r\n              onChange={(e) => handleMacroChange('protein', e.target.value)}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>g</InputAdornment>,\r\n              }}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 3 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Carbs'\r\n              type='number'\r\n              value={meal.macros.carbs}\r\n              onChange={(e) => handleMacroChange('carbs', e.target.value)}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>g</InputAdornment>,\r\n              }}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 3 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Fats'\r\n              type='number'\r\n              value={meal.macros.fats}\r\n              onChange={(e) => handleMacroChange('fats', e.target.value)}\r\n              InputProps={{\r\n                endAdornment: <InputAdornment position='end'>g</InputAdornment>,\r\n              }}\r\n              required\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst CreatePlanModal = ({ open, onClose }) => {\r\n  const { createDietPlan } = useDietPlan();\r\n\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    description: '',\r\n    type: '',\r\n    goals: [],\r\n    duration: 30,\r\n    meals: [\r\n      {\r\n        name: '',\r\n        type: 'breakfast',\r\n        description: '',\r\n        calories: 0,\r\n        macros: { protein: 0, carbs: 0, fats: 0 },\r\n      },\r\n    ],\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleChange = (field, value) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [field]: value,\r\n    }));\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({ ...prev, [field]: null }));\r\n    }\r\n  };\r\n\r\n  const handleGoalToggle = (goal) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      goals: prev.goals.includes(goal)\r\n        ? prev.goals.filter((g) => g !== goal)\r\n        : [...prev.goals, goal],\r\n    }));\r\n  };\r\n\r\n  const handleMealChange = (index, meal) => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      meals: prev.meals.map((m, i) => (i === index ? meal : m)),\r\n    }));\r\n  };\r\n\r\n  const handleAddMeal = () => {\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      meals: [\r\n        ...prev.meals,\r\n        {\r\n          name: '',\r\n          type: 'lunch',\r\n          description: '',\r\n          calories: 0,\r\n          macros: { protein: 0, carbs: 0, fats: 0 },\r\n        },\r\n      ],\r\n    }));\r\n  };\r\n\r\n  const handleRemoveMeal = (index) => {\r\n    if (formData.meals.length > 1) {\r\n      setFormData((prev) => ({\r\n        ...prev,\r\n        meals: prev.meals.filter((_, i) => i !== index),\r\n      }));\r\n    }\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!formData.name.trim()) {\r\n      newErrors.name = 'Plan name is required';\r\n    }\r\n\r\n    if (!formData.type) {\r\n      newErrors.type = 'Plan type is required';\r\n    }\r\n\r\n    if (formData.goals.length === 0) {\r\n      newErrors.goals = 'At least one goal is required';\r\n    }\r\n\r\n    if (formData.duration <= 0) {\r\n      newErrors.duration = 'Duration must be positive';\r\n    }\r\n\r\n    // Validate meals\r\n    formData.meals.forEach((meal, index) => {\r\n      if (!meal.name.trim()) {\r\n        newErrors[`meal_${index}_name`] = 'Meal name is required';\r\n      }\r\n      if (meal.calories <= 0) {\r\n        newErrors[`meal_${index}_calories`] = 'Calories must be positive';\r\n      }\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (validateForm()) {\r\n      createDietPlan(formData);\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setFormData({\r\n      name: '',\r\n      description: '',\r\n      type: '',\r\n      goals: [],\r\n      duration: 30,\r\n      meals: [\r\n        {\r\n          name: '',\r\n          type: 'breakfast',\r\n          description: '',\r\n          calories: 0,\r\n          macros: { protein: 0, carbs: 0, fats: 0 },\r\n        },\r\n      ],\r\n    });\r\n    setErrors({});\r\n    onClose();\r\n  };\r\n\r\n  const totalCalories = formData.meals.reduce(\r\n    (sum, meal) => sum + meal.calories,\r\n    0\r\n  );\r\n  const totalMacros = formData.meals.reduce(\r\n    (acc, meal) => ({\r\n      protein: acc.protein + (meal.macros?.protein || 0),\r\n      carbs: acc.carbs + (meal.macros?.carbs || 0),\r\n      fats: acc.fats + (meal.macros?.fats || 0),\r\n    }),\r\n    { protein: 0, carbs: 0, fats: 0 }\r\n  );\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      maxWidth='md'\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: { height: '90vh' },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <RestaurantIcon />\r\n            <Typography variant='h6' component='span'>\r\n              Create New Diet Plan\r\n            </Typography>\r\n          </Box>\r\n          <IconButton onClick={handleClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers sx={{ p: 3 }}>\r\n        {/* Basic Information */}\r\n        <Typography variant='h6' gutterBottom>\r\n          Basic Information\r\n        </Typography>\r\n        <Grid container spacing={2} sx={{ mb: 3 }}>\r\n          <Grid size={{ xs: 12, sm: 8 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Plan Name'\r\n              value={formData.name}\r\n              onChange={(e) => handleChange('name', e.target.value)}\r\n              error={!!errors.name}\r\n              helperText={errors.name}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 4 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Duration'\r\n              type='number'\r\n              value={formData.duration}\r\n              onChange={(e) =>\r\n                handleChange('duration', parseInt(e.target.value) || 0)\r\n              }\r\n              error={!!errors.duration}\r\n              helperText={errors.duration}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position='end'>days</InputAdornment>\r\n                ),\r\n              }}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12 }}>\r\n            <TextField\r\n              fullWidth\r\n              label='Description'\r\n              value={formData.description}\r\n              onChange={(e) => handleChange('description', e.target.value)}\r\n              multiline\r\n              rows={3}\r\n            />\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 6 }}>\r\n            <FormControl fullWidth required error={!!errors.type}>\r\n              <InputLabel>Plan Type</InputLabel>\r\n              <Select\r\n                value={formData.type}\r\n                onChange={(e) => handleChange('type', e.target.value)}\r\n                label='Plan Type'\r\n              >\r\n                {DIET_PLAN_TYPES.map((type) => (\r\n                  <MenuItem key={type} value={type}>\r\n                    {DIET_PLAN_TYPE_LABELS[type]}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid size={{ xs: 12, sm: 6 }}>\r\n            <Box>\r\n              <Typography variant='body2' color='text.secondary' sx={{ mb: 1 }}>\r\n                Goals {errors.goals && <span style={{ color: 'red' }}>*</span>}\r\n              </Typography>\r\n              <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\r\n                {DIET_GOALS.map((goal) => (\r\n                  <Chip\r\n                    key={goal}\r\n                    label={DIET_GOAL_LABELS[goal]}\r\n                    color={\r\n                      formData.goals.includes(goal) ? 'primary' : 'default'\r\n                    }\r\n                    onClick={() => handleGoalToggle(goal)}\r\n                    variant={\r\n                      formData.goals.includes(goal) ? 'filled' : 'outlined'\r\n                    }\r\n                  />\r\n                ))}\r\n              </Box>\r\n              {errors.goals && (\r\n                <Typography\r\n                  variant='caption'\r\n                  color='error'\r\n                  sx={{ mt: 1, display: 'block' }}\r\n                >\r\n                  {errors.goals}\r\n                </Typography>\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Divider sx={{ my: 3 }} />\r\n\r\n        {/* Meals Section */}\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            mb: 2,\r\n          }}\r\n        >\r\n          <Typography variant='h6'>Meals ({formData.meals.length})</Typography>\r\n          <Button\r\n            variant='outlined'\r\n            startIcon={<AddIcon />}\r\n            onClick={handleAddMeal}\r\n            size='small'\r\n          >\r\n            Add Meal\r\n          </Button>\r\n        </Box>\r\n\r\n        {formData.meals.map((meal, index) => (\r\n          <MealForm\r\n            key={index}\r\n            meal={meal}\r\n            index={index}\r\n            onChange={handleMealChange}\r\n            onRemove={handleRemoveMeal}\r\n          />\r\n        ))}\r\n\r\n        {/* Nutrition Summary */}\r\n        <Card variant='outlined' sx={{ mt: 2, bgcolor: 'background.paper' }}>\r\n          <CardContent>\r\n            <Typography variant='subtitle1' fontWeight='medium' gutterBottom>\r\n              Daily Nutrition Summary\r\n            </Typography>\r\n            <Grid container spacing={2}>\r\n              <Grid size={{ xs: 6, sm: 3 }}>\r\n                <Box sx={{ textAlign: 'center' }}>\r\n                  <Typography\r\n                    variant='h5'\r\n                    color='primary.main'\r\n                    fontWeight='bold'\r\n                  >\r\n                    {totalCalories}\r\n                  </Typography>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    Total Calories\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid size={{ xs: 6, sm: 3 }}>\r\n                <Box sx={{ textAlign: 'center' }}>\r\n                  <Typography\r\n                    variant='h6'\r\n                    color='success.main'\r\n                    fontWeight='bold'\r\n                  >\r\n                    {totalMacros.protein}g\r\n                  </Typography>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    Protein\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid size={{ xs: 6, sm: 3 }}>\r\n                <Box sx={{ textAlign: 'center' }}>\r\n                  <Typography\r\n                    variant='h6'\r\n                    color='warning.main'\r\n                    fontWeight='bold'\r\n                  >\r\n                    {totalMacros.carbs}g\r\n                  </Typography>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    Carbs\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n              <Grid size={{ xs: 6, sm: 3 }}>\r\n                <Box sx={{ textAlign: 'center' }}>\r\n                  <Typography variant='h6' color='error.main' fontWeight='bold'>\r\n                    {totalMacros.fats}g\r\n                  </Typography>\r\n                  <Typography variant='caption' color='text.secondary'>\r\n                    Fats\r\n                  </Typography>\r\n                </Box>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n      </DialogContent>\r\n\r\n      <DialogActions sx={{ p: 2, gap: 1 }}>\r\n        <Button onClick={handleClose} variant='outlined'>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleSubmit}\r\n          variant='contained'\r\n          disabled={formData.meals.length === 0}\r\n        >\r\n          Create Plan\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default CreatePlanModal;\r\n","/**\r\n * Assign Plan Modal Component\r\n * Modal for assigning diet plans to members\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  TextField,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  IconButton,\r\n  Card,\r\n  CardContent,\r\n  Avatar,\r\n  Chip,\r\n} from '@mui/material';\r\nimport {\r\n  Close as CloseIcon,\r\n  Assignment as AssignmentIcon,\r\n  Person as PersonIcon,\r\n  Restaurant as RestaurantIcon,\r\n  CalendarToday as CalendarIcon,\r\n} from '@mui/icons-material';\r\nimport { useDietPlan } from '../context';\r\nimport { DIET_PLAN_TYPE_LABELS, DIET_GOAL_LABELS } from '../constants';\r\n\r\nconst MemberCard = ({ member, selected, onClick }) => (\r\n  <Card\r\n    variant='outlined'\r\n    sx={{\r\n      cursor: 'pointer',\r\n      border: selected ? 2 : 1,\r\n      borderColor: selected ? 'primary.main' : 'divider',\r\n      bgcolor: selected ? 'primary.50' : 'background.paper',\r\n      '&:hover': {\r\n        borderColor: 'primary.main',\r\n        bgcolor: 'primary.50',\r\n      },\r\n    }}\r\n    onClick={onClick}\r\n  >\r\n    <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\r\n      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>\r\n        <Avatar sx={{ bgcolor: 'primary.main' }}>\r\n          {member.name.charAt(0)}\r\n        </Avatar>\r\n        <Box sx={{ flexGrow: 1 }}>\r\n          <Typography variant='subtitle1' fontWeight='medium'>\r\n            {member.name}\r\n          </Typography>\r\n          <Typography variant='body2' color='text.secondary'>\r\n            {member.email}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', gap: 1, mt: 1 }}>\r\n            <Chip\r\n              label={member.membershipType}\r\n              size='small'\r\n              variant='outlined'\r\n            />\r\n            <Chip\r\n              label={member.status}\r\n              size='small'\r\n              color={member.status === 'active' ? 'success' : 'default'}\r\n            />\r\n          </Box>\r\n        </Box>\r\n      </Box>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nconst PlanCard = ({ plan, selected, onClick }) => {\r\n  const totalCalories = plan.meals.reduce(\r\n    (sum, meal) => sum + meal.calories,\r\n    0\r\n  );\r\n\r\n  return (\r\n    <Card\r\n      variant='outlined'\r\n      sx={{\r\n        cursor: 'pointer',\r\n        border: selected ? 2 : 1,\r\n        borderColor: selected ? 'primary.main' : 'divider',\r\n        bgcolor: selected ? 'primary.50' : 'background.paper',\r\n        '&:hover': {\r\n          borderColor: 'primary.main',\r\n          bgcolor: 'primary.50',\r\n        },\r\n      }}\r\n      onClick={onClick}\r\n    >\r\n      <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>\r\n        <Box>\r\n          <Typography variant='subtitle1' fontWeight='medium' gutterBottom>\r\n            {plan.name}\r\n          </Typography>\r\n          <Typography\r\n            variant='body2'\r\n            color='text.secondary'\r\n            sx={{\r\n              display: '-webkit-box',\r\n              overflow: 'hidden',\r\n              WebkitBoxOrient: 'vertical',\r\n              WebkitLineClamp: 2,\r\n              mb: 1,\r\n            }}\r\n          >\r\n            {plan.description}\r\n          </Typography>\r\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 1 }}>\r\n            <Chip\r\n              label={DIET_PLAN_TYPE_LABELS[plan.type]}\r\n              size='small'\r\n              color='primary'\r\n              variant='outlined'\r\n            />\r\n            {plan.goals.slice(0, 2).map((goal) => (\r\n              <Chip\r\n                key={goal}\r\n                label={DIET_GOAL_LABELS[goal]}\r\n                size='small'\r\n                variant='outlined'\r\n              />\r\n            ))}\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <Typography variant='caption' color='text.secondary'>\r\n              {plan.meals.length} meals • {totalCalories} cal/day\r\n            </Typography>\r\n            <Typography variant='caption' color='text.secondary'>\r\n              {plan.duration} days\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nconst AssignPlanModal = ({ open, onClose, preselectedPlan = null }) => {\r\n  const { members, dietPlans, assignDietPlan } = useDietPlan();\r\n\r\n  const [selectedMember, setSelectedMember] = useState(null);\r\n  const [selectedPlan, setSelectedPlan] = useState(preselectedPlan);\r\n  const [startDate, setStartDate] = useState(\r\n    new Date().toISOString().split('T')[0]\r\n  );\r\n  const [notes, setNotes] = useState('');\r\n  const [memberSearch, setMemberSearch] = useState('');\r\n  const [planSearch, setPlanSearch] = useState('');\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  // Filter active plans and members\r\n  const activePlans = useMemo(() => {\r\n    return dietPlans.filter((plan) => plan.isActive);\r\n  }, [dietPlans]);\r\n\r\n  const activeMembers = useMemo(() => {\r\n    return members.filter((member) => member.status === 'active');\r\n  }, [members]);\r\n\r\n  // Filter members and plans based on search\r\n  const filteredMembers = useMemo(() => {\r\n    return activeMembers.filter(\r\n      (member) =>\r\n        member.name.toLowerCase().includes(memberSearch.toLowerCase()) ||\r\n        member.email.toLowerCase().includes(memberSearch.toLowerCase())\r\n    );\r\n  }, [activeMembers, memberSearch]);\r\n\r\n  const filteredPlans = useMemo(() => {\r\n    return activePlans.filter(\r\n      (plan) =>\r\n        plan.name.toLowerCase().includes(planSearch.toLowerCase()) ||\r\n        plan.description.toLowerCase().includes(planSearch.toLowerCase())\r\n    );\r\n  }, [activePlans, planSearch]);\r\n\r\n  // Calculate end date based on selected plan\r\n  const endDate = useMemo(() => {\r\n    if (selectedPlan && startDate) {\r\n      const start = new Date(startDate);\r\n      const end = new Date(start);\r\n      end.setDate(start.getDate() + selectedPlan.duration);\r\n      return end.toISOString().split('T')[0];\r\n    }\r\n    return '';\r\n  }, [selectedPlan, startDate]);\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (!selectedMember) {\r\n      newErrors.member = 'Please select a member';\r\n    }\r\n\r\n    if (!selectedPlan) {\r\n      newErrors.plan = 'Please select a diet plan';\r\n    }\r\n\r\n    if (!startDate) {\r\n      newErrors.startDate = 'Start date is required';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (validateForm()) {\r\n      assignDietPlan({\r\n        memberId: selectedMember.id,\r\n        memberName: selectedMember.name,\r\n        dietPlanId: selectedPlan.id,\r\n        startDate,\r\n        endDate,\r\n        notes,\r\n      });\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSelectedMember(null);\r\n    setSelectedPlan(preselectedPlan);\r\n    setStartDate(new Date().toISOString().split('T')[0]);\r\n    setNotes('');\r\n    setMemberSearch('');\r\n    setPlanSearch('');\r\n    setErrors({});\r\n    onClose();\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (preselectedPlan) {\r\n      setSelectedPlan(preselectedPlan);\r\n    }\r\n  }, [preselectedPlan]);\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClose}\r\n      maxWidth='lg'\r\n      fullWidth\r\n      PaperProps={{\r\n        sx: { height: '90vh' },\r\n      }}\r\n    >\r\n      <DialogTitle>\r\n        <Box\r\n          sx={{\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'space-between',\r\n          }}\r\n        >\r\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\r\n            <AssignmentIcon />\r\n            <Typography variant='h6' component='span'>\r\n              Assign Diet Plan\r\n            </Typography>\r\n          </Box>\r\n          <IconButton onClick={handleClose}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </Box>\r\n      </DialogTitle>\r\n\r\n      <DialogContent dividers sx={{ p: 3 }}>\r\n        <Grid container spacing={3}>\r\n          {/* Member Selection */}\r\n          <Grid size={{ xs: 12, md: 6 }}>\r\n            <Box sx={{ mb: 2 }}>\r\n              <Typography\r\n                variant='h6'\r\n                gutterBottom\r\n                sx={{ display: 'flex', alignItems: 'center', gap: 1 }}\r\n              >\r\n                <PersonIcon />\r\n                Select Member\r\n                {errors.member && (\r\n                  <Typography variant='caption' color='error'>\r\n                    *\r\n                  </Typography>\r\n                )}\r\n              </Typography>\r\n              <TextField\r\n                fullWidth\r\n                placeholder='Search members...'\r\n                value={memberSearch}\r\n                onChange={(e) => setMemberSearch(e.target.value)}\r\n                sx={{ mb: 2 }}\r\n              />\r\n            </Box>\r\n\r\n            <Box\r\n              sx={{\r\n                maxHeight: 300,\r\n                overflowY: 'auto',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: 1,\r\n              }}\r\n            >\r\n              {filteredMembers.length === 0 ? (\r\n                <Typography\r\n                  color='text.secondary'\r\n                  sx={{ textAlign: 'center', py: 4 }}\r\n                >\r\n                  {memberSearch\r\n                    ? 'No members found matching your search'\r\n                    : 'No active members available'}\r\n                </Typography>\r\n              ) : (\r\n                filteredMembers.map((member) => (\r\n                  <MemberCard\r\n                    key={member.id}\r\n                    member={member}\r\n                    selected={selectedMember?.id === member.id}\r\n                    onClick={() => setSelectedMember(member)}\r\n                  />\r\n                ))\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n\r\n          {/* Plan Selection */}\r\n          <Grid size={{ xs: 12, md: 6 }}>\r\n            <Box sx={{ mb: 2 }}>\r\n              <Typography\r\n                variant='h6'\r\n                gutterBottom\r\n                sx={{ display: 'flex', alignItems: 'center', gap: 1 }}\r\n              >\r\n                <RestaurantIcon />\r\n                Select Diet Plan\r\n                {errors.plan && (\r\n                  <Typography variant='caption' color='error'>\r\n                    *\r\n                  </Typography>\r\n                )}\r\n              </Typography>\r\n              <TextField\r\n                fullWidth\r\n                placeholder='Search diet plans...'\r\n                value={planSearch}\r\n                onChange={(e) => setPlanSearch(e.target.value)}\r\n                sx={{ mb: 2 }}\r\n              />\r\n            </Box>\r\n\r\n            <Box\r\n              sx={{\r\n                maxHeight: 300,\r\n                overflowY: 'auto',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                gap: 1,\r\n              }}\r\n            >\r\n              {filteredPlans.length === 0 ? (\r\n                <Typography\r\n                  color='text.secondary'\r\n                  sx={{ textAlign: 'center', py: 4 }}\r\n                >\r\n                  {planSearch\r\n                    ? 'No plans found matching your search'\r\n                    : 'No active diet plans available'}\r\n                </Typography>\r\n              ) : (\r\n                filteredPlans.map((plan) => (\r\n                  <PlanCard\r\n                    key={plan.id}\r\n                    plan={plan}\r\n                    selected={selectedPlan?.id === plan.id}\r\n                    onClick={() => setSelectedPlan(plan)}\r\n                  />\r\n                ))\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* Assignment Details */}\r\n        {selectedMember && selectedPlan && (\r\n          <Box sx={{ mt: 4 }}>\r\n            <Typography\r\n              variant='h6'\r\n              gutterBottom\r\n              sx={{ display: 'flex', alignItems: 'center', gap: 1 }}\r\n            >\r\n              <CalendarIcon />\r\n              Assignment Details\r\n            </Typography>\r\n\r\n            <Grid container spacing={2} sx={{ mb: 3 }}>\r\n              <Grid size={{ xs: 12, sm: 4 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label='Start Date'\r\n                  type='date'\r\n                  value={startDate}\r\n                  onChange={(e) => setStartDate(e.target.value)}\r\n                  error={!!errors.startDate}\r\n                  helperText={errors.startDate}\r\n                  InputLabelProps={{ shrink: true }}\r\n                  required\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 4 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label='End Date'\r\n                  type='date'\r\n                  value={endDate}\r\n                  InputProps={{ readOnly: true }}\r\n                  InputLabelProps={{ shrink: true }}\r\n                />\r\n              </Grid>\r\n              <Grid size={{ xs: 12, sm: 4 }}>\r\n                <TextField\r\n                  fullWidth\r\n                  label='Duration'\r\n                  value={`${selectedPlan.duration} days`}\r\n                  InputProps={{ readOnly: true }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <TextField\r\n              fullWidth\r\n              label='Notes (Optional)'\r\n              value={notes}\r\n              onChange={(e) => setNotes(e.target.value)}\r\n              multiline\r\n              rows={3}\r\n              placeholder='Add any special instructions or notes for this assignment...'\r\n            />\r\n\r\n            {/* Assignment Summary */}\r\n            <Card\r\n              variant='outlined'\r\n              sx={{ mt: 2, bgcolor: 'background.default' }}\r\n            >\r\n              <CardContent>\r\n                <Typography\r\n                  variant='subtitle1'\r\n                  fontWeight='medium'\r\n                  gutterBottom\r\n                >\r\n                  Assignment Summary\r\n                </Typography>\r\n                <Grid container spacing={2}>\r\n                  <Grid size={{ xs: 12, sm: 6 }}>\r\n                    <Typography variant='body2' color='text.secondary'>\r\n                      <strong>Member:</strong> {selectedMember.name}\r\n                    </Typography>\r\n                    <Typography variant='body2' color='text.secondary'>\r\n                      <strong>Email:</strong> {selectedMember.email}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid size={{ xs: 12, sm: 6 }}>\r\n                    <Typography variant='body2' color='text.secondary'>\r\n                      <strong>Diet Plan:</strong> {selectedPlan.name}\r\n                    </Typography>\r\n                    <Typography variant='body2' color='text.secondary'>\r\n                      <strong>Type:</strong>{' '}\r\n                      {DIET_PLAN_TYPE_LABELS[selectedPlan.type]}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardContent>\r\n            </Card>\r\n          </Box>\r\n        )}\r\n      </DialogContent>\r\n\r\n      <DialogActions sx={{ p: 2, gap: 1 }}>\r\n        <Button onClick={handleClose} variant='outlined'>\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleSubmit}\r\n          variant='contained'\r\n          disabled={!selectedMember || !selectedPlan}\r\n        >\r\n          Assign Plan\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default AssignPlanModal;\r\n","/**\r\n * Diet Plan Management App\r\n * Main container component for the diet plan management feature\r\n */\r\n\r\nimport React, { useState } from 'react';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  Container,\r\n  Paper,\r\n  useTheme,\r\n  useMediaQuery,\r\n} from '@mui/material';\r\nimport {\r\n  Add as AddIcon,\r\n  Assignment as AssignIcon,\r\n  Dashboard as DashboardIcon,\r\n  List as ListIcon,\r\n  Analytics as AnalyticsIcon,\r\n} from '@mui/icons-material';\r\nimport { useDietPlan } from '../context';\r\nimport DietPlanDashboard from './DietPlanDashboard';\r\nimport DietPlanList from './DietPlanList';\r\nimport AssignmentList from './AssignmentList';\r\nimport AnalyticsView from './AnalyticsView';\r\nimport CreatePlanModal from './CreatePlanModal';\r\nimport AssignPlanModal from './AssignPlanModal';\r\nimport ProgressModal from './ProgressModal';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role='tabpanel'\r\n      hidden={value !== index}\r\n      id={`diet-plan-tabpanel-${index}`}\r\n      aria-labelledby={`diet-plan-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box sx={{ pt: 3 }}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst DietPlanApp = () => {\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\r\n  const [activeTab, setActiveTab] = useState(0);\r\n\r\n  const {\r\n    openCreatePlan,\r\n    openAssignPlan,\r\n    isCreatePlanOpen,\r\n    isAssignPlanOpen,\r\n    isProgressModalOpen,\r\n  } = useDietPlan();\r\n\r\n  const handleTabChange = (event, newValue) => {\r\n    setActiveTab(newValue);\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      label: 'Dashboard',\r\n      icon: <DashboardIcon />,\r\n      component: <DietPlanDashboard />,\r\n    },\r\n    {\r\n      label: 'Diet Plans',\r\n      icon: <ListIcon />,\r\n      component: <DietPlanList />,\r\n    },\r\n    {\r\n      label: 'Assignments',\r\n      icon: <AssignIcon />,\r\n      component: <AssignmentList />,\r\n    },\r\n    {\r\n      label: 'Analytics',\r\n      icon: <AnalyticsIcon />,\r\n      component: <AnalyticsView />,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Container maxWidth={false} sx={{ py: 3 }}>\r\n      {/* Header */}\r\n      <Box\r\n        sx={{\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          mb: 3,\r\n          flexWrap: 'wrap',\r\n          gap: 2,\r\n        }}\r\n      >\r\n        <Box>\r\n          <Typography variant='h4' component='h1' gutterBottom>\r\n            Diet Plan Management\r\n          </Typography>\r\n          <Typography variant='body1' color='text.secondary'>\r\n            Create, assign, and track customized diet plans for members\r\n          </Typography>\r\n        </Box>\r\n\r\n        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n          <Button\r\n            variant='outlined'\r\n            startIcon={<AssignIcon />}\r\n            onClick={() => openAssignPlan()}\r\n            size={isMobile ? 'small' : 'medium'}\r\n          >\r\n            Assign Plan\r\n          </Button>\r\n          <Button\r\n            variant='contained'\r\n            startIcon={<AddIcon />}\r\n            onClick={openCreatePlan}\r\n            size={isMobile ? 'small' : 'medium'}\r\n          >\r\n            Create Plan\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n\r\n      {/* Navigation Tabs */}\r\n      <Paper sx={{ mb: 3 }}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <Tabs\r\n            value={activeTab}\r\n            onChange={handleTabChange}\r\n            aria-label='diet plan management tabs'\r\n            variant={isMobile ? 'scrollable' : 'standard'}\r\n            scrollButtons={isMobile ? 'auto' : false}\r\n            sx={{\r\n              px: 2,\r\n              '& .MuiTab-root': {\r\n                minHeight: 64,\r\n                fontWeight: 500,\r\n              },\r\n            }}\r\n          >\r\n            {tabs.map((tab, index) => (\r\n              <Tab\r\n                key={index}\r\n                icon={tab.icon}\r\n                iconPosition='start'\r\n                label={tab.label}\r\n                id={`diet-plan-tab-${index}`}\r\n                aria-controls={`diet-plan-tabpanel-${index}`}\r\n                sx={{\r\n                  '& .MuiTab-iconWrapper': {\r\n                    mb: 0,\r\n                    mr: 1,\r\n                  },\r\n                }}\r\n              />\r\n            ))}\r\n          </Tabs>\r\n        </Box>\r\n\r\n        {/* Tab Panels */}\r\n        {tabs.map((tab, index) => (\r\n          <TabPanel key={index} value={activeTab} index={index}>\r\n            {tab.component}\r\n          </TabPanel>\r\n        ))}\r\n      </Paper>\r\n\r\n      {/* Modals */}\r\n      {isCreatePlanOpen && <CreatePlanModal />}\r\n      {isAssignPlanOpen && <AssignPlanModal />}\r\n      {isProgressModalOpen && <ProgressModal />}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default DietPlanApp;\r\n","/**\r\n * Diet Plan Management Application\r\n * Wrapper component with context provider for the entire diet plan management system\r\n */\r\n\r\nimport React from 'react';\r\nimport { DietPlanProvider } from './context';\r\nimport DietPlanApp from './components/DietPlanApp';\r\n\r\nconst DietPlanManagementApp = () => {\r\n  return (\r\n    <DietPlanProvider>\r\n      <DietPlanApp />\r\n    </DietPlanProvider>\r\n  );\r\n};\r\n\r\nexport default DietPlanManagementApp;\r\n"],"names":["DIET_PLAN_TYPES","DIET_PLAN_TYPE_LABELS","maintenance","cutting","bulking","therapeutic","DIET_GOALS","DIET_GOAL_LABELS","endurance","flexibility","MEAL_TYPES","MEAL_TYPE_LABELS","breakfast","lunch","dinner","snack","ASSIGNMENT_STATUS","ASSIGNMENT_STATUS_LABELS","active","paused","completed","cancelled","pending","STATUS_COLORS","DIET_PLAN_STATUS_COLORS","inactive","DIET_PLAN_TYPE_COLORS","ACTIVITY_LEVELS","ACTIVITY_LEVEL_LABELS","sedentary","low","moderate","high","ACTIVITY_MULTIPLIERS","DIETARY_RESTRICTIONS","DIETARY_RESTRICTION_LABELS","none","vegetarian","vegan","keto","paleo","diabetic","CHART_COLORS","PRIMARY","SECONDARY","SUCCESS","WARNING","ERROR","INFO","PROTEIN","CARBS","FATS","MACRO_COLORS","protein","carbs","fats","DEFAULT_MACRO_RATIOS","PAGINATION_OPTIONS","DEFAULT_PAGE_SIZE","VALIDATION_RULES","PLAN_NAME_MIN_LENGTH","PLAN_NAME_MAX_LENGTH","DESCRIPTION_MAX_LENGTH","MIN_CALORIES","MAX_CALORIES","MIN_DURATION","MAX_DURATION","MIN_PROTEIN","MAX_PROTEIN","MIN_CARBS","MAX_CARBS","MIN_FATS","MAX_FATS","DRAWER_WIDTH","MOBILE_BREAKPOINT","CARD_ELEVATION","MODAL_MAX_WIDTH","DATE_FORMATS","DISPLAY","INPUT","FULL","calculateBMR","weight","height","age","gender","baseMetabolism","toLowerCase","Math","round","calculateTDEE","bmr","activityLevel","multiplier","calculateMacroTargets","calories","macroRatios","calculateCaloriesFromMacros","calculateAdherence","completedDays","totalDays","calculateProgress","startDate","endDate","currentDate","arguments","length","undefined","Date","start","end","current","totalDuration","elapsed","formatCalories","concat","toLocaleString","formatWeight","unit","toFixed","formatMeasurementChange","change","formatPercentage","value","decimals","formatDate","date","format","dateObj","isNaN","getTime","toLocaleDateString","month","day","year","weekday","toISOString","split","toLocaleTimeString","hour","minute","getAdherenceColor","adherence","getMacroColor","macroType","getDaysRemaining","diffTime","diffDays","ceil","max","validateMacroRatios","total","abs","getMealTimesSuggestion","mealType","sortAssignmentsByPriority","assignments","Array","isArray","sort","a","b","statusPriority","aPriority","status","bPriority","assignedDate","filterAssignments","searchTerm","term","filter","assignment","_assignment$memberNam","_assignment$memberEma","_assignment$status","_assignment$notes","memberName","includes","memberEmail","notes","generateMacroChartData","macros","id","label","color","calculateWaterIntake","baseIntake","TabPanel","_ref","children","index","other","_objectWithoutProperties","_excluded","_jsx","_objectSpread","role","hidden","Box","sx","pt","MealTrackingTable","_ref2","meals","progress","orderBy","setOrderBy","useState","order","setOrder","mealProgress","useMemo","mealTracking","handleRequestSort","property","sortedMeals","comparator","aValue","bValue","aMealProgress","bMealProgress","name","type","foods","reduce","sum","food","TableContainer","component","Paper","variant","_jsxs","Table","size","TableHead","TableRow","TableCell","TableSortLabel","direction","onClick","align","TableBody","map","meal","_meal$macros","_meal$macros2","_meal$macros3","floor","random","Typography","fontWeight","Chip","_ref3","_plan$tags","_assignment$progress5","_assignment$progress6","open","onClose","dietPlans","members","updateAssignmentProgress","useDietPlan","tabValue","setTabValue","isEditing","setIsEditing","editableProgress","setEditableProgress","plan","find","p","dietPlanId","member","m","memberId","_assignment$progress","_assignment$progress2","_assignment$progress3","timeProgress","daysRemaining","weightChange","currentWeight","progressChartData","dates","now","weeksElapsed","min","i","_assignment$progress4","setDate","getDate","push","handleProgressChange","field","prev","handleClose","totalCalories","tdee","Dialog","maxWidth","fullWidth","PaperProps","DialogTitle","display","alignItems","justifyContent","gap","AssessmentIcon","Button","startIcon","EditIcon","handleEditToggle","IconButton","CloseIcon","DialogContent","dividers","bgcolor","Grid","container","spacing","xs","md","Card","CardContent","textAlign","Avatar","mx","mb","width","charAt","gutterBottom","email","LinearProgress","borderBottom","borderColor","Tabs","onChange","handleTabChange","event","newValue","Tab","sm","PersonIcon","RestaurantIcon","duration","tags","join","mt","LineChart","xAxis","data","scaleType","series","margin","top","bottom","left","right","_Fragment","TextField","e","parseFloat","target","inputProps","multiline","rows","placeholder","lastUpdated","whiteSpace","DialogActions","DietPlanContext","createContext","INITIAL_FILTERS","planType","assignedTrainer","difficulty","DietPlanProvider","setDietPlans","dietPlansData","setAssignments","assignmentsData","membersData","filters","setFilters","selectedPlan","setSelectedPlan","selectedAssignment","setSelectedAssignment","isCreatePlanOpen","setIsCreatePlanOpen","isAssignPlanOpen","setIsAssignPlanOpen","isProgressModalOpen","setIsProgressModalOpen","loading","setLoading","filteredAssignments","filtered","assignedBy","planIds","activeAssignments","completedAssignments","updateFilter","useCallback","filterName","updateSearchTerm","clearAllFilters","createDietPlan","async","newPlan","planData","String","padStart","createdAt","isActive","error","console","updateDietPlan","planId","updates","deleteDietPlan","assignDietPlan","newAssignment","assignmentData","measurements","updateAssignment","assignmentId","updateProgress","progressData","cancelAssignment","openCreatePlan","closeCreatePlan","openAssignPlan","closeAssignPlan","openProgressModal","closeProgressModal","getDietPlanById","getMemberById","getAssignmentsByMember","getAssignmentsByPlan","contextValue","Provider","ProgressModal","context","useContext","Error","MetricCard","title","icon","subtitle","mr","flexGrow","DietPlanDashboard","metrics","totalPlans","totalAssignments","totalActiveAssignments","totalCompletedAssignments","avgAdherence","statusDistribution","acc","planTypeDistribution","statusChartData","Object","entries","count","planTypeChartData","recentAssignments","slice","weeks","week","completedPlans","AssignmentIcon","GroupIcon","TrendingUpIcon","PieChart","highlightScope","faded","highlighted","innerRadius","additionalRadius","item","flexDirection","border","borderRadius","Tooltip","VisibilityIcon","_plan$supplements","showMealDetails","setShowMealDetails","toggleMealDetails","stopPropagation","getMealTypeIcon","FreeBreakfastIcon","fontSize","LunchIcon","DinnerDiningIcon","SnackIcon","cursor","ExpandLessIcon","ExpandMoreIcon","Collapse","in","maxHeight","overflowY","pr","mealIndex","textTransform","time","List","dense","py","foodIndex","ListItem","pl","ListItemIcon","minWidth","backgroundColor","ListItemText","primary","quantity","secondary","flexWrap","waterIntake","supplements","Divider","my","WaterIcon","SupplementIcon","supplement","dosage","timing","fontStyle","onEdit","onDelete","onAssign","anchorEl","setAnchorEl","Boolean","handleMenuClose","totalMacros","mealMacros","mealAcc","minHeight","transition","transform","boxShadow","flex","goals","currentTarget","ml","MoreVertIcon","Menu","MenuItem","handleEdit","handleAssign","handleDelete","DeleteIcon","overflow","WebkitBoxOrient","WebkitLineClamp","description","CalorieIcon","targetCalories","AccessTimeIcon","MealPlanDetails","borderTop","createdBy","toUpperCase","DietPlanList","setSearchTerm","filterType","setFilterType","filterStatus","setFilterStatus","handleCreatePlan","handleEditPlan","log","handleAssignPlan","filteredPlans","matchesSearch","matchesType","matchesStatus","handleDeletePlan","window","confirm","AddIcon","InputProps","startAdornment","InputAdornment","position","SearchIcon","FormControl","InputLabel","Select","FilterListIcon","xl","DietPlanCard","AssignmentRow","onViewProgress","hover","handleViewProgress","AssignmentList","openAssignPlanModal","deleteAssignment","descendingComparator","_a$progress","_b$progress","planB","getComparator","sortData","array","stabilizedArray","el","assignmentSummary","handleDeleteAssignment","trend","trendValue","TrendingDownIcon","TopPerformersTable","_a$progress2","_b$progress2","planName","topPerformers","filteredData","AnalyticsView","analytics","totalMembers","Set","_a$progress3","completionRate","goalDistribution","forEach","goal","adherenceRanges","_assignment$progress7","monthlyTrends","completions","adherenceChartData","_ref4","range","CheckCircleIcon","some","BarChart","MealForm","onRemove","handleChange","handleMacroChange","macro","required","parseInt","endAdornment","formData","setFormData","errors","setErrors","handleMealChange","handleRemoveMeal","_","helperText","style","g","handleGoalToggle","handleAddMeal","handleSubmit","validateForm","newErrors","trim","keys","disabled","MemberCard","selected","pb","membershipType","PlanCard","preselectedPlan","selectedMember","setSelectedMember","setStartDate","setNotes","memberSearch","setMemberSearch","planSearch","setPlanSearch","activePlans","activeMembers","filteredMembers","React","CalendarIcon","InputLabelProps","shrink","readOnly","props","DietPlanApp","theme","useTheme","isMobile","useMediaQuery","breakpoints","down","activeTab","setActiveTab","tabs","DashboardIcon","ListIcon","AssignIcon","AnalyticsIcon","Container","scrollButtons","px","tab","iconPosition","CreatePlanModal","AssignPlanModal","DietPlanManagementApp"],"sourceRoot":""}